// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ActivityDefinition
  /// </summary>
  public static class ActivityDefinitionSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ActivityDefinition into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ActivityDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ActivityDefinition");
      // Complex: ActivityDefinition, Export: ActivityDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.SubtitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.SubtitleElement.Value))
        {
          writer.WriteString("subtitle",current.SubtitleElement.Value);
        }
        if (current.SubtitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.SubtitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_subtitle",false,current.SubtitleElement.Extension,current.SubtitleElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.Subject != null)
      {
        switch (current.Subject)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("subjectCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("subjectReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.UsageElement != null)
      {
        if (!string.IsNullOrEmpty(current.UsageElement.Value))
        {
          writer.WriteString("usage",current.UsageElement.Value);
        }
        if (current.UsageElement.HasExtensions() || (!string.IsNullOrEmpty(current.UsageElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_usage",false,current.UsageElement.Extension,current.UsageElement.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.ApprovalDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ApprovalDateElement.Value))
        {
          writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
        }
        if (current.ApprovalDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ApprovalDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_approvalDate",false,current.ApprovalDateElement.Extension,current.ApprovalDateElement.ElementId);
        }
      }

      if (current.LastReviewDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.LastReviewDateElement.Value))
        {
          writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
        }
        if (current.LastReviewDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.LastReviewDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lastReviewDate",false,current.LastReviewDateElement.Extension,current.LastReviewDateElement.ElementId);
        }
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Topic != null) && (current.Topic.Count != 0))
      {
        writer.WritePropertyName("topic");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Topic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Author != null) && (current.Author.Count != 0))
      {
        writer.WritePropertyName("author");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Author)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Editor != null) && (current.Editor.Count != 0))
      {
        writer.WritePropertyName("editor");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Editor)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Reviewer != null) && (current.Reviewer.Count != 0))
      {
        writer.WritePropertyName("reviewer");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Reviewer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endorser != null) && (current.Endorser.Count != 0))
      {
        writer.WritePropertyName("endorser");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Endorser)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RelatedArtifact != null) && (current.RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();
        foreach (RelatedArtifact val in current.RelatedArtifact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LibraryElement != null) && (current.LibraryElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.LibraryElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("library");
          writer.WriteStartArray();
          foreach (Canonical val in current.LibraryElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_library");
          writer.WriteStartArray();
          foreach (Canonical val in current.LibraryElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.KindElement != null)
      {
        if (current.KindElement.Value != null)
        {
          writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));
        }
        if (current.KindElement.HasExtensions() || (!string.IsNullOrEmpty(current.KindElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_kind",false,current.KindElement.Extension,current.KindElement.ElementId);
        }
      }

      if (current.ProfileElement != null)
      {
        if (!string.IsNullOrEmpty(current.ProfileElement.Value))
        {
          writer.WriteString("profile",current.ProfileElement.Value);
        }
        if (current.ProfileElement.HasExtensions() || (!string.IsNullOrEmpty(current.ProfileElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_profile",false,current.ProfileElement.Extension,current.ProfileElement.ElementId);
        }
      }

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.IntentElement != null)
      {
        if (current.IntentElement.Value != null)
        {
          writer.WriteString("intent",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.IntentElement.Value));
        }
        if (current.IntentElement.HasExtensions() || (!string.IsNullOrEmpty(current.IntentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_intent",false,current.IntentElement.Extension,current.IntentElement.ElementId);
        }
      }

      if (current.PriorityElement != null)
      {
        if (current.PriorityElement.Value != null)
        {
          writer.WriteString("priority",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.PriorityElement.Value));
        }
        if (current.PriorityElement.HasExtensions() || (!string.IsNullOrEmpty(current.PriorityElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_priority",false,current.PriorityElement.Extension,current.PriorityElement.ElementId);
        }
      }

      if (current.DoNotPerformElement != null)
      {
        if (current.DoNotPerformElement.Value != null)
        {
          writer.WriteBoolean("doNotPerform",(bool)current.DoNotPerformElement.Value);
        }
        if (current.DoNotPerformElement.HasExtensions() || (!string.IsNullOrEmpty(current.DoNotPerformElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_doNotPerform",false,current.DoNotPerformElement.Extension,current.DoNotPerformElement.ElementId);
        }
      }

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Hl7.Fhir.Model.Timing v_Timing:
            writer.WritePropertyName("timingTiming");
            v_Timing.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("timingDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_timingDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Age v_Age:
            writer.WritePropertyName("timingAge");
            v_Age.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Range v_Range:
            writer.WritePropertyName("timingRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Duration v_Duration:
            writer.WritePropertyName("timingDuration");
            v_Duration.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.Participant != null) && (current.Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();
        foreach (ActivityDefinition.ParticipantComponent val in current.Participant)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Product != null)
      {
        switch (current.Product)
        {
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("productReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("productCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (Dosage val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.BodySite != null) && (current.BodySite.Count != 0))
      {
        writer.WritePropertyName("bodySite");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.BodySite)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SpecimenRequirement != null) && (current.SpecimenRequirement.Count != 0))
      {
        writer.WritePropertyName("specimenRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.SpecimenRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ObservationRequirement != null) && (current.ObservationRequirement.Count != 0))
      {
        writer.WritePropertyName("observationRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ObservationRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ObservationResultRequirement != null) && (current.ObservationResultRequirement.Count != 0))
      {
        writer.WritePropertyName("observationResultRequirement");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ObservationResultRequirement)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.TransformElement != null)
      {
        if (!string.IsNullOrEmpty(current.TransformElement.Value))
        {
          writer.WriteString("transform",current.TransformElement.Value);
        }
        if (current.TransformElement.HasExtensions() || (!string.IsNullOrEmpty(current.TransformElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_transform",false,current.TransformElement.Extension,current.TransformElement.ElementId);
        }
      }

      if ((current.DynamicValue != null) && (current.DynamicValue.Count != 0))
      {
        writer.WritePropertyName("dynamicValue");
        writer.WriteStartArray();
        foreach (ActivityDefinition.DynamicValueComponent val in current.DynamicValue)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ActivityDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ActivityDefinition >>> ActivityDefinition.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ActivityDefinition: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ActivityDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "subtitle":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SubtitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SubtitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_subtitle":
          if (current.SubtitleElement == null) { current.SubtitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SubtitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "subjectCodeableConcept":
          current.Subject = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Subject).DeserializeJson(ref reader, options);
          break;

        case "subjectReference":
          current.Subject = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Subject).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "usage":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UsageElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.UsageElement = new FhirString(reader.GetString());
          }
          break;

        case "_usage":
          if (current.UsageElement == null) { current.UsageElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.UsageElement).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "approvalDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ApprovalDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.ApprovalDateElement = new Date(reader.GetString());
          }
          break;

        case "_approvalDate":
          if (current.ApprovalDateElement == null) { current.ApprovalDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.ApprovalDateElement).DeserializeJson(ref reader, options);
          break;

        case "lastReviewDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LastReviewDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.LastReviewDateElement = new Date(reader.GetString());
          }
          break;

        case "_lastReviewDate":
          if (current.LastReviewDateElement == null) { current.LastReviewDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.LastReviewDateElement).DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          current.EffectivePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.EffectivePeriod).DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'topic' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Topic = new Hl7.Fhir.Model.CodeableConcept();
            v_Topic.DeserializeJson(ref reader, options);
            current.Topic.Add(v_Topic);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'topic' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'author' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Author = new Hl7.Fhir.Model.ContactDetail();
            v_Author.DeserializeJson(ref reader, options);
            current.Author.Add(v_Author);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'author' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }
          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'editor' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Editor = new Hl7.Fhir.Model.ContactDetail();
            v_Editor.DeserializeJson(ref reader, options);
            current.Editor.Add(v_Editor);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'editor' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }
          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'reviewer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Reviewer = new Hl7.Fhir.Model.ContactDetail();
            v_Reviewer.DeserializeJson(ref reader, options);
            current.Reviewer.Add(v_Reviewer);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'reviewer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }
          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'endorser' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Endorser = new Hl7.Fhir.Model.ContactDetail();
            v_Endorser.DeserializeJson(ref reader, options);
            current.Endorser.Add(v_Endorser);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'endorser' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'relatedArtifact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RelatedArtifact v_RelatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
            v_RelatedArtifact.DeserializeJson(ref reader, options);
            current.RelatedArtifact.Add(v_RelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'relatedArtifact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }
          break;

        case "library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'library' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LibraryElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LibraryElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.LibraryElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'library' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LibraryElement.Count == 0)
          {
            current.LibraryElement = null;
          }
          break;

        case "_library":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'library' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_library = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_library >= current.LibraryElement.Count)
            {
              current.LibraryElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LibraryElement[i_library++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'library' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "kind":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.KindElement = new Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>();
            reader.Skip();
          }
          else
          {
            current.KindElement = new Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(reader.GetString()));
          }
          break;

        case "_kind":
          if (current.KindElement == null) { current.KindElement = new Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(); }
          ((Hl7.Fhir.Model.Element)current.KindElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ProfileElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.ProfileElement = new Canonical(reader.GetString());
          }
          break;

        case "_profile":
          if (current.ProfileElement == null) { current.ProfileElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "intent":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>();
            reader.Skip();
          }
          else
          {
            current.IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestIntent>(reader.GetString()));
          }
          break;

        case "_intent":
          if (current.IntentElement == null) { current.IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(); }
          ((Hl7.Fhir.Model.Element)current.IntentElement).DeserializeJson(ref reader, options);
          break;

        case "priority":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>();
            reader.Skip();
          }
          else
          {
            current.PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.RequestPriority>(reader.GetString()));
          }
          break;

        case "_priority":
          if (current.PriorityElement == null) { current.PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(); }
          ((Hl7.Fhir.Model.Element)current.PriorityElement).DeserializeJson(ref reader, options);
          break;

        case "doNotPerform":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DoNotPerformElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.DoNotPerformElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_doNotPerform":
          if (current.DoNotPerformElement == null) { current.DoNotPerformElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.DoNotPerformElement).DeserializeJson(ref reader, options);
          break;

        case "timingTiming":
          current.Timing = new Hl7.Fhir.Model.Timing();
          ((Hl7.Fhir.Model.Timing)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Timing = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Timing = new FhirDateTime(reader.GetString());
          }
          break;

        case "_timingDateTime":
          if (current.Timing == null) { current.Timing = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingAge":
          current.Timing = new Hl7.Fhir.Model.Age();
          ((Hl7.Fhir.Model.Age)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          current.Timing = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingRange":
          current.Timing = new Hl7.Fhir.Model.Range();
          ((Hl7.Fhir.Model.Range)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingDuration":
          current.Timing = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'participant' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Participant = new List<ActivityDefinition.ParticipantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent v_Participant = new Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent();
            v_Participant.DeserializeJson(ref reader, options);
            current.Participant.Add(v_Participant);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'participant' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Participant.Count == 0)
          {
            current.Participant = null;
          }
          break;

        case "productReference":
          current.Product = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Product).DeserializeJson(ref reader, options);
          break;

        case "productCodeableConcept":
          current.Product = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Product).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'dosage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Dosage v_Dosage = new Hl7.Fhir.Model.Dosage();
            v_Dosage.DeserializeJson(ref reader, options);
            current.Dosage.Add(v_Dosage);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'dosage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }
          break;

        case "bodySite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'bodySite' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.BodySite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_BodySite = new Hl7.Fhir.Model.CodeableConcept();
            v_BodySite.DeserializeJson(ref reader, options);
            current.BodySite.Add(v_BodySite);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'bodySite' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.BodySite.Count == 0)
          {
            current.BodySite = null;
          }
          break;

        case "specimenRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'specimenRequirement' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SpecimenRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_SpecimenRequirement = new Hl7.Fhir.Model.ResourceReference();
            v_SpecimenRequirement.DeserializeJson(ref reader, options);
            current.SpecimenRequirement.Add(v_SpecimenRequirement);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'specimenRequirement' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SpecimenRequirement.Count == 0)
          {
            current.SpecimenRequirement = null;
          }
          break;

        case "observationRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'observationRequirement' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ObservationRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ObservationRequirement = new Hl7.Fhir.Model.ResourceReference();
            v_ObservationRequirement.DeserializeJson(ref reader, options);
            current.ObservationRequirement.Add(v_ObservationRequirement);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'observationRequirement' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ObservationRequirement.Count == 0)
          {
            current.ObservationRequirement = null;
          }
          break;

        case "observationResultRequirement":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'observationResultRequirement' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ObservationResultRequirement = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ObservationResultRequirement = new Hl7.Fhir.Model.ResourceReference();
            v_ObservationResultRequirement.DeserializeJson(ref reader, options);
            current.ObservationResultRequirement.Add(v_ObservationResultRequirement);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'observationResultRequirement' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ObservationResultRequirement.Count == 0)
          {
            current.ObservationResultRequirement = null;
          }
          break;

        case "transform":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TransformElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.TransformElement = new Canonical(reader.GetString());
          }
          break;

        case "_transform":
          if (current.TransformElement == null) { current.TransformElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.TransformElement).DeserializeJson(ref reader, options);
          break;

        case "dynamicValue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActivityDefinition error reading 'dynamicValue' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DynamicValue = new List<ActivityDefinition.DynamicValueComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent v_DynamicValue = new Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent();
            v_DynamicValue.DeserializeJson(ref reader, options);
            current.DynamicValue.Add(v_DynamicValue);

            if (!reader.Read())
            {
              throw new JsonException($"ActivityDefinition error reading 'dynamicValue' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DynamicValue.Count == 0)
          {
            current.DynamicValue = null;
          }
          break;

        // Complex: ActivityDefinition, Export: ActivityDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ActivityDefinition#Participant into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ActivityDefinition#Participant, Export: ParticipantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#Participant
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ActivityDefinition.ParticipantComponent >>> ActivityDefinition#Participant.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ActivityDefinition.ParticipantComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#Participant
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ActionParticipantType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ActionParticipantType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ActionParticipantType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.ActionParticipantType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        // Complex: participant, Export: ParticipantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ActivityDefinition#DynamicValue into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ActivityDefinition#DynamicValue, Export: DynamicValueComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.PathElement != null)
      {
        if (!string.IsNullOrEmpty(current.PathElement.Value))
        {
          writer.WriteString("path",current.PathElement.Value);
        }
        if (current.PathElement.HasExtensions() || (!string.IsNullOrEmpty(current.PathElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_path",false,current.PathElement.Extension,current.PathElement.ElementId);
        }
      }

      if (current.Expression != null)
      {
        writer.WritePropertyName("expression");
        current.Expression.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ActivityDefinition.DynamicValueComponent >>> ActivityDefinition#DynamicValue.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ActivityDefinition.DynamicValueComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ActivityDefinition#DynamicValue
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "path":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PathElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PathElement = new FhirString(reader.GetString());
          }
          break;

        case "_path":
          if (current.PathElement == null) { current.PathElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PathElement).DeserializeJson(ref reader, options);
          break;

        case "expression":
          current.Expression = new Hl7.Fhir.Model.Expression();
          ((Hl7.Fhir.Model.Expression)current.Expression).DeserializeJson(ref reader, options);
          break;

        // Complex: dynamicValue, Export: DynamicValueComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ActivityDefinitionJsonConverter : JsonConverter<Hl7.Fhir.Model.ActivityDefinition>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ActivityDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ActivityDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ActivityDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
