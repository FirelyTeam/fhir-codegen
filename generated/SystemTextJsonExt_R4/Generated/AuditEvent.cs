// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for AuditEvent
  /// </summary>
  public static class AuditEventSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR AuditEvent into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","AuditEvent");
      // Complex: AuditEvent, Export: AuditEvent, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Subtype != null) && (current.Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();
        foreach (Coding val in current.Subtype)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ActionElement != null)
      {
        if (current.ActionElement.Value != null)
        {
          writer.WriteString("action",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ActionElement.Value));
        }
        if (current.ActionElement.HasExtensions() || (!string.IsNullOrEmpty(current.ActionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_action",false,current.ActionElement.Extension,current.ActionElement.ElementId);
        }
      }

      if (current.Period != null)
      {
        writer.WritePropertyName("period");
        current.Period.SerializeJson(writer, options);
      }

      if (current.RecordedElement != null)
      {
        if (current.RecordedElement.Value != null)
        {
          writer.WriteString("recorded",((DateTimeOffset)current.RecordedElement.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK",System.Globalization.CultureInfo.InvariantCulture));
        }
        if (current.RecordedElement.HasExtensions() || (!string.IsNullOrEmpty(current.RecordedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_recorded",false,current.RecordedElement.Extension,current.RecordedElement.ElementId);
        }
      }

      if (current.OutcomeElement != null)
      {
        if (current.OutcomeElement.Value != null)
        {
          writer.WriteString("outcome",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OutcomeElement.Value));
        }
        if (current.OutcomeElement.HasExtensions() || (!string.IsNullOrEmpty(current.OutcomeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_outcome",false,current.OutcomeElement.Extension,current.OutcomeElement.ElementId);
        }
      }

      if (current.OutcomeDescElement != null)
      {
        if (!string.IsNullOrEmpty(current.OutcomeDescElement.Value))
        {
          writer.WriteString("outcomeDesc",current.OutcomeDescElement.Value);
        }
        if (current.OutcomeDescElement.HasExtensions() || (!string.IsNullOrEmpty(current.OutcomeDescElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_outcomeDesc",false,current.OutcomeDescElement.Extension,current.OutcomeDescElement.ElementId);
        }
      }

      if ((current.PurposeOfEvent != null) && (current.PurposeOfEvent.Count != 0))
      {
        writer.WritePropertyName("purposeOfEvent");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PurposeOfEvent)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Agent != null) && (current.Agent.Count != 0))
      {
        writer.WritePropertyName("agent");
        writer.WriteStartArray();
        foreach (AuditEvent.AgentComponent val in current.Agent)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Source != null)
      {
        writer.WritePropertyName("source");
        current.Source.SerializeJson(writer, options);
      }

      if ((current.Entity != null) && (current.Entity.Count != 0))
      {
        writer.WritePropertyName("entity");
        writer.WriteStartArray();
        foreach (AuditEvent.EntityComponent val in current.Entity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent >>> AuditEvent.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AuditEvent error reading 'subtype' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Subtype = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Subtype = new Hl7.Fhir.Model.Coding();
            v_Subtype.DeserializeJson(ref reader, options);
            current.Subtype.Add(v_Subtype);

            if (!reader.Read())
            {
              throw new JsonException($"AuditEvent error reading 'subtype' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subtype.Count == 0)
          {
            current.Subtype = null;
          }
          break;

        case "action":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ActionElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>();
            reader.Skip();
          }
          else
          {
            current.ActionElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(reader.GetString()));
          }
          break;

        case "_action":
          if (current.ActionElement == null) { current.ActionElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(); }
          ((Hl7.Fhir.Model.Element)current.ActionElement).DeserializeJson(ref reader, options);
          break;

        case "period":
          current.Period = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Period).DeserializeJson(ref reader, options);
          break;

        case "recorded":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RecordedElement = new Instant();
            reader.Skip();
          }
          else
          {
            current.RecordedElement = new Instant(DateTimeOffset.Parse(reader.GetString()));
          }
          break;

        case "_recorded":
          if (current.RecordedElement == null) { current.RecordedElement = new Instant(); }
          ((Hl7.Fhir.Model.Element)current.RecordedElement).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>();
            reader.Skip();
          }
          else
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>(reader.GetString()));
          }
          break;

        case "_outcome":
          if (current.OutcomeElement == null) { current.OutcomeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>(); }
          ((Hl7.Fhir.Model.Element)current.OutcomeElement).DeserializeJson(ref reader, options);
          break;

        case "outcomeDesc":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OutcomeDescElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.OutcomeDescElement = new FhirString(reader.GetString());
          }
          break;

        case "_outcomeDesc":
          if (current.OutcomeDescElement == null) { current.OutcomeDescElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.OutcomeDescElement).DeserializeJson(ref reader, options);
          break;

        case "purposeOfEvent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AuditEvent error reading 'purposeOfEvent' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PurposeOfEvent = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PurposeOfEvent = new Hl7.Fhir.Model.CodeableConcept();
            v_PurposeOfEvent.DeserializeJson(ref reader, options);
            current.PurposeOfEvent.Add(v_PurposeOfEvent);

            if (!reader.Read())
            {
              throw new JsonException($"AuditEvent error reading 'purposeOfEvent' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PurposeOfEvent.Count == 0)
          {
            current.PurposeOfEvent = null;
          }
          break;

        case "agent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AuditEvent error reading 'agent' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Agent = new List<AuditEvent.AgentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.AgentComponent v_Agent = new Hl7.Fhir.Model.AuditEvent.AgentComponent();
            v_Agent.DeserializeJson(ref reader, options);
            current.Agent.Add(v_Agent);

            if (!reader.Read())
            {
              throw new JsonException($"AuditEvent error reading 'agent' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Agent.Count == 0)
          {
            current.Agent = null;
          }
          break;

        case "source":
          current.Source = new Hl7.Fhir.Model.AuditEvent.SourceComponent();
          ((Hl7.Fhir.Model.AuditEvent.SourceComponent)current.Source).DeserializeJson(ref reader, options);
          break;

        case "entity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AuditEvent error reading 'entity' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Entity = new List<AuditEvent.EntityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.EntityComponent v_Entity = new Hl7.Fhir.Model.AuditEvent.EntityComponent();
            v_Entity.DeserializeJson(ref reader, options);
            current.Entity.Add(v_Entity);

            if (!reader.Read())
            {
              throw new JsonException($"AuditEvent error reading 'entity' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Entity.Count == 0)
          {
            current.Entity = null;
          }
          break;

        // Complex: AuditEvent, Export: AuditEvent, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Agent into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent.AgentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Agent, Export: AgentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Role != null) && (current.Role.Count != 0))
      {
        writer.WritePropertyName("role");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Role)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Who != null)
      {
        writer.WritePropertyName("who");
        current.Who.SerializeJson(writer, options);
      }

      if (current.AltIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.AltIdElement.Value))
        {
          writer.WriteString("altId",current.AltIdElement.Value);
        }
        if (current.AltIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.AltIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_altId",false,current.AltIdElement.Extension,current.AltIdElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.RequestorElement != null)
      {
        if (current.RequestorElement.Value != null)
        {
          writer.WriteBoolean("requestor",(bool)current.RequestorElement.Value);
        }
        if (current.RequestorElement.HasExtensions() || (!string.IsNullOrEmpty(current.RequestorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_requestor",false,current.RequestorElement.Extension,current.RequestorElement.ElementId);
        }
      }

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.PolicyElement != null) && (current.PolicyElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirUri val in current.PolicyElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("policy");
          writer.WriteStartArray();
          foreach (FhirUri val in current.PolicyElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_policy");
          writer.WriteStartArray();
          foreach (FhirUri val in current.PolicyElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.Media != null)
      {
        writer.WritePropertyName("media");
        current.Media.SerializeJson(writer, options);
      }

      if (current.Network != null)
      {
        writer.WritePropertyName("network");
        current.Network.SerializeJson(writer, options);
      }

      if ((current.PurposeOfUse != null) && (current.PurposeOfUse.Count != 0))
      {
        writer.WritePropertyName("purposeOfUse");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.PurposeOfUse)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Agent
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent.AgentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent.AgentComponent >>> AuditEvent#Agent.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent.AgentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Agent
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent.AgentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "role":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AgentComponent error reading 'role' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Role = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Role = new Hl7.Fhir.Model.CodeableConcept();
            v_Role.DeserializeJson(ref reader, options);
            current.Role.Add(v_Role);

            if (!reader.Read())
            {
              throw new JsonException($"AgentComponent error reading 'role' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Role.Count == 0)
          {
            current.Role = null;
          }
          break;

        case "who":
          current.Who = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Who).DeserializeJson(ref reader, options);
          break;

        case "altId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AltIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.AltIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_altId":
          if (current.AltIdElement == null) { current.AltIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.AltIdElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "requestor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequestorElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.RequestorElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_requestor":
          if (current.RequestorElement == null) { current.RequestorElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.RequestorElement).DeserializeJson(ref reader, options);
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AgentComponent error reading 'policy' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PolicyElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PolicyElement.Add(new FhirUri());
              reader.Skip();
            }
            else
            {
              current.PolicyElement.Add(new FhirUri(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AgentComponent error reading 'policy' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PolicyElement.Count == 0)
          {
            current.PolicyElement = null;
          }
          break;

        case "_policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AgentComponent error reading 'policy' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_policy = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_policy >= current.PolicyElement.Count)
            {
              current.PolicyElement.Add(new FhirUri());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PolicyElement[i_policy++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AgentComponent error reading 'policy' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "media":
          current.Media = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Media).DeserializeJson(ref reader, options);
          break;

        case "network":
          current.Network = new Hl7.Fhir.Model.AuditEvent.NetworkComponent();
          ((Hl7.Fhir.Model.AuditEvent.NetworkComponent)current.Network).DeserializeJson(ref reader, options);
          break;

        case "purposeOfUse":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AgentComponent error reading 'purposeOfUse' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PurposeOfUse = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PurposeOfUse = new Hl7.Fhir.Model.CodeableConcept();
            v_PurposeOfUse.DeserializeJson(ref reader, options);
            current.PurposeOfUse.Add(v_PurposeOfUse);

            if (!reader.Read())
            {
              throw new JsonException($"AgentComponent error reading 'purposeOfUse' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PurposeOfUse.Count == 0)
          {
            current.PurposeOfUse = null;
          }
          break;

        // Complex: agent, Export: AgentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Network into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent.NetworkComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Network, Export: NetworkComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.AddressElement != null)
      {
        if (!string.IsNullOrEmpty(current.AddressElement.Value))
        {
          writer.WriteString("address",current.AddressElement.Value);
        }
        if (current.AddressElement.HasExtensions() || (!string.IsNullOrEmpty(current.AddressElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_address",false,current.AddressElement.Extension,current.AddressElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Network
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent.NetworkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent.NetworkComponent >>> AuditEvent#Network.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent.NetworkComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Network
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent.NetworkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AddressElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.AddressElement = new FhirString(reader.GetString());
          }
          break;

        case "_address":
          if (current.AddressElement == null) { current.AddressElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.AddressElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        // Complex: network, Export: NetworkComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Source into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent.SourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Source, Export: SourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SiteElement != null)
      {
        if (!string.IsNullOrEmpty(current.SiteElement.Value))
        {
          writer.WriteString("site",current.SiteElement.Value);
        }
        if (current.SiteElement.HasExtensions() || (!string.IsNullOrEmpty(current.SiteElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_site",false,current.SiteElement.Extension,current.SiteElement.ElementId);
        }
      }

      if (current.Observer != null)
      {
        writer.WritePropertyName("observer");
        current.Observer.SerializeJson(writer, options);
      }

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (Coding val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Source
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent.SourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent.SourceComponent >>> AuditEvent#Source.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent.SourceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Source
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent.SourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "site":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SiteElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SiteElement = new FhirString(reader.GetString());
          }
          break;

        case "_site":
          if (current.SiteElement == null) { current.SiteElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SiteElement).DeserializeJson(ref reader, options);
          break;

        case "observer":
          current.Observer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Observer).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SourceComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Type = new Hl7.Fhir.Model.Coding();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"SourceComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        // Complex: source, Export: SourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Entity into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent.EntityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Entity, Export: EntityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.What != null)
      {
        writer.WritePropertyName("what");
        current.What.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Lifecycle != null)
      {
        writer.WritePropertyName("lifecycle");
        current.Lifecycle.SerializeJson(writer, options);
      }

      if ((current.SecurityLabel != null) && (current.SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();
        foreach (Coding val in current.SecurityLabel)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.QueryElement != null)
      {
        if (current.QueryElement.Value != null)
        {
          writer.WriteString("query",System.Convert.ToBase64String(current.QueryElement.Value));
        }
        if (current.QueryElement.HasExtensions() || (!string.IsNullOrEmpty(current.QueryElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_query",false,current.QueryElement.Extension,current.QueryElement.ElementId);
        }
      }

      if ((current.Detail != null) && (current.Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();
        foreach (AuditEvent.DetailComponent val in current.Detail)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Entity
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent.EntityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent.EntityComponent >>> AuditEvent#Entity.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent.EntityComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Entity
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent.EntityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "what":
          current.What = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.What).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Role).DeserializeJson(ref reader, options);
          break;

        case "lifecycle":
          current.Lifecycle = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Lifecycle).DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"EntityComponent error reading 'securityLabel' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_SecurityLabel = new Hl7.Fhir.Model.Coding();
            v_SecurityLabel.DeserializeJson(ref reader, options);
            current.SecurityLabel.Add(v_SecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException($"EntityComponent error reading 'securityLabel' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabel.Count == 0)
          {
            current.SecurityLabel = null;
          }
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "query":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.QueryElement = new Base64Binary();
            reader.Skip();
          }
          else
          {
            current.QueryElement = new Base64Binary(System.Convert.FromBase64String(reader.GetString()));
          }
          break;

        case "_query":
          if (current.QueryElement == null) { current.QueryElement = new Base64Binary(); }
          ((Hl7.Fhir.Model.Element)current.QueryElement).DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"EntityComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<AuditEvent.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.AuditEvent.DetailComponent v_Detail = new Hl7.Fhir.Model.AuditEvent.DetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"EntityComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: entity, Export: EntityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR AuditEvent#Detail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.AuditEvent.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: AuditEvent#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.TypeElement != null)
      {
        if (!string.IsNullOrEmpty(current.TypeElement.Value))
        {
          writer.WriteString("type",current.TypeElement.Value);
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Base64Binary v_Base64Binary:
            if (v_Base64Binary != null)
            {
              if (v_Base64Binary.Value != null)
              {
                writer.WriteString("valueBase64Binary",System.Convert.ToBase64String(v_Base64Binary.Value));
              }
              if (v_Base64Binary.HasExtensions() || (!string.IsNullOrEmpty(v_Base64Binary.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueBase64Binary",false,v_Base64Binary.Extension,v_Base64Binary.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Detail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.AuditEvent.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"AuditEvent.DetailComponent >>> AuditEvent#Detail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"AuditEvent.DetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR AuditEvent#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.AuditEvent.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new FhirString(reader.GetString());
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Base64Binary();
            reader.Skip();
          }
          else
          {
            current.Value = new Base64Binary(System.Convert.FromBase64String(reader.GetString()));
          }
          break;

        case "_valueBase64Binary":
          if (current.Value == null) { current.Value = new Base64Binary(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class AuditEventJsonConverter : JsonConverter<Hl7.Fhir.Model.AuditEvent>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.AuditEvent value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.AuditEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.AuditEvent();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
