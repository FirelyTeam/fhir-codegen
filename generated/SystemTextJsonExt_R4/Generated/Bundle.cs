// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for Bundle
  /// </summary>
  public static class BundleSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR Bundle into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Bundle");
      // Complex: Bundle, Export: Bundle, Base: Resource (Resource)
      ((Hl7.Fhir.Model.Resource)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (current.TimestampElement != null)
      {
        if (current.TimestampElement.Value != null)
        {
          writer.WriteString("timestamp",((DateTimeOffset)current.TimestampElement.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK",System.Globalization.CultureInfo.InvariantCulture));
        }
        if (current.TimestampElement.HasExtensions() || (!string.IsNullOrEmpty(current.TimestampElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_timestamp",false,current.TimestampElement.Extension,current.TimestampElement.ElementId);
        }
      }

      if (current.TotalElement != null)
      {
        if (current.TotalElement.Value != null)
        {
          writer.WriteNumber("total",(int)current.TotalElement.Value);
        }
        if (current.TotalElement.HasExtensions() || (!string.IsNullOrEmpty(current.TotalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_total",false,current.TotalElement.Extension,current.TotalElement.ElementId);
        }
      }

      if ((current.Link != null) && (current.Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();
        foreach (Bundle.LinkComponent val in current.Link)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Entry != null) && (current.Entry.Count != 0))
      {
        writer.WritePropertyName("entry");
        writer.WriteStartArray();
        foreach (Bundle.EntryComponent val in current.Entry)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Signature != null)
      {
        writer.WritePropertyName("signature");
        current.Signature.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle >>> Bundle.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.Bundle.BundleType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.Bundle.BundleType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Bundle.BundleType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.Bundle.BundleType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "timestamp":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TimestampElement = new Instant();
            reader.Skip();
          }
          else
          {
            current.TimestampElement = new Instant(DateTimeOffset.Parse(reader.GetString()));
          }
          break;

        case "_timestamp":
          if (current.TimestampElement == null) { current.TimestampElement = new Instant(); }
          ((Hl7.Fhir.Model.Element)current.TimestampElement).DeserializeJson(ref reader, options);
          break;

        case "total":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TotalElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.TotalElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_total":
          if (current.TotalElement == null) { current.TotalElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.TotalElement).DeserializeJson(ref reader, options);
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Bundle error reading 'link' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Link = new List<Bundle.LinkComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Bundle.LinkComponent v_Link = new Hl7.Fhir.Model.Bundle.LinkComponent();
            v_Link.DeserializeJson(ref reader, options);
            current.Link.Add(v_Link);

            if (!reader.Read())
            {
              throw new JsonException($"Bundle error reading 'link' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Link.Count == 0)
          {
            current.Link = null;
          }
          break;

        case "entry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Bundle error reading 'entry' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Entry = new List<Bundle.EntryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Bundle.EntryComponent v_Entry = new Hl7.Fhir.Model.Bundle.EntryComponent();
            v_Entry.DeserializeJson(ref reader, options);
            current.Entry.Add(v_Entry);

            if (!reader.Read())
            {
              throw new JsonException($"Bundle error reading 'entry' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Entry.Count == 0)
          {
            current.Entry = null;
          }
          break;

        case "signature":
          current.Signature = new Hl7.Fhir.Model.Signature();
          ((Hl7.Fhir.Model.Signature)current.Signature).DeserializeJson(ref reader, options);
          break;

        // Complex: Bundle, Export: Bundle, Base: Resource
        default:
          ((Hl7.Fhir.Model.Resource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Bundle#Link into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle.LinkComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Bundle#Link, Export: LinkComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.RelationElement != null)
      {
        if (!string.IsNullOrEmpty(current.RelationElement.Value))
        {
          writer.WriteString("relation",current.RelationElement.Value);
        }
        if (current.RelationElement.HasExtensions() || (!string.IsNullOrEmpty(current.RelationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_relation",false,current.RelationElement.Extension,current.RelationElement.ElementId);
        }
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Link
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle.LinkComponent >>> Bundle#Link.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle.LinkComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Link
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "relation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RelationElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RelationElement = new FhirString(reader.GetString());
          }
          break;

        case "_relation":
          if (current.RelationElement == null) { current.RelationElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RelationElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: link, Export: LinkComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Bundle#Entry into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle.EntryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Bundle#Entry, Export: EntryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Link != null) && (current.Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();
        foreach (Bundle.LinkComponent val in current.Link)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.FullUrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.FullUrlElement.Value))
        {
          writer.WriteString("fullUrl",current.FullUrlElement.Value);
        }
        if (current.FullUrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.FullUrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_fullUrl",false,current.FullUrlElement.Extension,current.FullUrlElement.ElementId);
        }
      }

      if (current.Resource != null)
      {
        writer.WritePropertyName("resource");
        JsonSerializer.Serialize<object>(writer, (Hl7.Fhir.Model.Resource)current.Resource, options);
      }

      if (current.Search != null)
      {
        writer.WritePropertyName("search");
        current.Search.SerializeJson(writer, options);
      }

      if (current.Request != null)
      {
        writer.WritePropertyName("request");
        current.Request.SerializeJson(writer, options);
      }

      if (current.Response != null)
      {
        writer.WritePropertyName("response");
        current.Response.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Entry
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle.EntryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle.EntryComponent >>> Bundle#Entry.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle.EntryComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Entry
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle.EntryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"EntryComponent error reading 'link' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Link = new List<Bundle.LinkComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Bundle.LinkComponent v_Link = new Hl7.Fhir.Model.Bundle.LinkComponent();
            v_Link.DeserializeJson(ref reader, options);
            current.Link.Add(v_Link);

            if (!reader.Read())
            {
              throw new JsonException($"EntryComponent error reading 'link' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Link.Count == 0)
          {
            current.Link = null;
          }
          break;

        case "fullUrl":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FullUrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.FullUrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_fullUrl":
          if (current.FullUrlElement == null) { current.FullUrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.FullUrlElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          current.Resource = JsonStreamResourceConverter.PolymorphicRead(ref reader, options);
          break;

        case "search":
          current.Search = new Hl7.Fhir.Model.Bundle.SearchComponent();
          ((Hl7.Fhir.Model.Bundle.SearchComponent)current.Search).DeserializeJson(ref reader, options);
          break;

        case "request":
          current.Request = new Hl7.Fhir.Model.Bundle.RequestComponent();
          ((Hl7.Fhir.Model.Bundle.RequestComponent)current.Request).DeserializeJson(ref reader, options);
          break;

        case "response":
          current.Response = new Hl7.Fhir.Model.Bundle.ResponseComponent();
          ((Hl7.Fhir.Model.Bundle.ResponseComponent)current.Response).DeserializeJson(ref reader, options);
          break;

        // Complex: entry, Export: EntryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Bundle#Search into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle.SearchComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Bundle#Search, Export: SearchComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ModeElement != null)
      {
        if (current.ModeElement.Value != null)
        {
          writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));
        }
        if (current.ModeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_mode",false,current.ModeElement.Extension,current.ModeElement.ElementId);
        }
      }

      if (current.ScoreElement != null)
      {
        if (current.ScoreElement.Value != null)
        {
          writer.WriteNumber("score",(decimal)current.ScoreElement.Value);
        }
        if (current.ScoreElement.HasExtensions() || (!string.IsNullOrEmpty(current.ScoreElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_score",false,current.ScoreElement.Extension,current.ScoreElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Search
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle.SearchComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle.SearchComponent >>> Bundle#Search.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle.SearchComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Search
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle.SearchComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>();
            reader.Skip();
          }
          else
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Bundle.SearchEntryMode>(reader.GetString()));
          }
          break;

        case "_mode":
          if (current.ModeElement == null) { current.ModeElement = new Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>(); }
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "score":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ScoreElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.ScoreElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_score":
          if (current.ScoreElement == null) { current.ScoreElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.ScoreElement).DeserializeJson(ref reader, options);
          break;

        // Complex: search, Export: SearchComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Bundle#Request into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle.RequestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Bundle#Request, Export: RequestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.MethodElement != null)
      {
        if (current.MethodElement.Value != null)
        {
          writer.WriteString("method",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.MethodElement.Value));
        }
        if (current.MethodElement.HasExtensions() || (!string.IsNullOrEmpty(current.MethodElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_method",false,current.MethodElement.Extension,current.MethodElement.ElementId);
        }
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.IfNoneMatchElement != null)
      {
        if (!string.IsNullOrEmpty(current.IfNoneMatchElement.Value))
        {
          writer.WriteString("ifNoneMatch",current.IfNoneMatchElement.Value);
        }
        if (current.IfNoneMatchElement.HasExtensions() || (!string.IsNullOrEmpty(current.IfNoneMatchElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_ifNoneMatch",false,current.IfNoneMatchElement.Extension,current.IfNoneMatchElement.ElementId);
        }
      }

      if (current.IfModifiedSinceElement != null)
      {
        if (current.IfModifiedSinceElement.Value != null)
        {
          writer.WriteString("ifModifiedSince",((DateTimeOffset)current.IfModifiedSinceElement.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK",System.Globalization.CultureInfo.InvariantCulture));
        }
        if (current.IfModifiedSinceElement.HasExtensions() || (!string.IsNullOrEmpty(current.IfModifiedSinceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_ifModifiedSince",false,current.IfModifiedSinceElement.Extension,current.IfModifiedSinceElement.ElementId);
        }
      }

      if (current.IfMatchElement != null)
      {
        if (!string.IsNullOrEmpty(current.IfMatchElement.Value))
        {
          writer.WriteString("ifMatch",current.IfMatchElement.Value);
        }
        if (current.IfMatchElement.HasExtensions() || (!string.IsNullOrEmpty(current.IfMatchElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_ifMatch",false,current.IfMatchElement.Extension,current.IfMatchElement.ElementId);
        }
      }

      if (current.IfNoneExistElement != null)
      {
        if (!string.IsNullOrEmpty(current.IfNoneExistElement.Value))
        {
          writer.WriteString("ifNoneExist",current.IfNoneExistElement.Value);
        }
        if (current.IfNoneExistElement.HasExtensions() || (!string.IsNullOrEmpty(current.IfNoneExistElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_ifNoneExist",false,current.IfNoneExistElement.Extension,current.IfNoneExistElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Request
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle.RequestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle.RequestComponent >>> Bundle#Request.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle.RequestComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Request
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle.RequestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "method":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MethodElement = new Code<Hl7.Fhir.Model.Bundle.HTTPVerb>();
            reader.Skip();
          }
          else
          {
            current.MethodElement = new Code<Hl7.Fhir.Model.Bundle.HTTPVerb>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Bundle.HTTPVerb>(reader.GetString()));
          }
          break;

        case "_method":
          if (current.MethodElement == null) { current.MethodElement = new Code<Hl7.Fhir.Model.Bundle.HTTPVerb>(); }
          ((Hl7.Fhir.Model.Element)current.MethodElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "ifNoneMatch":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IfNoneMatchElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.IfNoneMatchElement = new FhirString(reader.GetString());
          }
          break;

        case "_ifNoneMatch":
          if (current.IfNoneMatchElement == null) { current.IfNoneMatchElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.IfNoneMatchElement).DeserializeJson(ref reader, options);
          break;

        case "ifModifiedSince":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IfModifiedSinceElement = new Instant();
            reader.Skip();
          }
          else
          {
            current.IfModifiedSinceElement = new Instant(DateTimeOffset.Parse(reader.GetString()));
          }
          break;

        case "_ifModifiedSince":
          if (current.IfModifiedSinceElement == null) { current.IfModifiedSinceElement = new Instant(); }
          ((Hl7.Fhir.Model.Element)current.IfModifiedSinceElement).DeserializeJson(ref reader, options);
          break;

        case "ifMatch":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IfMatchElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.IfMatchElement = new FhirString(reader.GetString());
          }
          break;

        case "_ifMatch":
          if (current.IfMatchElement == null) { current.IfMatchElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.IfMatchElement).DeserializeJson(ref reader, options);
          break;

        case "ifNoneExist":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IfNoneExistElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.IfNoneExistElement = new FhirString(reader.GetString());
          }
          break;

        case "_ifNoneExist":
          if (current.IfNoneExistElement == null) { current.IfNoneExistElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.IfNoneExistElement).DeserializeJson(ref reader, options);
          break;

        // Complex: request, Export: RequestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Bundle#Response into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Bundle.ResponseComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Bundle#Response, Export: ResponseComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.StatusElement != null)
      {
        if (!string.IsNullOrEmpty(current.StatusElement.Value))
        {
          writer.WriteString("status",current.StatusElement.Value);
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.LocationElement != null)
      {
        if (!string.IsNullOrEmpty(current.LocationElement.Value))
        {
          writer.WriteString("location",current.LocationElement.Value);
        }
        if (current.LocationElement.HasExtensions() || (!string.IsNullOrEmpty(current.LocationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_location",false,current.LocationElement.Extension,current.LocationElement.ElementId);
        }
      }

      if (current.EtagElement != null)
      {
        if (!string.IsNullOrEmpty(current.EtagElement.Value))
        {
          writer.WriteString("etag",current.EtagElement.Value);
        }
        if (current.EtagElement.HasExtensions() || (!string.IsNullOrEmpty(current.EtagElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_etag",false,current.EtagElement.Extension,current.EtagElement.ElementId);
        }
      }

      if (current.LastModifiedElement != null)
      {
        if (current.LastModifiedElement.Value != null)
        {
          writer.WriteString("lastModified",((DateTimeOffset)current.LastModifiedElement.Value).ToString("yyyy-MM-dd'T'HH:mm:ss.FFFFFFFK",System.Globalization.CultureInfo.InvariantCulture));
        }
        if (current.LastModifiedElement.HasExtensions() || (!string.IsNullOrEmpty(current.LastModifiedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lastModified",false,current.LastModifiedElement.Extension,current.LastModifiedElement.ElementId);
        }
      }

      if (current.Outcome != null)
      {
        writer.WritePropertyName("outcome");
        JsonSerializer.Serialize<object>(writer, (Hl7.Fhir.Model.Resource)current.Outcome, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Response
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Bundle.ResponseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Bundle.ResponseComponent >>> Bundle#Response.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Bundle.ResponseComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Bundle#Response
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Bundle.ResponseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new FhirString(reader.GetString());
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "location":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LocationElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.LocationElement = new FhirUri(reader.GetString());
          }
          break;

        case "_location":
          if (current.LocationElement == null) { current.LocationElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.LocationElement).DeserializeJson(ref reader, options);
          break;

        case "etag":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EtagElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.EtagElement = new FhirString(reader.GetString());
          }
          break;

        case "_etag":
          if (current.EtagElement == null) { current.EtagElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.EtagElement).DeserializeJson(ref reader, options);
          break;

        case "lastModified":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LastModifiedElement = new Instant();
            reader.Skip();
          }
          else
          {
            current.LastModifiedElement = new Instant(DateTimeOffset.Parse(reader.GetString()));
          }
          break;

        case "_lastModified":
          if (current.LastModifiedElement == null) { current.LastModifiedElement = new Instant(); }
          ((Hl7.Fhir.Model.Element)current.LastModifiedElement).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          current.Outcome = JsonStreamResourceConverter.PolymorphicRead(ref reader, options);
          break;

        // Complex: response, Export: ResponseComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class BundleJsonConverter : JsonConverter<Hl7.Fhir.Model.Bundle>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.Bundle value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.Bundle Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.Bundle();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
