// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for CapabilityStatement
  /// </summary>
  public static class CapabilityStatementSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR CapabilityStatement into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","CapabilityStatement");
      // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.KindElement != null)
      {
        if (current.KindElement.Value != null)
        {
          writer.WriteString("kind",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.KindElement.Value));
        }
        if (current.KindElement.HasExtensions() || (!string.IsNullOrEmpty(current.KindElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_kind",false,current.KindElement.Extension,current.KindElement.ElementId);
        }
      }

      if ((current.InstantiatesElement != null) && (current.InstantiatesElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.InstantiatesElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("instantiates");
          writer.WriteStartArray();
          foreach (Canonical val in current.InstantiatesElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_instantiates");
          writer.WriteStartArray();
          foreach (Canonical val in current.InstantiatesElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.ImportsElement != null) && (current.ImportsElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.ImportsElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("imports");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImportsElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_imports");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImportsElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.Software != null)
      {
        writer.WritePropertyName("software");
        current.Software.SerializeJson(writer, options);
      }

      if (current.Implementation != null)
      {
        writer.WritePropertyName("implementation");
        current.Implementation.SerializeJson(writer, options);
      }

      if (current.FhirVersionElement != null)
      {
        if (current.FhirVersionElement.Value != null)
        {
          writer.WriteString("fhirVersion",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.FhirVersionElement.Value));
        }
        if (current.FhirVersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.FhirVersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_fhirVersion",false,current.FhirVersionElement.Extension,current.FhirVersionElement.ElementId);
        }
      }

      if ((current.FormatElement != null) && (current.FormatElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code val in current.FormatElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("format");
          writer.WriteStartArray();
          foreach (Code val in current.FormatElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value.Trim());
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_format");
          writer.WriteStartArray();
          foreach (Code val in current.FormatElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.PatchFormatElement != null) && (current.PatchFormatElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code val in current.PatchFormatElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("patchFormat");
          writer.WriteStartArray();
          foreach (Code val in current.PatchFormatElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value.Trim());
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_patchFormat");
          writer.WriteStartArray();
          foreach (Code val in current.PatchFormatElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.ImplementationGuideElement != null) && (current.ImplementationGuideElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.ImplementationGuideElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("implementationGuide");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImplementationGuideElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_implementationGuide");
          writer.WriteStartArray();
          foreach (Canonical val in current.ImplementationGuideElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.Rest != null) && (current.Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();
        foreach (CapabilityStatement.RestComponent val in current.Rest)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Messaging != null) && (current.Messaging.Count != 0))
      {
        writer.WritePropertyName("messaging");
        writer.WriteStartArray();
        foreach (CapabilityStatement.MessagingComponent val in current.Messaging)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Document != null) && (current.Document.Count != 0))
      {
        writer.WritePropertyName("document");
        writer.WriteStartArray();
        foreach (CapabilityStatement.DocumentComponent val in current.Document)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement >>> CapabilityStatement.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "kind":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>();
            reader.Skip();
          }
          else
          {
            current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatementKind>(reader.GetString()));
          }
          break;

        case "_kind":
          if (current.KindElement == null) { current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>(); }
          ((Hl7.Fhir.Model.Element)current.KindElement).DeserializeJson(ref reader, options);
          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'instantiates' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.InstantiatesElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.InstantiatesElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.InstantiatesElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'instantiates' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InstantiatesElement.Count == 0)
          {
            current.InstantiatesElement = null;
          }
          break;

        case "_instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'instantiates' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_instantiates = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_instantiates >= current.InstantiatesElement.Count)
            {
              current.InstantiatesElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.InstantiatesElement[i_instantiates++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'instantiates' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'imports' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ImportsElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ImportsElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.ImportsElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'imports' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ImportsElement.Count == 0)
          {
            current.ImportsElement = null;
          }
          break;

        case "_imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'imports' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_imports = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_imports >= current.ImportsElement.Count)
            {
              current.ImportsElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ImportsElement[i_imports++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'imports' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "software":
          current.Software = new Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent)current.Software).DeserializeJson(ref reader, options);
          break;

        case "implementation":
          current.Implementation = new Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent)current.Implementation).DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FhirVersionElement = new Code<Hl7.Fhir.Model.FHIRVersion>();
            reader.Skip();
          }
          else
          {
            current.FhirVersionElement = new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString()));
          }
          break;

        case "_fhirVersion":
          if (current.FhirVersionElement == null) { current.FhirVersionElement = new Code<Hl7.Fhir.Model.FHIRVersion>(); }
          ((Hl7.Fhir.Model.Element)current.FhirVersionElement).DeserializeJson(ref reader, options);
          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'format' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.FormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.FormatElement.Add(new Code());
              reader.Skip();
            }
            else
            {
              current.FormatElement.Add(new Code(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'format' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FormatElement.Count == 0)
          {
            current.FormatElement = null;
          }
          break;

        case "_format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'format' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_format = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_format >= current.FormatElement.Count)
            {
              current.FormatElement.Add(new Code());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.FormatElement[i_format++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'format' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'patchFormat' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PatchFormatElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PatchFormatElement.Add(new Code());
              reader.Skip();
            }
            else
            {
              current.PatchFormatElement.Add(new Code(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'patchFormat' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PatchFormatElement.Count == 0)
          {
            current.PatchFormatElement = null;
          }
          break;

        case "_patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'patchFormat' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_patchFormat = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_patchFormat >= current.PatchFormatElement.Count)
            {
              current.PatchFormatElement.Add(new Code());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PatchFormatElement[i_patchFormat++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'patchFormat' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'implementationGuide' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ImplementationGuideElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ImplementationGuideElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.ImplementationGuideElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'implementationGuide' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ImplementationGuideElement.Count == 0)
          {
            current.ImplementationGuideElement = null;
          }
          break;

        case "_implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'implementationGuide' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_implementationGuide = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_implementationGuide >= current.ImplementationGuideElement.Count)
            {
              current.ImplementationGuideElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ImplementationGuideElement[i_implementationGuide++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'implementationGuide' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'rest' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Rest = new List<CapabilityStatement.RestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.RestComponent v_Rest = new Hl7.Fhir.Model.CapabilityStatement.RestComponent();
            v_Rest.DeserializeJson(ref reader, options);
            current.Rest.Add(v_Rest);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'rest' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rest.Count == 0)
          {
            current.Rest = null;
          }
          break;

        case "messaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'messaging' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Messaging = new List<CapabilityStatement.MessagingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.MessagingComponent v_Messaging = new Hl7.Fhir.Model.CapabilityStatement.MessagingComponent();
            v_Messaging.DeserializeJson(ref reader, options);
            current.Messaging.Add(v_Messaging);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'messaging' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Messaging.Count == 0)
          {
            current.Messaging = null;
          }
          break;

        case "document":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityStatement error reading 'document' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Document = new List<CapabilityStatement.DocumentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.DocumentComponent v_Document = new Hl7.Fhir.Model.CapabilityStatement.DocumentComponent();
            v_Document.DeserializeJson(ref reader, options);
            current.Document.Add(v_Document);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityStatement error reading 'document' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Document.Count == 0)
          {
            current.Document = null;
          }
          break;

        // Complex: CapabilityStatement, Export: CapabilityStatement, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Software into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Software, Export: SoftwareComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.ReleaseDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ReleaseDateElement.Value))
        {
          writer.WriteString("releaseDate",current.ReleaseDateElement.Value);
        }
        if (current.ReleaseDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReleaseDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_releaseDate",false,current.ReleaseDateElement.Extension,current.ReleaseDateElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.SoftwareComponent >>> CapabilityStatement#Software.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.SoftwareComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Software
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "releaseDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReleaseDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.ReleaseDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_releaseDate":
          if (current.ReleaseDateElement == null) { current.ReleaseDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.ReleaseDateElement).DeserializeJson(ref reader, options);
          break;

        // Complex: software, Export: SoftwareComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Implementation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Implementation, Export: ImplementationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.Custodian != null)
      {
        writer.WritePropertyName("custodian");
        current.Custodian.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.ImplementationComponent >>> CapabilityStatement#Implementation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.ImplementationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Implementation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUrl(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "custodian":
          current.Custodian = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Custodian).DeserializeJson(ref reader, options);
          break;

        // Complex: implementation, Export: ImplementationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Rest into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.RestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Rest, Export: RestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ModeElement != null)
      {
        if (current.ModeElement.Value != null)
        {
          writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));
        }
        if (current.ModeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_mode",false,current.ModeElement.Extension,current.ModeElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (current.Security != null)
      {
        writer.WritePropertyName("security");
        current.Security.SerializeJson(writer, options);
      }

      if ((current.Resource != null) && (current.Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceComponent val in current.Resource)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SystemInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CompartmentElement != null) && (current.CompartmentElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.CompartmentElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("compartment");
          writer.WriteStartArray();
          foreach (Canonical val in current.CompartmentElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_compartment");
          writer.WriteStartArray();
          foreach (Canonical val in current.CompartmentElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.RestComponent >>> CapabilityStatement#Rest.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.RestComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Rest
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.RestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>();
            reader.Skip();
          }
          else
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(reader.GetString()));
          }
          break;

        case "_mode":
          if (current.ModeElement == null) { current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(); }
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        case "security":
          current.Security = new Hl7.Fhir.Model.CapabilityStatement.SecurityComponent();
          ((Hl7.Fhir.Model.CapabilityStatement.SecurityComponent)current.Security).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'resource' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Resource = new List<CapabilityStatement.ResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.ResourceComponent v_Resource = new Hl7.Fhir.Model.CapabilityStatement.ResourceComponent();
            v_Resource.DeserializeJson(ref reader, options);
            current.Resource.Add(v_Resource);

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'resource' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'interaction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Interaction = new List<CapabilityStatement.SystemInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent v_Interaction = new Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent();
            v_Interaction.DeserializeJson(ref reader, options);
            current.Interaction.Add(v_Interaction);

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'interaction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }
          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'searchParam' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent v_SearchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
            v_SearchParam.DeserializeJson(ref reader, options);
            current.SearchParam.Add(v_SearchParam);

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'searchParam' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'operation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.OperationComponent v_Operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
            v_Operation.DeserializeJson(ref reader, options);
            current.Operation.Add(v_Operation);

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'operation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }
          break;

        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'compartment' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CompartmentElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.CompartmentElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.CompartmentElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'compartment' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CompartmentElement.Count == 0)
          {
            current.CompartmentElement = null;
          }
          break;

        case "_compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RestComponent error reading 'compartment' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_compartment = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_compartment >= current.CompartmentElement.Count)
            {
              current.CompartmentElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.CompartmentElement[i_compartment++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RestComponent error reading 'compartment' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: rest, Export: RestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Security into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.SecurityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Security, Export: SecurityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CorsElement != null)
      {
        if (current.CorsElement.Value != null)
        {
          writer.WriteBoolean("cors",(bool)current.CorsElement.Value);
        }
        if (current.CorsElement.HasExtensions() || (!string.IsNullOrEmpty(current.CorsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_cors",false,current.CorsElement.Extension,current.CorsElement.ElementId);
        }
      }

      if ((current.Service != null) && (current.Service.Count != 0))
      {
        writer.WritePropertyName("service");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Service)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.SecurityComponent >>> CapabilityStatement#Security.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.SecurityComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Security
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.SecurityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cors":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CorsElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.CorsElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_cors":
          if (current.CorsElement == null) { current.CorsElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.CorsElement).DeserializeJson(ref reader, options);
          break;

        case "service":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SecurityComponent error reading 'service' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Service = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Service = new Hl7.Fhir.Model.CodeableConcept();
            v_Service.DeserializeJson(ref reader, options);
            current.Service.Add(v_Service);

            if (!reader.Read())
            {
              throw new JsonException($"SecurityComponent error reading 'service' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Service.Count == 0)
          {
            current.Service = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        // Complex: security, Export: SecurityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Resource into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.ResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Resource, Export: ResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (current.ProfileElement != null)
      {
        if (!string.IsNullOrEmpty(current.ProfileElement.Value))
        {
          writer.WriteString("profile",current.ProfileElement.Value);
        }
        if (current.ProfileElement.HasExtensions() || (!string.IsNullOrEmpty(current.ProfileElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_profile",false,current.ProfileElement.Extension,current.ProfileElement.ElementId);
        }
      }

      if ((current.SupportedProfileElement != null) && (current.SupportedProfileElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.SupportedProfileElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("supportedProfile");
          writer.WriteStartArray();
          foreach (Canonical val in current.SupportedProfileElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_supportedProfile");
          writer.WriteStartArray();
          foreach (Canonical val in current.SupportedProfileElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if ((current.Interaction != null) && (current.Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();
        foreach (CapabilityStatement.ResourceInteractionComponent val in current.Interaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersioningElement != null)
      {
        if (current.VersioningElement.Value != null)
        {
          writer.WriteString("versioning",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.VersioningElement.Value));
        }
        if (current.VersioningElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersioningElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_versioning",false,current.VersioningElement.Extension,current.VersioningElement.ElementId);
        }
      }

      if (current.ReadHistoryElement != null)
      {
        if (current.ReadHistoryElement.Value != null)
        {
          writer.WriteBoolean("readHistory",(bool)current.ReadHistoryElement.Value);
        }
        if (current.ReadHistoryElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReadHistoryElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_readHistory",false,current.ReadHistoryElement.Extension,current.ReadHistoryElement.ElementId);
        }
      }

      if (current.UpdateCreateElement != null)
      {
        if (current.UpdateCreateElement.Value != null)
        {
          writer.WriteBoolean("updateCreate",(bool)current.UpdateCreateElement.Value);
        }
        if (current.UpdateCreateElement.HasExtensions() || (!string.IsNullOrEmpty(current.UpdateCreateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_updateCreate",false,current.UpdateCreateElement.Extension,current.UpdateCreateElement.ElementId);
        }
      }

      if (current.ConditionalCreateElement != null)
      {
        if (current.ConditionalCreateElement.Value != null)
        {
          writer.WriteBoolean("conditionalCreate",(bool)current.ConditionalCreateElement.Value);
        }
        if (current.ConditionalCreateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalCreateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalCreate",false,current.ConditionalCreateElement.Extension,current.ConditionalCreateElement.ElementId);
        }
      }

      if (current.ConditionalReadElement != null)
      {
        if (current.ConditionalReadElement.Value != null)
        {
          writer.WriteString("conditionalRead",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalReadElement.Value));
        }
        if (current.ConditionalReadElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalReadElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalRead",false,current.ConditionalReadElement.Extension,current.ConditionalReadElement.ElementId);
        }
      }

      if (current.ConditionalUpdateElement != null)
      {
        if (current.ConditionalUpdateElement.Value != null)
        {
          writer.WriteBoolean("conditionalUpdate",(bool)current.ConditionalUpdateElement.Value);
        }
        if (current.ConditionalUpdateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalUpdateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalUpdate",false,current.ConditionalUpdateElement.Extension,current.ConditionalUpdateElement.ElementId);
        }
      }

      if (current.ConditionalDeleteElement != null)
      {
        if (current.ConditionalDeleteElement.Value != null)
        {
          writer.WriteString("conditionalDelete",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ConditionalDeleteElement.Value));
        }
        if (current.ConditionalDeleteElement.HasExtensions() || (!string.IsNullOrEmpty(current.ConditionalDeleteElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_conditionalDelete",false,current.ConditionalDeleteElement.Extension,current.ConditionalDeleteElement.ElementId);
        }
      }

      if ((current.ReferencePolicyElement != null) && (current.ReferencePolicyElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy> val in current.ReferencePolicyElement)
        {
          if (val.Value != null) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("referencePolicy");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy> val in current.ReferencePolicyElement)
          {
            if (val.Value == null)
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_referencePolicy");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy> val in current.ReferencePolicyElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.SearchIncludeElement != null) && (current.SearchIncludeElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.SearchIncludeElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("searchInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchIncludeElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_searchInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchIncludeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.SearchRevIncludeElement != null) && (current.SearchRevIncludeElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.SearchRevIncludeElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("searchRevInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchRevIncludeElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_searchRevInclude");
          writer.WriteStartArray();
          foreach (FhirString val in current.SearchRevIncludeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.SearchParam != null) && (current.SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SearchParamComponent val in current.SearchParam)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Operation != null) && (current.Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();
        foreach (CapabilityStatement.OperationComponent val in current.Operation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.ResourceComponent >>> CapabilityStatement#Resource.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.ResourceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Resource
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ProfileElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.ProfileElement = new Canonical(reader.GetString());
          }
          break;

        case "_profile":
          if (current.ProfileElement == null) { current.ProfileElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        case "supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'supportedProfile' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SupportedProfileElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SupportedProfileElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.SupportedProfileElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'supportedProfile' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportedProfileElement.Count == 0)
          {
            current.SupportedProfileElement = null;
          }
          break;

        case "_supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'supportedProfile' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_supportedProfile = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_supportedProfile >= current.SupportedProfileElement.Count)
            {
              current.SupportedProfileElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SupportedProfileElement[i_supportedProfile++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'supportedProfile' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'interaction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Interaction = new List<CapabilityStatement.ResourceInteractionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent v_Interaction = new Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent();
            v_Interaction.DeserializeJson(ref reader, options);
            current.Interaction.Add(v_Interaction);

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'interaction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Interaction.Count == 0)
          {
            current.Interaction = null;
          }
          break;

        case "versioning":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersioningElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>();
            reader.Skip();
          }
          else
          {
            current.VersioningElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(reader.GetString()));
          }
          break;

        case "_versioning":
          if (current.VersioningElement == null) { current.VersioningElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(); }
          ((Hl7.Fhir.Model.Element)current.VersioningElement).DeserializeJson(ref reader, options);
          break;

        case "readHistory":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReadHistoryElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ReadHistoryElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_readHistory":
          if (current.ReadHistoryElement == null) { current.ReadHistoryElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ReadHistoryElement).DeserializeJson(ref reader, options);
          break;

        case "updateCreate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UpdateCreateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.UpdateCreateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_updateCreate":
          if (current.UpdateCreateElement == null) { current.UpdateCreateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.UpdateCreateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalCreate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ConditionalCreateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ConditionalCreateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_conditionalCreate":
          if (current.ConditionalCreateElement == null) { current.ConditionalCreateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ConditionalCreateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalRead":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ConditionalReadElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>();
            reader.Skip();
          }
          else
          {
            current.ConditionalReadElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(reader.GetString()));
          }
          break;

        case "_conditionalRead":
          if (current.ConditionalReadElement == null) { current.ConditionalReadElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(); }
          ((Hl7.Fhir.Model.Element)current.ConditionalReadElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalUpdate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ConditionalUpdateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ConditionalUpdateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_conditionalUpdate":
          if (current.ConditionalUpdateElement == null) { current.ConditionalUpdateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ConditionalUpdateElement).DeserializeJson(ref reader, options);
          break;

        case "conditionalDelete":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ConditionalDeleteElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>();
            reader.Skip();
          }
          else
          {
            current.ConditionalDeleteElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(reader.GetString()));
          }
          break;

        case "_conditionalDelete":
          if (current.ConditionalDeleteElement == null) { current.ConditionalDeleteElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(); }
          ((Hl7.Fhir.Model.Element)current.ConditionalDeleteElement).DeserializeJson(ref reader, options);
          break;

        case "referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'referencePolicy' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReferencePolicyElement = new List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>());
              reader.Skip();
            }
            else
            {
              current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'referencePolicy' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReferencePolicyElement.Count == 0)
          {
            current.ReferencePolicyElement = null;
          }
          break;

        case "_referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'referencePolicy' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_referencePolicy = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_referencePolicy >= current.ReferencePolicyElement.Count)
            {
              current.ReferencePolicyElement.Add(new Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ReferencePolicyElement[i_referencePolicy++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'referencePolicy' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'searchInclude' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SearchIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SearchIncludeElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.SearchIncludeElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'searchInclude' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchIncludeElement.Count == 0)
          {
            current.SearchIncludeElement = null;
          }
          break;

        case "_searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'searchInclude' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_searchInclude = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_searchInclude >= current.SearchIncludeElement.Count)
            {
              current.SearchIncludeElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SearchIncludeElement[i_searchInclude++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'searchInclude' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'searchRevInclude' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SearchRevIncludeElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SearchRevIncludeElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.SearchRevIncludeElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'searchRevInclude' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchRevIncludeElement.Count == 0)
          {
            current.SearchRevIncludeElement = null;
          }
          break;

        case "_searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'searchRevInclude' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_searchRevInclude = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_searchRevInclude >= current.SearchRevIncludeElement.Count)
            {
              current.SearchRevIncludeElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SearchRevIncludeElement[i_searchRevInclude++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'searchRevInclude' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'searchParam' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SearchParam = new List<CapabilityStatement.SearchParamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent v_SearchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
            v_SearchParam.DeserializeJson(ref reader, options);
            current.SearchParam.Add(v_SearchParam);

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'searchParam' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SearchParam.Count == 0)
          {
            current.SearchParam = null;
          }
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'operation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Operation = new List<CapabilityStatement.OperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.OperationComponent v_Operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
            v_Operation.DeserializeJson(ref reader, options);
            current.Operation.Add(v_Operation);

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'operation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Operation.Count == 0)
          {
            current.Operation = null;
          }
          break;

        // Complex: resource, Export: ResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#ResourceInteraction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#ResourceInteraction, Export: ResourceInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (current.CodeElement.Value != null)
        {
          writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.ResourceInteractionComponent >>> CapabilityStatement#ResourceInteraction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.ResourceInteractionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#ResourceInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(reader.GetString()));
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        // Complex: interaction, Export: ResourceInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SearchParam into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SearchParam, Export: SearchParamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.SearchParamComponent >>> CapabilityStatement#SearchParam.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.SearchParamComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SearchParam
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefinitionElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.DefinitionElement = new Canonical(reader.GetString());
          }
          break;

        case "_definition":
          if (current.DefinitionElement == null) { current.DefinitionElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.SearchParamType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.SearchParamType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.SearchParamType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.SearchParamType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        // Complex: searchParam, Export: SearchParamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Operation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.OperationComponent >>> CapabilityStatement#Operation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.OperationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefinitionElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.DefinitionElement = new Canonical(reader.GetString());
          }
          break;

        case "_definition":
          if (current.DefinitionElement == null) { current.DefinitionElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SystemInteraction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SystemInteraction, Export: SystemInteractionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (current.CodeElement.Value != null)
        {
          writer.WriteString("code",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.CodeElement.Value));
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.SystemInteractionComponent >>> CapabilityStatement#SystemInteraction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.SystemInteractionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SystemInteraction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(reader.GetString()));
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        // Complex: interaction, Export: SystemInteractionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Messaging into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.MessagingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Messaging, Export: MessagingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (CapabilityStatement.EndpointComponent val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ReliableCacheElement != null)
      {
        if (current.ReliableCacheElement.Value != null)
        {
          writer.WriteNumber("reliableCache",(int)current.ReliableCacheElement.Value);
        }
        if (current.ReliableCacheElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReliableCacheElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_reliableCache",false,current.ReliableCacheElement.Extension,current.ReliableCacheElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if ((current.SupportedMessage != null) && (current.SupportedMessage.Count != 0))
      {
        writer.WritePropertyName("supportedMessage");
        writer.WriteStartArray();
        foreach (CapabilityStatement.SupportedMessageComponent val in current.SupportedMessage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.MessagingComponent >>> CapabilityStatement#Messaging.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.MessagingComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Messaging
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.MessagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MessagingComponent error reading 'endpoint' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endpoint = new List<CapabilityStatement.EndpointComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.EndpointComponent v_Endpoint = new Hl7.Fhir.Model.CapabilityStatement.EndpointComponent();
            v_Endpoint.DeserializeJson(ref reader, options);
            current.Endpoint.Add(v_Endpoint);

            if (!reader.Read())
            {
              throw new JsonException($"MessagingComponent error reading 'endpoint' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }
          break;

        case "reliableCache":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReliableCacheElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.ReliableCacheElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_reliableCache":
          if (current.ReliableCacheElement == null) { current.ReliableCacheElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.ReliableCacheElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        case "supportedMessage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MessagingComponent error reading 'supportedMessage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SupportedMessage = new List<CapabilityStatement.SupportedMessageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent v_SupportedMessage = new Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent();
            v_SupportedMessage.DeserializeJson(ref reader, options);
            current.SupportedMessage.Add(v_SupportedMessage);

            if (!reader.Read())
            {
              throw new JsonException($"MessagingComponent error reading 'supportedMessage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportedMessage.Count == 0)
          {
            current.SupportedMessage = null;
          }
          break;

        // Complex: messaging, Export: MessagingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Endpoint into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.EndpointComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Endpoint, Export: EndpointComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Protocol != null)
      {
        writer.WritePropertyName("protocol");
        current.Protocol.SerializeJson(writer, options);
      }

      if (current.AddressElement != null)
      {
        if (!string.IsNullOrEmpty(current.AddressElement.Value))
        {
          writer.WriteString("address",current.AddressElement.Value);
        }
        if (current.AddressElement.HasExtensions() || (!string.IsNullOrEmpty(current.AddressElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_address",false,current.AddressElement.Extension,current.AddressElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.EndpointComponent >>> CapabilityStatement#Endpoint.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.EndpointComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Endpoint
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.EndpointComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "protocol":
          current.Protocol = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Protocol).DeserializeJson(ref reader, options);
          break;

        case "address":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AddressElement = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.AddressElement = new FhirUrl(reader.GetString());
          }
          break;

        case "_address":
          if (current.AddressElement == null) { current.AddressElement = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.AddressElement).DeserializeJson(ref reader, options);
          break;

        // Complex: endpoint, Export: EndpointComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#SupportedMessage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#SupportedMessage, Export: SupportedMessageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ModeElement != null)
      {
        if (current.ModeElement.Value != null)
        {
          writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));
        }
        if (current.ModeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_mode",false,current.ModeElement.Extension,current.ModeElement.ElementId);
        }
      }

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.SupportedMessageComponent >>> CapabilityStatement#SupportedMessage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.SupportedMessageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#SupportedMessage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>();
            reader.Skip();
          }
          else
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(reader.GetString()));
          }
          break;

        case "_mode":
          if (current.ModeElement == null) { current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(); }
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefinitionElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.DefinitionElement = new Canonical(reader.GetString());
          }
          break;

        case "_definition":
          if (current.DefinitionElement == null) { current.DefinitionElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: supportedMessage, Export: SupportedMessageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CapabilityStatement#Document into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CapabilityStatement.DocumentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CapabilityStatement#Document, Export: DocumentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ModeElement != null)
      {
        if (current.ModeElement.Value != null)
        {
          writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));
        }
        if (current.ModeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_mode",false,current.ModeElement.Extension,current.ModeElement.ElementId);
        }
      }

      if (current.Documentation != null)
      {
        if (!string.IsNullOrEmpty(current.Documentation.Value))
        {
          writer.WriteString("documentation",current.Documentation.Value);
        }
        if (current.Documentation.HasExtensions() || (!string.IsNullOrEmpty(current.Documentation.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentation",false,current.Documentation.Extension,current.Documentation.ElementId);
        }
      }

      if (current.ProfileElement != null)
      {
        if (!string.IsNullOrEmpty(current.ProfileElement.Value))
        {
          writer.WriteString("profile",current.ProfileElement.Value);
        }
        if (current.ProfileElement.HasExtensions() || (!string.IsNullOrEmpty(current.ProfileElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_profile",false,current.ProfileElement.Extension,current.ProfileElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CapabilityStatement.DocumentComponent >>> CapabilityStatement#Document.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CapabilityStatement.DocumentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CapabilityStatement#Document
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CapabilityStatement.DocumentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>();
            reader.Skip();
          }
          else
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(reader.GetString()));
          }
          break;

        case "_mode":
          if (current.ModeElement == null) { current.ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(); }
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Documentation = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Documentation = new Markdown(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.Documentation == null) { current.Documentation = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Documentation).DeserializeJson(ref reader, options);
          break;

        case "profile":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ProfileElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.ProfileElement = new Canonical(reader.GetString());
          }
          break;

        case "_profile":
          if (current.ProfileElement == null) { current.ProfileElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        // Complex: document, Export: DocumentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class CapabilityStatementJsonConverter : JsonConverter<Hl7.Fhir.Model.CapabilityStatement>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.CapabilityStatement value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.CapabilityStatement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.CapabilityStatement();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
