// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for CodeSystem
  /// </summary>
  public static class CodeSystemSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR CodeSystem into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","CodeSystem");
      // Complex: CodeSystem, Export: CodeSystem, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.CaseSensitiveElement != null)
      {
        if (current.CaseSensitiveElement.Value != null)
        {
          writer.WriteBoolean("caseSensitive",(bool)current.CaseSensitiveElement.Value);
        }
        if (current.CaseSensitiveElement.HasExtensions() || (!string.IsNullOrEmpty(current.CaseSensitiveElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_caseSensitive",false,current.CaseSensitiveElement.Extension,current.CaseSensitiveElement.ElementId);
        }
      }

      if (current.ValueSetElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueSetElement.Value))
        {
          writer.WriteString("valueSet",current.ValueSetElement.Value);
        }
        if (current.ValueSetElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueSetElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueSet",false,current.ValueSetElement.Extension,current.ValueSetElement.ElementId);
        }
      }

      if (current.HierarchyMeaningElement != null)
      {
        if (current.HierarchyMeaningElement.Value != null)
        {
          writer.WriteString("hierarchyMeaning",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.HierarchyMeaningElement.Value));
        }
        if (current.HierarchyMeaningElement.HasExtensions() || (!string.IsNullOrEmpty(current.HierarchyMeaningElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_hierarchyMeaning",false,current.HierarchyMeaningElement.Extension,current.HierarchyMeaningElement.ElementId);
        }
      }

      if (current.CompositionalElement != null)
      {
        if (current.CompositionalElement.Value != null)
        {
          writer.WriteBoolean("compositional",(bool)current.CompositionalElement.Value);
        }
        if (current.CompositionalElement.HasExtensions() || (!string.IsNullOrEmpty(current.CompositionalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_compositional",false,current.CompositionalElement.Extension,current.CompositionalElement.ElementId);
        }
      }

      if (current.VersionNeededElement != null)
      {
        if (current.VersionNeededElement.Value != null)
        {
          writer.WriteBoolean("versionNeeded",(bool)current.VersionNeededElement.Value);
        }
        if (current.VersionNeededElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionNeededElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_versionNeeded",false,current.VersionNeededElement.Extension,current.VersionNeededElement.ElementId);
        }
      }

      if (current.ContentElement != null)
      {
        if (current.ContentElement.Value != null)
        {
          writer.WriteString("content",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ContentElement.Value));
        }
        if (current.ContentElement.HasExtensions() || (!string.IsNullOrEmpty(current.ContentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_content",false,current.ContentElement.Extension,current.ContentElement.ElementId);
        }
      }

      if (current.SupplementsElement != null)
      {
        if (!string.IsNullOrEmpty(current.SupplementsElement.Value))
        {
          writer.WriteString("supplements",current.SupplementsElement.Value);
        }
        if (current.SupplementsElement.HasExtensions() || (!string.IsNullOrEmpty(current.SupplementsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_supplements",false,current.SupplementsElement.Extension,current.SupplementsElement.ElementId);
        }
      }

      if (current.CountElement != null)
      {
        if (current.CountElement.Value != null)
        {
          writer.WriteNumber("count",(int)current.CountElement.Value);
        }
        if (current.CountElement.HasExtensions() || (!string.IsNullOrEmpty(current.CountElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_count",false,current.CountElement.Extension,current.CountElement.ElementId);
        }
      }

      if ((current.Filter != null) && (current.Filter.Count != 0))
      {
        writer.WritePropertyName("filter");
        writer.WriteStartArray();
        foreach (CodeSystem.FilterComponent val in current.Filter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (CodeSystem.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Concept != null) && (current.Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();
        foreach (CodeSystem.ConceptDefinitionComponent val in current.Concept)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem >>> CodeSystem.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "caseSensitive":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CaseSensitiveElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.CaseSensitiveElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_caseSensitive":
          if (current.CaseSensitiveElement == null) { current.CaseSensitiveElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.CaseSensitiveElement).DeserializeJson(ref reader, options);
          break;

        case "valueSet":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueSetElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.ValueSetElement = new Canonical(reader.GetString());
          }
          break;

        case "_valueSet":
          if (current.ValueSetElement == null) { current.ValueSetElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.ValueSetElement).DeserializeJson(ref reader, options);
          break;

        case "hierarchyMeaning":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.HierarchyMeaningElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>();
            reader.Skip();
          }
          else
          {
            current.HierarchyMeaningElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>(reader.GetString()));
          }
          break;

        case "_hierarchyMeaning":
          if (current.HierarchyMeaningElement == null) { current.HierarchyMeaningElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>(); }
          ((Hl7.Fhir.Model.Element)current.HierarchyMeaningElement).DeserializeJson(ref reader, options);
          break;

        case "compositional":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CompositionalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.CompositionalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_compositional":
          if (current.CompositionalElement == null) { current.CompositionalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.CompositionalElement).DeserializeJson(ref reader, options);
          break;

        case "versionNeeded":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionNeededElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.VersionNeededElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_versionNeeded":
          if (current.VersionNeededElement == null) { current.VersionNeededElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.VersionNeededElement).DeserializeJson(ref reader, options);
          break;

        case "content":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ContentElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>();
            reader.Skip();
          }
          else
          {
            current.ContentElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>(reader.GetString()));
          }
          break;

        case "_content":
          if (current.ContentElement == null) { current.ContentElement = new Code<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>(); }
          ((Hl7.Fhir.Model.Element)current.ContentElement).DeserializeJson(ref reader, options);
          break;

        case "supplements":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SupplementsElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.SupplementsElement = new Canonical(reader.GetString());
          }
          break;

        case "_supplements":
          if (current.SupplementsElement == null) { current.SupplementsElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.SupplementsElement).DeserializeJson(ref reader, options);
          break;

        case "count":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CountElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.CountElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_count":
          if (current.CountElement == null) { current.CountElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.CountElement).DeserializeJson(ref reader, options);
          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'filter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Filter = new List<CodeSystem.FilterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.FilterComponent v_Filter = new Hl7.Fhir.Model.CodeSystem.FilterComponent();
            v_Filter.DeserializeJson(ref reader, options);
            current.Filter.Add(v_Filter);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'filter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Filter.Count == 0)
          {
            current.Filter = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Property = new List<CodeSystem.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.PropertyComponent v_Property = new Hl7.Fhir.Model.CodeSystem.PropertyComponent();
            v_Property.DeserializeJson(ref reader, options);
            current.Property.Add(v_Property);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystem error reading 'concept' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Concept = new List<CodeSystem.ConceptDefinitionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent v_Concept = new Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent();
            v_Concept.DeserializeJson(ref reader, options);
            current.Concept.Add(v_Concept);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystem error reading 'concept' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Concept.Count == 0)
          {
            current.Concept = null;
          }
          break;

        // Complex: CodeSystem, Export: CodeSystem, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CodeSystem#Filter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem.FilterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CodeSystem#Filter, Export: FilterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.OperatorElement != null) && (current.OperatorElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code<Hl7.Fhir.Model.FilterOperator> val in current.OperatorElement)
        {
          if (val.Value != null) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("operator");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.FilterOperator> val in current.OperatorElement)
          {
            if (val.Value == null)
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_operator");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.FilterOperator> val in current.OperatorElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Filter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem.FilterComponent >>> CodeSystem#Filter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem.FilterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Filter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "operator":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"FilterComponent error reading 'operator' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.OperatorElement = new List<Code<Hl7.Fhir.Model.FilterOperator>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.OperatorElement.Add(new Code<Hl7.Fhir.Model.FilterOperator>());
              reader.Skip();
            }
            else
            {
              current.OperatorElement.Add(new Code<Hl7.Fhir.Model.FilterOperator>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FilterOperator>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"FilterComponent error reading 'operator' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OperatorElement.Count == 0)
          {
            current.OperatorElement = null;
          }
          break;

        case "_operator":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"FilterComponent error reading 'operator' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_operator = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_operator >= current.OperatorElement.Count)
            {
              current.OperatorElement.Add(new Code<Hl7.Fhir.Model.FilterOperator>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.OperatorElement[i_operator++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"FilterComponent error reading 'operator' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: filter, Export: FilterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CodeSystem#Property into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CodeSystem#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.UriElement != null)
      {
        if (!string.IsNullOrEmpty(current.UriElement.Value))
        {
          writer.WriteString("uri",current.UriElement.Value);
        }
        if (current.UriElement.HasExtensions() || (!string.IsNullOrEmpty(current.UriElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_uri",false,current.UriElement.Extension,current.UriElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Property
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem.PropertyComponent >>> CodeSystem#Property.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem.PropertyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Property
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "uri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UriElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UriElement = new FhirUri(reader.GetString());
          }
          break;

        case "_uri":
          if (current.UriElement == null) { current.UriElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UriElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.CodeSystem.PropertyType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.CodeSystem.PropertyType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CodeSystem.PropertyType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.CodeSystem.PropertyType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CodeSystem#ConceptDefinition into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CodeSystem#ConceptDefinition, Export: ConceptDefinitionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      if ((current.Designation != null) && (current.Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();
        foreach (CodeSystem.DesignationComponent val in current.Designation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (CodeSystem.ConceptPropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Concept != null) && (current.Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();
        foreach (CodeSystem.ConceptDefinitionComponent val in current.Concept)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#ConceptDefinition
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem.ConceptDefinitionComponent >>> CodeSystem#ConceptDefinition.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem.ConceptDefinitionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#ConceptDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefinitionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DefinitionElement = new FhirString(reader.GetString());
          }
          break;

        case "_definition":
          if (current.DefinitionElement == null) { current.DefinitionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptDefinitionComponent error reading 'designation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Designation = new List<CodeSystem.DesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.DesignationComponent v_Designation = new Hl7.Fhir.Model.CodeSystem.DesignationComponent();
            v_Designation.DeserializeJson(ref reader, options);
            current.Designation.Add(v_Designation);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptDefinitionComponent error reading 'designation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Designation.Count == 0)
          {
            current.Designation = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptDefinitionComponent error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Property = new List<CodeSystem.ConceptPropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent v_Property = new Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent();
            v_Property.DeserializeJson(ref reader, options);
            current.Property.Add(v_Property);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptDefinitionComponent error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptDefinitionComponent error reading 'concept' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Concept = new List<CodeSystem.ConceptDefinitionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent v_Concept = new Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent();
            v_Concept.DeserializeJson(ref reader, options);
            current.Concept.Add(v_Concept);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptDefinitionComponent error reading 'concept' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Concept.Count == 0)
          {
            current.Concept = null;
          }
          break;

        // Complex: concept, Export: ConceptDefinitionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CodeSystem#Designation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem.DesignationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CodeSystem#Designation, Export: DesignationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.LanguageElement != null)
      {
        if (!string.IsNullOrEmpty(current.LanguageElement.Value))
        {
          writer.WriteString("language",current.LanguageElement.Value.Trim());
        }
        if (current.LanguageElement.HasExtensions() || (!string.IsNullOrEmpty(current.LanguageElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_language",false,current.LanguageElement.Extension,current.LanguageElement.ElementId);
        }
      }

      if (current.Use != null)
      {
        writer.WritePropertyName("use");
        current.Use.SerializeJson(writer, options);
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Designation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem.DesignationComponent >>> CodeSystem#Designation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem.DesignationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#Designation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LanguageElement = new Code();
            reader.Skip();
          }
          else
          {
            current.LanguageElement = new Code(reader.GetString());
          }
          break;

        case "_language":
          if (current.LanguageElement == null) { current.LanguageElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.LanguageElement).DeserializeJson(ref reader, options);
          break;

        case "use":
          current.Use = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Use).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: designation, Export: DesignationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CodeSystem#ConceptProperty into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CodeSystem#ConceptProperty, Export: ConceptPropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.Code v_Code:
            if (v_Code != null)
            {
              if (!string.IsNullOrEmpty(v_Code.Value))
              {
                writer.WriteString("valueCode",v_Code.Value.Trim());
              }
              if (v_Code.HasExtensions() || (!string.IsNullOrEmpty(v_Code.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueCode",false,v_Code.Extension,v_Code.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Integer v_Integer:
            if (v_Integer != null)
            {
              if (v_Integer.Value != null)
              {
                writer.WriteNumber("valueInteger",(int)v_Integer.Value);
              }
              if (v_Integer.HasExtensions() || (!string.IsNullOrEmpty(v_Integer.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueInteger",false,v_Integer.Extension,v_Integer.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            if (v_FhirBoolean != null)
            {
              if (v_FhirBoolean.Value != null)
              {
                writer.WriteBoolean("valueBoolean",(bool)v_FhirBoolean.Value);
              }
              if (v_FhirBoolean.HasExtensions() || (!string.IsNullOrEmpty(v_FhirBoolean.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueBoolean",false,v_FhirBoolean.Extension,v_FhirBoolean.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("valueDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDecimal v_FhirDecimal:
            if (v_FhirDecimal != null)
            {
              if (v_FhirDecimal.Value != null)
              {
                writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
              }
              if (v_FhirDecimal.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDecimal.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDecimal",false,v_FhirDecimal.Extension,v_FhirDecimal.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#ConceptProperty
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CodeSystem.ConceptPropertyComponent >>> CodeSystem#ConceptProperty.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CodeSystem.ConceptPropertyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CodeSystem#ConceptProperty
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Code();
            reader.Skip();
          }
          else
          {
            current.Value = new Code(reader.GetString());
          }
          break;

        case "_valueCode":
          if (current.Value == null) { current.Value = new Code(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          current.Value = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Integer();
            reader.Skip();
          }
          else
          {
            current.Value = new Integer(reader.GetInt32());
          }
          break;

        case "_valueInteger":
          if (current.Value == null) { current.Value = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDateTime(reader.GetString());
          }
          break;

        case "_valueDateTime":
          if (current.Value == null) { current.Value = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_valueDecimal":
          if (current.Value == null) { current.Value = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: property, Export: ConceptPropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class CodeSystemJsonConverter : JsonConverter<Hl7.Fhir.Model.CodeSystem>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.CodeSystem value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.CodeSystem Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.CodeSystem();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
