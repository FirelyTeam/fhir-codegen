// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ConceptMap
  /// </summary>
  public static class ConceptMapSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ConceptMap into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ConceptMap");
      // Complex: ConceptMap, Export: ConceptMap, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.Source != null)
      {
        switch (current.Source)
        {
          case Hl7.Fhir.Model.FhirUri v_FhirUri:
            if (v_FhirUri != null)
            {
              if (!string.IsNullOrEmpty(v_FhirUri.Value))
              {
                writer.WriteString("sourceUri",v_FhirUri.Value);
              }
              if (v_FhirUri.HasExtensions() || (!string.IsNullOrEmpty(v_FhirUri.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceUri",false,v_FhirUri.Extension,v_FhirUri.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Canonical v_Canonical:
            if (v_Canonical != null)
            {
              if (!string.IsNullOrEmpty(v_Canonical.Value))
              {
                writer.WriteString("sourceCanonical",v_Canonical.Value);
              }
              if (v_Canonical.HasExtensions() || (!string.IsNullOrEmpty(v_Canonical.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceCanonical",false,v_Canonical.Extension,v_Canonical.ElementId);
              }
            }
            break;
        }
      }
      if (current.Target != null)
      {
        switch (current.Target)
        {
          case Hl7.Fhir.Model.FhirUri v_FhirUri:
            if (v_FhirUri != null)
            {
              if (!string.IsNullOrEmpty(v_FhirUri.Value))
              {
                writer.WriteString("targetUri",v_FhirUri.Value);
              }
              if (v_FhirUri.HasExtensions() || (!string.IsNullOrEmpty(v_FhirUri.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_targetUri",false,v_FhirUri.Extension,v_FhirUri.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Canonical v_Canonical:
            if (v_Canonical != null)
            {
              if (!string.IsNullOrEmpty(v_Canonical.Value))
              {
                writer.WriteString("targetCanonical",v_Canonical.Value);
              }
              if (v_Canonical.HasExtensions() || (!string.IsNullOrEmpty(v_Canonical.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_targetCanonical",false,v_Canonical.Extension,v_Canonical.ElementId);
              }
            }
            break;
        }
      }
      if ((current.Group != null) && (current.Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();
        foreach (ConceptMap.GroupComponent val in current.Group)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap >>> ConceptMap.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptMap error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptMap error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptMap error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptMap error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptMap error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptMap error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "sourceUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Source = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.Source = new FhirUri(reader.GetString());
          }
          break;

        case "_sourceUri":
          if (current.Source == null) { current.Source = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.Source).DeserializeJson(ref reader, options);
          break;

        case "sourceCanonical":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Source = new Canonical();
            reader.Skip();
          }
          else
          {
            current.Source = new Canonical(reader.GetString());
          }
          break;

        case "_sourceCanonical":
          if (current.Source == null) { current.Source = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.Source).DeserializeJson(ref reader, options);
          break;

        case "targetUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Target = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.Target = new FhirUri(reader.GetString());
          }
          break;

        case "_targetUri":
          if (current.Target == null) { current.Target = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.Target).DeserializeJson(ref reader, options);
          break;

        case "targetCanonical":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Target = new Canonical();
            reader.Skip();
          }
          else
          {
            current.Target = new Canonical(reader.GetString());
          }
          break;

        case "_targetCanonical":
          if (current.Target == null) { current.Target = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.Target).DeserializeJson(ref reader, options);
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptMap error reading 'group' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Group = new List<ConceptMap.GroupComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.GroupComponent v_Group = new Hl7.Fhir.Model.ConceptMap.GroupComponent();
            v_Group.DeserializeJson(ref reader, options);
            current.Group.Add(v_Group);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptMap error reading 'group' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Group.Count == 0)
          {
            current.Group = null;
          }
          break;

        // Complex: ConceptMap, Export: ConceptMap, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#Group into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap.GroupComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#Group, Export: GroupComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SourceElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceElement.Value))
        {
          writer.WriteString("source",current.SourceElement.Value);
        }
        if (current.SourceElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_source",false,current.SourceElement.Extension,current.SourceElement.ElementId);
        }
      }

      if (current.SourceVersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceVersionElement.Value))
        {
          writer.WriteString("sourceVersion",current.SourceVersionElement.Value);
        }
        if (current.SourceVersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceVersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_sourceVersion",false,current.SourceVersionElement.Extension,current.SourceVersionElement.ElementId);
        }
      }

      if (current.TargetElement != null)
      {
        if (!string.IsNullOrEmpty(current.TargetElement.Value))
        {
          writer.WriteString("target",current.TargetElement.Value);
        }
        if (current.TargetElement.HasExtensions() || (!string.IsNullOrEmpty(current.TargetElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_target",false,current.TargetElement.Extension,current.TargetElement.ElementId);
        }
      }

      if (current.TargetVersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.TargetVersionElement.Value))
        {
          writer.WriteString("targetVersion",current.TargetVersionElement.Value);
        }
        if (current.TargetVersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.TargetVersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_targetVersion",false,current.TargetVersionElement.Extension,current.TargetVersionElement.ElementId);
        }
      }

      if ((current.Element != null) && (current.Element.Count != 0))
      {
        writer.WritePropertyName("element");
        writer.WriteStartArray();
        foreach (ConceptMap.SourceElementComponent val in current.Element)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Unmapped != null)
      {
        writer.WritePropertyName("unmapped");
        current.Unmapped.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Group
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap.GroupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap.GroupComponent >>> ConceptMap#Group.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap.GroupComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Group
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap.GroupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.SourceElement = new FhirUri(reader.GetString());
          }
          break;

        case "_source":
          if (current.SourceElement == null) { current.SourceElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.SourceElement).DeserializeJson(ref reader, options);
          break;

        case "sourceVersion":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceVersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SourceVersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_sourceVersion":
          if (current.SourceVersionElement == null) { current.SourceVersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SourceVersionElement).DeserializeJson(ref reader, options);
          break;

        case "target":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TargetElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.TargetElement = new FhirUri(reader.GetString());
          }
          break;

        case "_target":
          if (current.TargetElement == null) { current.TargetElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.TargetElement).DeserializeJson(ref reader, options);
          break;

        case "targetVersion":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TargetVersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TargetVersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_targetVersion":
          if (current.TargetVersionElement == null) { current.TargetVersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TargetVersionElement).DeserializeJson(ref reader, options);
          break;

        case "element":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"GroupComponent error reading 'element' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Element = new List<ConceptMap.SourceElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.SourceElementComponent v_Element = new Hl7.Fhir.Model.ConceptMap.SourceElementComponent();
            v_Element.DeserializeJson(ref reader, options);
            current.Element.Add(v_Element);

            if (!reader.Read())
            {
              throw new JsonException($"GroupComponent error reading 'element' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Element.Count == 0)
          {
            current.Element = null;
          }
          break;

        case "unmapped":
          current.Unmapped = new Hl7.Fhir.Model.ConceptMap.UnmappedComponent();
          ((Hl7.Fhir.Model.ConceptMap.UnmappedComponent)current.Unmapped).DeserializeJson(ref reader, options);
          break;

        // Complex: group, Export: GroupComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#SourceElement into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap.SourceElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#SourceElement, Export: SourceElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if ((current.Target != null) && (current.Target.Count != 0))
      {
        writer.WritePropertyName("target");
        writer.WriteStartArray();
        foreach (ConceptMap.TargetElementComponent val in current.Target)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#SourceElement
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap.SourceElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap.SourceElementComponent >>> ConceptMap#SourceElement.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap.SourceElementComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#SourceElement
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap.SourceElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "target":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SourceElementComponent error reading 'target' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Target = new List<ConceptMap.TargetElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.TargetElementComponent v_Target = new Hl7.Fhir.Model.ConceptMap.TargetElementComponent();
            v_Target.DeserializeJson(ref reader, options);
            current.Target.Add(v_Target);

            if (!reader.Read())
            {
              throw new JsonException($"SourceElementComponent error reading 'target' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Target.Count == 0)
          {
            current.Target = null;
          }
          break;

        // Complex: element, Export: SourceElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#TargetElement into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap.TargetElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#TargetElement, Export: TargetElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if (current.EquivalenceElement != null)
      {
        if (current.EquivalenceElement.Value != null)
        {
          writer.WriteString("equivalence",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.EquivalenceElement.Value));
        }
        if (current.EquivalenceElement.HasExtensions() || (!string.IsNullOrEmpty(current.EquivalenceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_equivalence",false,current.EquivalenceElement.Extension,current.EquivalenceElement.ElementId);
        }
      }

      if (current.CommentElement != null)
      {
        if (!string.IsNullOrEmpty(current.CommentElement.Value))
        {
          writer.WriteString("comment",current.CommentElement.Value);
        }
        if (current.CommentElement.HasExtensions() || (!string.IsNullOrEmpty(current.CommentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_comment",false,current.CommentElement.Extension,current.CommentElement.ElementId);
        }
      }

      if ((current.DependsOn != null) && (current.DependsOn.Count != 0))
      {
        writer.WritePropertyName("dependsOn");
        writer.WriteStartArray();
        foreach (ConceptMap.OtherElementComponent val in current.DependsOn)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Product != null) && (current.Product.Count != 0))
      {
        writer.WritePropertyName("product");
        writer.WriteStartArray();
        foreach (ConceptMap.OtherElementComponent val in current.Product)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#TargetElement
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap.TargetElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap.TargetElementComponent >>> ConceptMap#TargetElement.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap.TargetElementComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#TargetElement
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap.TargetElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "equivalence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EquivalenceElement = new Code<Hl7.Fhir.Model.ConceptMapEquivalence>();
            reader.Skip();
          }
          else
          {
            current.EquivalenceElement = new Code<Hl7.Fhir.Model.ConceptMapEquivalence>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ConceptMapEquivalence>(reader.GetString()));
          }
          break;

        case "_equivalence":
          if (current.EquivalenceElement == null) { current.EquivalenceElement = new Code<Hl7.Fhir.Model.ConceptMapEquivalence>(); }
          ((Hl7.Fhir.Model.Element)current.EquivalenceElement).DeserializeJson(ref reader, options);
          break;

        case "comment":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CommentElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CommentElement = new FhirString(reader.GetString());
          }
          break;

        case "_comment":
          if (current.CommentElement == null) { current.CommentElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CommentElement).DeserializeJson(ref reader, options);
          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TargetElementComponent error reading 'dependsOn' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DependsOn = new List<ConceptMap.OtherElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.OtherElementComponent v_DependsOn = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
            v_DependsOn.DeserializeJson(ref reader, options);
            current.DependsOn.Add(v_DependsOn);

            if (!reader.Read())
            {
              throw new JsonException($"TargetElementComponent error reading 'dependsOn' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DependsOn.Count == 0)
          {
            current.DependsOn = null;
          }
          break;

        case "product":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TargetElementComponent error reading 'product' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Product = new List<ConceptMap.OtherElementComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ConceptMap.OtherElementComponent v_Product = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
            v_Product.DeserializeJson(ref reader, options);
            current.Product.Add(v_Product);

            if (!reader.Read())
            {
              throw new JsonException($"TargetElementComponent error reading 'product' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Product.Count == 0)
          {
            current.Product = null;
          }
          break;

        // Complex: target, Export: TargetElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#OtherElement into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap.OtherElementComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#OtherElement, Export: OtherElementComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.PropertyElement != null)
      {
        if (!string.IsNullOrEmpty(current.PropertyElement.Value))
        {
          writer.WriteString("property",current.PropertyElement.Value);
        }
        if (current.PropertyElement.HasExtensions() || (!string.IsNullOrEmpty(current.PropertyElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_property",false,current.PropertyElement.Extension,current.PropertyElement.ElementId);
        }
      }

      if (current.SystemElement != null)
      {
        if (!string.IsNullOrEmpty(current.SystemElement.Value))
        {
          writer.WriteString("system",current.SystemElement.Value);
        }
        if (current.SystemElement.HasExtensions() || (!string.IsNullOrEmpty(current.SystemElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_system",false,current.SystemElement.Extension,current.SystemElement.ElementId);
        }
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#OtherElement
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap.OtherElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap.OtherElementComponent >>> ConceptMap#OtherElement.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap.OtherElementComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#OtherElement
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap.OtherElementComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "property":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PropertyElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.PropertyElement = new FhirUri(reader.GetString());
          }
          break;

        case "_property":
          if (current.PropertyElement == null) { current.PropertyElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.PropertyElement).DeserializeJson(ref reader, options);
          break;

        case "system":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SystemElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.SystemElement = new Canonical(reader.GetString());
          }
          break;

        case "_system":
          if (current.SystemElement == null) { current.SystemElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.SystemElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        // Complex: dependsOn, Export: OtherElementComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ConceptMap#Unmapped into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ConceptMap.UnmappedComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ConceptMap#Unmapped, Export: UnmappedComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ModeElement != null)
      {
        if (current.ModeElement.Value != null)
        {
          writer.WriteString("mode",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.ModeElement.Value));
        }
        if (current.ModeElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_mode",false,current.ModeElement.Extension,current.ModeElement.ElementId);
        }
      }

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Unmapped
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ConceptMap.UnmappedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ConceptMap.UnmappedComponent >>> ConceptMap#Unmapped.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ConceptMap.UnmappedComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ConceptMap#Unmapped
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ConceptMap.UnmappedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "mode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>();
            reader.Skip();
          }
          else
          {
            current.ModeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(reader.GetString()));
          }
          break;

        case "_mode":
          if (current.ModeElement == null) { current.ModeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(); }
          ((Hl7.Fhir.Model.Element)current.ModeElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new Canonical(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: unmapped, Export: UnmappedComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ConceptMapJsonConverter : JsonConverter<Hl7.Fhir.Model.ConceptMap>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ConceptMap value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ConceptMap Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ConceptMap();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
