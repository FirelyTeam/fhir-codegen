// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for CoverageEligibilityResponse
  /// </summary>
  public static class CoverageEligibilityResponseSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR CoverageEligibilityResponse into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","CoverageEligibilityResponse");
      // Complex: CoverageEligibilityResponse, Export: CoverageEligibilityResponse, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if ((current.PurposeElement != null) && (current.PurposeElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose> val in current.PurposeElement)
        {
          if (val.Value != null) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("purpose");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose> val in current.PurposeElement)
          {
            if (val.Value == null)
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_purpose");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose> val in current.PurposeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.Patient != null)
      {
        writer.WritePropertyName("patient");
        current.Patient.SerializeJson(writer, options);
      }

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Hl7.Fhir.Model.Date v_Date:
            if (v_Date != null)
            {
              if (!string.IsNullOrEmpty(v_Date.Value))
              {
                writer.WriteString("servicedDate",v_Date.Value);
              }
              if (v_Date.HasExtensions() || (!string.IsNullOrEmpty(v_Date.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_servicedDate",false,v_Date.Extension,v_Date.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.CreatedElement != null)
      {
        if (!string.IsNullOrEmpty(current.CreatedElement.Value))
        {
          writer.WriteString("created",current.CreatedElement.Value);
        }
        if (current.CreatedElement.HasExtensions() || (!string.IsNullOrEmpty(current.CreatedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_created",false,current.CreatedElement.Extension,current.CreatedElement.ElementId);
        }
      }

      if (current.Requestor != null)
      {
        writer.WritePropertyName("requestor");
        current.Requestor.SerializeJson(writer, options);
      }

      if (current.Request != null)
      {
        writer.WritePropertyName("request");
        current.Request.SerializeJson(writer, options);
      }

      if (current.OutcomeElement != null)
      {
        if (current.OutcomeElement.Value != null)
        {
          writer.WriteString("outcome",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OutcomeElement.Value));
        }
        if (current.OutcomeElement.HasExtensions() || (!string.IsNullOrEmpty(current.OutcomeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_outcome",false,current.OutcomeElement.Extension,current.OutcomeElement.ElementId);
        }
      }

      if (current.DispositionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DispositionElement.Value))
        {
          writer.WriteString("disposition",current.DispositionElement.Value);
        }
        if (current.DispositionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DispositionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_disposition",false,current.DispositionElement.Extension,current.DispositionElement.ElementId);
        }
      }

      if (current.Insurer != null)
      {
        writer.WritePropertyName("insurer");
        current.Insurer.SerializeJson(writer, options);
      }

      if ((current.Insurance != null) && (current.Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();
        foreach (CoverageEligibilityResponse.InsuranceComponent val in current.Insurance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PreAuthRefElement != null)
      {
        if (!string.IsNullOrEmpty(current.PreAuthRefElement.Value))
        {
          writer.WriteString("preAuthRef",current.PreAuthRefElement.Value);
        }
        if (current.PreAuthRefElement.HasExtensions() || (!string.IsNullOrEmpty(current.PreAuthRefElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_preAuthRef",false,current.PreAuthRefElement.Extension,current.PreAuthRefElement.ElementId);
        }
      }

      if (current.Form != null)
      {
        writer.WritePropertyName("form");
        current.Form.SerializeJson(writer, options);
      }

      if ((current.Error != null) && (current.Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();
        foreach (CoverageEligibilityResponse.ErrorsComponent val in current.Error)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CoverageEligibilityResponse >>> CoverageEligibilityResponse.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CoverageEligibilityResponse: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CoverageEligibilityResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageEligibilityResponse error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageEligibilityResponse error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FinancialResourceStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageEligibilityResponse error reading 'purpose' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PurposeElement = new List<Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PurposeElement.Add(new Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>());
              reader.Skip();
            }
            else
            {
              current.PurposeElement.Add(new Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CoverageEligibilityResponse error reading 'purpose' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PurposeElement.Count == 0)
          {
            current.PurposeElement = null;
          }
          break;

        case "_purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageEligibilityResponse error reading 'purpose' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_purpose = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_purpose >= current.PurposeElement.Count)
            {
              current.PurposeElement.Add(new Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PurposeElement[i_purpose++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CoverageEligibilityResponse error reading 'purpose' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "servicedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Serviced = new Date();
            reader.Skip();
          }
          else
          {
            current.Serviced = new Date(reader.GetString());
          }
          break;

        case "_servicedDate":
          if (current.Serviced == null) { current.Serviced = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "created":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CreatedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.CreatedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_created":
          if (current.CreatedElement == null) { current.CreatedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.CreatedElement).DeserializeJson(ref reader, options);
          break;

        case "requestor":
          current.Requestor = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Requestor).DeserializeJson(ref reader, options);
          break;

        case "request":
          current.Request = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Request).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
            reader.Skip();
          }
          else
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ClaimProcessingCodes>(reader.GetString()));
          }
          break;

        case "_outcome":
          if (current.OutcomeElement == null) { current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(); }
          ((Hl7.Fhir.Model.Element)current.OutcomeElement).DeserializeJson(ref reader, options);
          break;

        case "disposition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DispositionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DispositionElement = new FhirString(reader.GetString());
          }
          break;

        case "_disposition":
          if (current.DispositionElement == null) { current.DispositionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DispositionElement).DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Insurer).DeserializeJson(ref reader, options);
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageEligibilityResponse error reading 'insurance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Insurance = new List<CoverageEligibilityResponse.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageEligibilityResponse error reading 'insurance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "preAuthRef":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PreAuthRefElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PreAuthRefElement = new FhirString(reader.GetString());
          }
          break;

        case "_preAuthRef":
          if (current.PreAuthRefElement == null) { current.PreAuthRefElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PreAuthRefElement).DeserializeJson(ref reader, options);
          break;

        case "form":
          current.Form = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Form).DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageEligibilityResponse error reading 'error' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Error = new List<CoverageEligibilityResponse.ErrorsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent v_Error = new Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent();
            v_Error.DeserializeJson(ref reader, options);
            current.Error.Add(v_Error);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageEligibilityResponse error reading 'error' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Error.Count == 0)
          {
            current.Error = null;
          }
          break;

        // Complex: CoverageEligibilityResponse, Export: CoverageEligibilityResponse, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CoverageEligibilityResponse#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CoverageEligibilityResponse#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Coverage != null)
      {
        writer.WritePropertyName("coverage");
        current.Coverage.SerializeJson(writer, options);
      }

      if (current.InforceElement != null)
      {
        if (current.InforceElement.Value != null)
        {
          writer.WriteBoolean("inforce",(bool)current.InforceElement.Value);
        }
        if (current.InforceElement.HasExtensions() || (!string.IsNullOrEmpty(current.InforceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_inforce",false,current.InforceElement.Extension,current.InforceElement.ElementId);
        }
      }

      if (current.BenefitPeriod != null)
      {
        writer.WritePropertyName("benefitPeriod");
        current.BenefitPeriod.SerializeJson(writer, options);
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (CoverageEligibilityResponse.ItemsComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Insurance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CoverageEligibilityResponse.InsuranceComponent >>> CoverageEligibilityResponse#Insurance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CoverageEligibilityResponse.InsuranceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Coverage).DeserializeJson(ref reader, options);
          break;

        case "inforce":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.InforceElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.InforceElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_inforce":
          if (current.InforceElement == null) { current.InforceElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.InforceElement).DeserializeJson(ref reader, options);
          break;

        case "benefitPeriod":
          current.BenefitPeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.BenefitPeriod).DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsuranceComponent error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<CoverageEligibilityResponse.ItemsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent v_Item = new Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"InsuranceComponent error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CoverageEligibilityResponse#Items into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CoverageEligibilityResponse#Items, Export: ItemsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      if (current.ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        current.ProductOrService.SerializeJson(writer, options);
      }

      if ((current.Modifier != null) && (current.Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Modifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Provider != null)
      {
        writer.WritePropertyName("provider");
        current.Provider.SerializeJson(writer, options);
      }

      if (current.ExcludedElement != null)
      {
        if (current.ExcludedElement.Value != null)
        {
          writer.WriteBoolean("excluded",(bool)current.ExcludedElement.Value);
        }
        if (current.ExcludedElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExcludedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_excluded",false,current.ExcludedElement.Extension,current.ExcludedElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.Network != null)
      {
        writer.WritePropertyName("network");
        current.Network.SerializeJson(writer, options);
      }

      if (current.Unit != null)
      {
        writer.WritePropertyName("unit");
        current.Unit.SerializeJson(writer, options);
      }

      if (current.Term != null)
      {
        writer.WritePropertyName("term");
        current.Term.SerializeJson(writer, options);
      }

      if ((current.Benefit != null) && (current.Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();
        foreach (CoverageEligibilityResponse.BenefitComponent val in current.Benefit)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.AuthorizationRequiredElement != null)
      {
        if (current.AuthorizationRequiredElement.Value != null)
        {
          writer.WriteBoolean("authorizationRequired",(bool)current.AuthorizationRequiredElement.Value);
        }
        if (current.AuthorizationRequiredElement.HasExtensions() || (!string.IsNullOrEmpty(current.AuthorizationRequiredElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_authorizationRequired",false,current.AuthorizationRequiredElement.Extension,current.AuthorizationRequiredElement.ElementId);
        }
      }

      if ((current.AuthorizationSupporting != null) && (current.AuthorizationSupporting.Count != 0))
      {
        writer.WritePropertyName("authorizationSupporting");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.AuthorizationSupporting)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.AuthorizationUrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.AuthorizationUrlElement.Value))
        {
          writer.WriteString("authorizationUrl",current.AuthorizationUrlElement.Value);
        }
        if (current.AuthorizationUrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.AuthorizationUrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_authorizationUrl",false,current.AuthorizationUrlElement.Extension,current.AuthorizationUrlElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Items
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CoverageEligibilityResponse.ItemsComponent >>> CoverageEligibilityResponse#Items.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CoverageEligibilityResponse.ItemsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Items
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemsComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"ItemsComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Provider).DeserializeJson(ref reader, options);
          break;

        case "excluded":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExcludedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExcludedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_excluded":
          if (current.ExcludedElement == null) { current.ExcludedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExcludedElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "network":
          current.Network = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Network).DeserializeJson(ref reader, options);
          break;

        case "unit":
          current.Unit = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Unit).DeserializeJson(ref reader, options);
          break;

        case "term":
          current.Term = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Term).DeserializeJson(ref reader, options);
          break;

        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemsComponent error reading 'benefit' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Benefit = new List<CoverageEligibilityResponse.BenefitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent v_Benefit = new Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent();
            v_Benefit.DeserializeJson(ref reader, options);
            current.Benefit.Add(v_Benefit);

            if (!reader.Read())
            {
              throw new JsonException($"ItemsComponent error reading 'benefit' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Benefit.Count == 0)
          {
            current.Benefit = null;
          }
          break;

        case "authorizationRequired":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AuthorizationRequiredElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AuthorizationRequiredElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_authorizationRequired":
          if (current.AuthorizationRequiredElement == null) { current.AuthorizationRequiredElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AuthorizationRequiredElement).DeserializeJson(ref reader, options);
          break;

        case "authorizationSupporting":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemsComponent error reading 'authorizationSupporting' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AuthorizationSupporting = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_AuthorizationSupporting = new Hl7.Fhir.Model.CodeableConcept();
            v_AuthorizationSupporting.DeserializeJson(ref reader, options);
            current.AuthorizationSupporting.Add(v_AuthorizationSupporting);

            if (!reader.Read())
            {
              throw new JsonException($"ItemsComponent error reading 'authorizationSupporting' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AuthorizationSupporting.Count == 0)
          {
            current.AuthorizationSupporting = null;
          }
          break;

        case "authorizationUrl":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AuthorizationUrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.AuthorizationUrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_authorizationUrl":
          if (current.AuthorizationUrlElement == null) { current.AuthorizationUrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.AuthorizationUrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: item, Export: ItemsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CoverageEligibilityResponse#Benefit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CoverageEligibilityResponse#Benefit, Export: BenefitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Allowed != null)
      {
        switch (current.Allowed)
        {
          case Hl7.Fhir.Model.UnsignedInt v_UnsignedInt:
            if (v_UnsignedInt != null)
            {
              if (v_UnsignedInt.Value != null)
              {
                writer.WriteNumber("allowedUnsignedInt",(int)v_UnsignedInt.Value);
              }
              if (v_UnsignedInt.HasExtensions() || (!string.IsNullOrEmpty(v_UnsignedInt.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_allowedUnsignedInt",false,v_UnsignedInt.Extension,v_UnsignedInt.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("allowedString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_allowedString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Money v_Money:
            writer.WritePropertyName("allowedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Used != null)
      {
        switch (current.Used)
        {
          case Hl7.Fhir.Model.UnsignedInt v_UnsignedInt:
            if (v_UnsignedInt != null)
            {
              if (v_UnsignedInt.Value != null)
              {
                writer.WriteNumber("usedUnsignedInt",(int)v_UnsignedInt.Value);
              }
              if (v_UnsignedInt.HasExtensions() || (!string.IsNullOrEmpty(v_UnsignedInt.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_usedUnsignedInt",false,v_UnsignedInt.Extension,v_UnsignedInt.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("usedString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_usedString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Money v_Money:
            writer.WritePropertyName("usedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Benefit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CoverageEligibilityResponse.BenefitComponent >>> CoverageEligibilityResponse#Benefit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CoverageEligibilityResponse.BenefitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Benefit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "allowedUnsignedInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Allowed = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.Allowed = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_allowedUnsignedInt":
          if (current.Allowed == null) { current.Allowed = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "allowedString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Allowed = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Allowed = new FhirString(reader.GetString());
          }
          break;

        case "_allowedString":
          if (current.Allowed == null) { current.Allowed = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          current.Allowed = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Used = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.Used = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_usedUnsignedInt":
          if (current.Used == null) { current.Used = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.Used).DeserializeJson(ref reader, options);
          break;

        case "usedString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Used = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Used = new FhirString(reader.GetString());
          }
          break;

        case "_usedString":
          if (current.Used == null) { current.Used = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Used).DeserializeJson(ref reader, options);
          break;

        case "usedMoney":
          current.Used = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Used).DeserializeJson(ref reader, options);
          break;

        // Complex: benefit, Export: BenefitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR CoverageEligibilityResponse#Errors into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: CoverageEligibilityResponse#Errors, Export: ErrorsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Errors
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"CoverageEligibilityResponse.ErrorsComponent >>> CoverageEligibilityResponse#Errors.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"CoverageEligibilityResponse.ErrorsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR CoverageEligibilityResponse#Errors
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        // Complex: error, Export: ErrorsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class CoverageEligibilityResponseJsonConverter : JsonConverter<Hl7.Fhir.Model.CoverageEligibilityResponse>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.CoverageEligibilityResponse value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.CoverageEligibilityResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.CoverageEligibilityResponse();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
