// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for DeviceDefinition
  /// </summary>
  public static class DeviceDefinitionSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR DeviceDefinition into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","DeviceDefinition");
      // Complex: DeviceDefinition, Export: DeviceDefinition, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.UdiDeviceIdentifier != null) && (current.UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();
        foreach (DeviceDefinition.UdiDeviceIdentifierComponent val in current.UdiDeviceIdentifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Manufacturer != null)
      {
        switch (current.Manufacturer)
        {
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("manufacturerString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_manufacturerString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("manufacturerReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.DeviceName != null) && (current.DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();
        foreach (DeviceDefinition.DeviceNameComponent val in current.DeviceName)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ModelNumberElement != null)
      {
        if (!string.IsNullOrEmpty(current.ModelNumberElement.Value))
        {
          writer.WriteString("modelNumber",current.ModelNumberElement.Value);
        }
        if (current.ModelNumberElement.HasExtensions() || (!string.IsNullOrEmpty(current.ModelNumberElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_modelNumber",false,current.ModelNumberElement.Extension,current.ModelNumberElement.ElementId);
        }
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Specialization != null) && (current.Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();
        foreach (DeviceDefinition.SpecializationComponent val in current.Specialization)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.VersionElement != null) && (current.VersionElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.VersionElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("version");
          writer.WriteStartArray();
          foreach (FhirString val in current.VersionElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_version");
          writer.WriteStartArray();
          foreach (FhirString val in current.VersionElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.Safety != null) && (current.Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Safety)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ShelfLifeStorage != null) && (current.ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();
        foreach (ProductShelfLife val in current.ShelfLifeStorage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PhysicalCharacteristics != null)
      {
        writer.WritePropertyName("physicalCharacteristics");
        current.PhysicalCharacteristics.SerializeJson(writer, options);
      }

      if ((current.LanguageCode != null) && (current.LanguageCode.Count != 0))
      {
        writer.WritePropertyName("languageCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.LanguageCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Capability != null) && (current.Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();
        foreach (DeviceDefinition.CapabilityComponent val in current.Capability)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (DeviceDefinition.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Owner != null)
      {
        writer.WritePropertyName("owner");
        current.Owner.SerializeJson(writer, options);
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactPoint val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if (current.OnlineInformationElement != null)
      {
        if (!string.IsNullOrEmpty(current.OnlineInformationElement.Value))
        {
          writer.WriteString("onlineInformation",current.OnlineInformationElement.Value);
        }
        if (current.OnlineInformationElement.HasExtensions() || (!string.IsNullOrEmpty(current.OnlineInformationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_onlineInformation",false,current.OnlineInformationElement.Extension,current.OnlineInformationElement.ElementId);
        }
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.ParentDevice != null)
      {
        writer.WritePropertyName("parentDevice");
        current.ParentDevice.SerializeJson(writer, options);
      }

      if ((current.Material != null) && (current.Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();
        foreach (DeviceDefinition.MaterialComponent val in current.Material)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition >>> DeviceDefinition.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'udiDeviceIdentifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UdiDeviceIdentifier = new List<DeviceDefinition.UdiDeviceIdentifierComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent v_UdiDeviceIdentifier = new Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent();
            v_UdiDeviceIdentifier.DeserializeJson(ref reader, options);
            current.UdiDeviceIdentifier.Add(v_UdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'udiDeviceIdentifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UdiDeviceIdentifier.Count == 0)
          {
            current.UdiDeviceIdentifier = null;
          }
          break;

        case "manufacturerString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Manufacturer = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Manufacturer = new FhirString(reader.GetString());
          }
          break;

        case "_manufacturerString":
          if (current.Manufacturer == null) { current.Manufacturer = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Manufacturer).DeserializeJson(ref reader, options);
          break;

        case "manufacturerReference":
          current.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Manufacturer).DeserializeJson(ref reader, options);
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'deviceName' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DeviceName = new List<DeviceDefinition.DeviceNameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent v_DeviceName = new Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent();
            v_DeviceName.DeserializeJson(ref reader, options);
            current.DeviceName.Add(v_DeviceName);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'deviceName' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DeviceName.Count == 0)
          {
            current.DeviceName = null;
          }
          break;

        case "modelNumber":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ModelNumberElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ModelNumberElement = new FhirString(reader.GetString());
          }
          break;

        case "_modelNumber":
          if (current.ModelNumberElement == null) { current.ModelNumberElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ModelNumberElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'specialization' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Specialization = new List<DeviceDefinition.SpecializationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent v_Specialization = new Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent();
            v_Specialization.DeserializeJson(ref reader, options);
            current.Specialization.Add(v_Specialization);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'specialization' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Specialization.Count == 0)
          {
            current.Specialization = null;
          }
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'version' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.VersionElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.VersionElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.VersionElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'version' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.VersionElement.Count == 0)
          {
            current.VersionElement = null;
          }
          break;

        case "_version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'version' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_version = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_version >= current.VersionElement.Count)
            {
              current.VersionElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.VersionElement[i_version++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'version' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'safety' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Safety = new Hl7.Fhir.Model.CodeableConcept();
            v_Safety.DeserializeJson(ref reader, options);
            current.Safety.Add(v_Safety);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'safety' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Safety.Count == 0)
          {
            current.Safety = null;
          }
          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'shelfLifeStorage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ProductShelfLife v_ShelfLifeStorage = new Hl7.Fhir.Model.ProductShelfLife();
            v_ShelfLifeStorage.DeserializeJson(ref reader, options);
            current.ShelfLifeStorage.Add(v_ShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'shelfLifeStorage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ShelfLifeStorage.Count == 0)
          {
            current.ShelfLifeStorage = null;
          }
          break;

        case "physicalCharacteristics":
          current.PhysicalCharacteristics = new Hl7.Fhir.Model.ProdCharacteristic();
          ((Hl7.Fhir.Model.ProdCharacteristic)current.PhysicalCharacteristics).DeserializeJson(ref reader, options);
          break;

        case "languageCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'languageCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LanguageCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_LanguageCode = new Hl7.Fhir.Model.CodeableConcept();
            v_LanguageCode.DeserializeJson(ref reader, options);
            current.LanguageCode.Add(v_LanguageCode);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'languageCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LanguageCode.Count == 0)
          {
            current.LanguageCode = null;
          }
          break;

        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'capability' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Capability = new List<DeviceDefinition.CapabilityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent v_Capability = new Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent();
            v_Capability.DeserializeJson(ref reader, options);
            current.Capability.Add(v_Capability);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'capability' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Capability.Count == 0)
          {
            current.Capability = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Property = new List<DeviceDefinition.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.PropertyComponent v_Property = new Hl7.Fhir.Model.DeviceDefinition.PropertyComponent();
            v_Property.DeserializeJson(ref reader, options);
            current.Property.Add(v_Property);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }
          break;

        case "owner":
          current.Owner = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Owner).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactPoint v_Contact = new Hl7.Fhir.Model.ContactPoint();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "onlineInformation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OnlineInformationElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.OnlineInformationElement = new FhirUri(reader.GetString());
          }
          break;

        case "_onlineInformation":
          if (current.OnlineInformationElement == null) { current.OnlineInformationElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.OnlineInformationElement).DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "parentDevice":
          current.ParentDevice = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ParentDevice).DeserializeJson(ref reader, options);
          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DeviceDefinition error reading 'material' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Material = new List<DeviceDefinition.MaterialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.DeviceDefinition.MaterialComponent v_Material = new Hl7.Fhir.Model.DeviceDefinition.MaterialComponent();
            v_Material.DeserializeJson(ref reader, options);
            current.Material.Add(v_Material);

            if (!reader.Read())
            {
              throw new JsonException($"DeviceDefinition error reading 'material' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Material.Count == 0)
          {
            current.Material = null;
          }
          break;

        // Complex: DeviceDefinition, Export: DeviceDefinition, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#UdiDeviceIdentifier into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#UdiDeviceIdentifier, Export: UdiDeviceIdentifierComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.DeviceIdentifierElement != null)
      {
        if (!string.IsNullOrEmpty(current.DeviceIdentifierElement.Value))
        {
          writer.WriteString("deviceIdentifier",current.DeviceIdentifierElement.Value);
        }
        if (current.DeviceIdentifierElement.HasExtensions() || (!string.IsNullOrEmpty(current.DeviceIdentifierElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_deviceIdentifier",false,current.DeviceIdentifierElement.Extension,current.DeviceIdentifierElement.ElementId);
        }
      }

      if (current.IssuerElement != null)
      {
        if (!string.IsNullOrEmpty(current.IssuerElement.Value))
        {
          writer.WriteString("issuer",current.IssuerElement.Value);
        }
        if (current.IssuerElement.HasExtensions() || (!string.IsNullOrEmpty(current.IssuerElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_issuer",false,current.IssuerElement.Extension,current.IssuerElement.ElementId);
        }
      }

      if (current.JurisdictionElement != null)
      {
        if (!string.IsNullOrEmpty(current.JurisdictionElement.Value))
        {
          writer.WriteString("jurisdiction",current.JurisdictionElement.Value);
        }
        if (current.JurisdictionElement.HasExtensions() || (!string.IsNullOrEmpty(current.JurisdictionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_jurisdiction",false,current.JurisdictionElement.Extension,current.JurisdictionElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#UdiDeviceIdentifier
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.UdiDeviceIdentifierComponent >>> DeviceDefinition#UdiDeviceIdentifier.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.UdiDeviceIdentifierComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#UdiDeviceIdentifier
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DeviceIdentifierElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DeviceIdentifierElement = new FhirString(reader.GetString());
          }
          break;

        case "_deviceIdentifier":
          if (current.DeviceIdentifierElement == null) { current.DeviceIdentifierElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DeviceIdentifierElement).DeserializeJson(ref reader, options);
          break;

        case "issuer":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IssuerElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.IssuerElement = new FhirUri(reader.GetString());
          }
          break;

        case "_issuer":
          if (current.IssuerElement == null) { current.IssuerElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.IssuerElement).DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.JurisdictionElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.JurisdictionElement = new FhirUri(reader.GetString());
          }
          break;

        case "_jurisdiction":
          if (current.JurisdictionElement == null) { current.JurisdictionElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.JurisdictionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: udiDeviceIdentifier, Export: UdiDeviceIdentifierComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#DeviceName into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#DeviceName, Export: DeviceNameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#DeviceName
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.DeviceNameComponent >>> DeviceDefinition#DeviceName.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.DeviceNameComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#DeviceName
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.DeviceNameType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        // Complex: deviceName, Export: DeviceNameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Specialization into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Specialization, Export: SpecializationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SystemTypeElement != null)
      {
        if (!string.IsNullOrEmpty(current.SystemTypeElement.Value))
        {
          writer.WriteString("systemType",current.SystemTypeElement.Value);
        }
        if (current.SystemTypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.SystemTypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_systemType",false,current.SystemTypeElement.Extension,current.SystemTypeElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Specialization
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.SpecializationComponent >>> DeviceDefinition#Specialization.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.SpecializationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Specialization
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SystemTypeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SystemTypeElement = new FhirString(reader.GetString());
          }
          break;

        case "_systemType":
          if (current.SystemTypeElement == null) { current.SystemTypeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SystemTypeElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: specialization, Export: SpecializationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Capability into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Capability, Export: CapabilityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Description != null) && (current.Description.Count != 0))
      {
        writer.WritePropertyName("description");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Description)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Capability
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.CapabilityComponent >>> DeviceDefinition#Capability.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.CapabilityComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Capability
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "description":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityComponent error reading 'description' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Description = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Description = new Hl7.Fhir.Model.CodeableConcept();
            v_Description.DeserializeJson(ref reader, options);
            current.Description.Add(v_Description);

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityComponent error reading 'description' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Description.Count == 0)
          {
            current.Description = null;
          }
          break;

        // Complex: capability, Export: CapabilityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Property into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.ValueQuantity != null) && (current.ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();
        foreach (Quantity val in current.ValueQuantity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ValueCode != null) && (current.ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ValueCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Property
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.PropertyComponent >>> DeviceDefinition#Property.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.PropertyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Property
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PropertyComponent error reading 'valueQuantity' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Quantity v_ValueQuantity = new Hl7.Fhir.Model.Quantity();
            v_ValueQuantity.DeserializeJson(ref reader, options);
            current.ValueQuantity.Add(v_ValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException($"PropertyComponent error reading 'valueQuantity' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueQuantity.Count == 0)
          {
            current.ValueQuantity = null;
          }
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PropertyComponent error reading 'valueCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ValueCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ValueCode.DeserializeJson(ref reader, options);
            current.ValueCode.Add(v_ValueCode);

            if (!reader.Read())
            {
              throw new JsonException($"PropertyComponent error reading 'valueCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueCode.Count == 0)
          {
            current.ValueCode = null;
          }
          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR DeviceDefinition#Material into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.DeviceDefinition.MaterialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: DeviceDefinition#Material, Export: MaterialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Substance != null)
      {
        writer.WritePropertyName("substance");
        current.Substance.SerializeJson(writer, options);
      }

      if (current.AlternateElement != null)
      {
        if (current.AlternateElement.Value != null)
        {
          writer.WriteBoolean("alternate",(bool)current.AlternateElement.Value);
        }
        if (current.AlternateElement.HasExtensions() || (!string.IsNullOrEmpty(current.AlternateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_alternate",false,current.AlternateElement.Extension,current.AlternateElement.ElementId);
        }
      }

      if (current.AllergenicIndicatorElement != null)
      {
        if (current.AllergenicIndicatorElement.Value != null)
        {
          writer.WriteBoolean("allergenicIndicator",(bool)current.AllergenicIndicatorElement.Value);
        }
        if (current.AllergenicIndicatorElement.HasExtensions() || (!string.IsNullOrEmpty(current.AllergenicIndicatorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_allergenicIndicator",false,current.AllergenicIndicatorElement.Extension,current.AllergenicIndicatorElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Material
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.DeviceDefinition.MaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"DeviceDefinition.MaterialComponent >>> DeviceDefinition#Material.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"DeviceDefinition.MaterialComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR DeviceDefinition#Material
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.DeviceDefinition.MaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "substance":
          current.Substance = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Substance).DeserializeJson(ref reader, options);
          break;

        case "alternate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AlternateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AlternateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_alternate":
          if (current.AlternateElement == null) { current.AlternateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AlternateElement).DeserializeJson(ref reader, options);
          break;

        case "allergenicIndicator":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AllergenicIndicatorElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AllergenicIndicatorElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_allergenicIndicator":
          if (current.AllergenicIndicatorElement == null) { current.AllergenicIndicatorElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AllergenicIndicatorElement).DeserializeJson(ref reader, options);
          break;

        // Complex: material, Export: MaterialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class DeviceDefinitionJsonConverter : JsonConverter<Hl7.Fhir.Model.DeviceDefinition>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.DeviceDefinition value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.DeviceDefinition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.DeviceDefinition();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
