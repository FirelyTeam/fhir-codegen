// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// Dispatches to the right SerializeJson extension method for Resources.
  /// </summary>
  internal class SerializeJsonResourceDispatcher
  {
    /// <summary>
    /// Writes a specified Resource as JSON.
    /// </summary>
    public static void DispatchSerializeJson(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
    {
      switch (resource)
      {
        case Hl7.Fhir.Model.Account typedAccount:
          typedAccount.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ActivityDefinition typedActivityDefinition:
          typedActivityDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.AdverseEvent typedAdverseEvent:
          typedAdverseEvent.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.AllergyIntolerance typedAllergyIntolerance:
          typedAllergyIntolerance.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Appointment typedAppointment:
          typedAppointment.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.AppointmentResponse typedAppointmentResponse:
          typedAppointmentResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.AuditEvent typedAuditEvent:
          typedAuditEvent.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Basic typedBasic:
          typedBasic.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Binary typedBinary:
          typedBinary.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.BiologicallyDerivedProduct typedBiologicallyDerivedProduct:
          typedBiologicallyDerivedProduct.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.BodyStructure typedBodyStructure:
          typedBodyStructure.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Bundle typedBundle:
          typedBundle.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CapabilityStatement typedCapabilityStatement:
          typedCapabilityStatement.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CarePlan typedCarePlan:
          typedCarePlan.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CareTeam typedCareTeam:
          typedCareTeam.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CatalogEntry typedCatalogEntry:
          typedCatalogEntry.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ChargeItem typedChargeItem:
          typedChargeItem.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ChargeItemDefinition typedChargeItemDefinition:
          typedChargeItemDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Claim typedClaim:
          typedClaim.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ClaimResponse typedClaimResponse:
          typedClaimResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ClinicalImpression typedClinicalImpression:
          typedClinicalImpression.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CodeSystem typedCodeSystem:
          typedCodeSystem.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Communication typedCommunication:
          typedCommunication.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CommunicationRequest typedCommunicationRequest:
          typedCommunicationRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CompartmentDefinition typedCompartmentDefinition:
          typedCompartmentDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Composition typedComposition:
          typedComposition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ConceptMap typedConceptMap:
          typedConceptMap.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Condition typedCondition:
          typedCondition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Consent typedConsent:
          typedConsent.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Contract typedContract:
          typedContract.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Coverage typedCoverage:
          typedCoverage.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CoverageEligibilityRequest typedCoverageEligibilityRequest:
          typedCoverageEligibilityRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.CoverageEligibilityResponse typedCoverageEligibilityResponse:
          typedCoverageEligibilityResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DetectedIssue typedDetectedIssue:
          typedDetectedIssue.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Device typedDevice:
          typedDevice.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DeviceDefinition typedDeviceDefinition:
          typedDeviceDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DeviceMetric typedDeviceMetric:
          typedDeviceMetric.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DeviceRequest typedDeviceRequest:
          typedDeviceRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DeviceUseStatement typedDeviceUseStatement:
          typedDeviceUseStatement.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DiagnosticReport typedDiagnosticReport:
          typedDiagnosticReport.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DocumentManifest typedDocumentManifest:
          typedDocumentManifest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.DocumentReference typedDocumentReference:
          typedDocumentReference.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EffectEvidenceSynthesis typedEffectEvidenceSynthesis:
          typedEffectEvidenceSynthesis.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Encounter typedEncounter:
          typedEncounter.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Endpoint typedEndpoint:
          typedEndpoint.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EnrollmentRequest typedEnrollmentRequest:
          typedEnrollmentRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EnrollmentResponse typedEnrollmentResponse:
          typedEnrollmentResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EpisodeOfCare typedEpisodeOfCare:
          typedEpisodeOfCare.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EventDefinition typedEventDefinition:
          typedEventDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Evidence typedEvidence:
          typedEvidence.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.EvidenceVariable typedEvidenceVariable:
          typedEvidenceVariable.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ExampleScenario typedExampleScenario:
          typedExampleScenario.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ExplanationOfBenefit typedExplanationOfBenefit:
          typedExplanationOfBenefit.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.FamilyMemberHistory typedFamilyMemberHistory:
          typedFamilyMemberHistory.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Flag typedFlag:
          typedFlag.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Goal typedGoal:
          typedGoal.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.GraphDefinition typedGraphDefinition:
          typedGraphDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Group typedGroup:
          typedGroup.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.GuidanceResponse typedGuidanceResponse:
          typedGuidanceResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.HealthcareService typedHealthcareService:
          typedHealthcareService.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ImagingStudy typedImagingStudy:
          typedImagingStudy.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Immunization typedImmunization:
          typedImmunization.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ImmunizationEvaluation typedImmunizationEvaluation:
          typedImmunizationEvaluation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ImmunizationRecommendation typedImmunizationRecommendation:
          typedImmunizationRecommendation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ImplementationGuide typedImplementationGuide:
          typedImplementationGuide.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.InsurancePlan typedInsurancePlan:
          typedInsurancePlan.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Invoice typedInvoice:
          typedInvoice.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Library typedLibrary:
          typedLibrary.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Linkage typedLinkage:
          typedLinkage.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.List typedList:
          typedList.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Location typedLocation:
          typedLocation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Measure typedMeasure:
          typedMeasure.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MeasureReport typedMeasureReport:
          typedMeasureReport.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Media typedMedia:
          typedMedia.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Medication typedMedication:
          typedMedication.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicationAdministration typedMedicationAdministration:
          typedMedicationAdministration.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicationDispense typedMedicationDispense:
          typedMedicationDispense.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicationKnowledge typedMedicationKnowledge:
          typedMedicationKnowledge.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicationRequest typedMedicationRequest:
          typedMedicationRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicationStatement typedMedicationStatement:
          typedMedicationStatement.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProduct typedMedicinalProduct:
          typedMedicinalProduct.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductAuthorization typedMedicinalProductAuthorization:
          typedMedicinalProductAuthorization.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductContraindication typedMedicinalProductContraindication:
          typedMedicinalProductContraindication.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductIndication typedMedicinalProductIndication:
          typedMedicinalProductIndication.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductIngredient typedMedicinalProductIngredient:
          typedMedicinalProductIngredient.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductInteraction typedMedicinalProductInteraction:
          typedMedicinalProductInteraction.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductManufactured typedMedicinalProductManufactured:
          typedMedicinalProductManufactured.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductPackaged typedMedicinalProductPackaged:
          typedMedicinalProductPackaged.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductPharmaceutical typedMedicinalProductPharmaceutical:
          typedMedicinalProductPharmaceutical.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MedicinalProductUndesirableEffect typedMedicinalProductUndesirableEffect:
          typedMedicinalProductUndesirableEffect.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MessageDefinition typedMessageDefinition:
          typedMessageDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MessageHeader typedMessageHeader:
          typedMessageHeader.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.MolecularSequence typedMolecularSequence:
          typedMolecularSequence.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.NamingSystem typedNamingSystem:
          typedNamingSystem.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.NutritionOrder typedNutritionOrder:
          typedNutritionOrder.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Observation typedObservation:
          typedObservation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ObservationDefinition typedObservationDefinition:
          typedObservationDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.OperationDefinition typedOperationDefinition:
          typedOperationDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.OperationOutcome typedOperationOutcome:
          typedOperationOutcome.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Organization typedOrganization:
          typedOrganization.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.OrganizationAffiliation typedOrganizationAffiliation:
          typedOrganizationAffiliation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Parameters typedParameters:
          typedParameters.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Patient typedPatient:
          typedPatient.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.PaymentNotice typedPaymentNotice:
          typedPaymentNotice.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.PaymentReconciliation typedPaymentReconciliation:
          typedPaymentReconciliation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Person typedPerson:
          typedPerson.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.PlanDefinition typedPlanDefinition:
          typedPlanDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Practitioner typedPractitioner:
          typedPractitioner.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.PractitionerRole typedPractitionerRole:
          typedPractitionerRole.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Procedure typedProcedure:
          typedProcedure.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Provenance typedProvenance:
          typedProvenance.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Questionnaire typedQuestionnaire:
          typedQuestionnaire.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.QuestionnaireResponse typedQuestionnaireResponse:
          typedQuestionnaireResponse.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.RelatedPerson typedRelatedPerson:
          typedRelatedPerson.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.RequestGroup typedRequestGroup:
          typedRequestGroup.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ResearchDefinition typedResearchDefinition:
          typedResearchDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ResearchElementDefinition typedResearchElementDefinition:
          typedResearchElementDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ResearchStudy typedResearchStudy:
          typedResearchStudy.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ResearchSubject typedResearchSubject:
          typedResearchSubject.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.RiskAssessment typedRiskAssessment:
          typedRiskAssessment.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.RiskEvidenceSynthesis typedRiskEvidenceSynthesis:
          typedRiskEvidenceSynthesis.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Schedule typedSchedule:
          typedSchedule.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SearchParameter typedSearchParameter:
          typedSearchParameter.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ServiceRequest typedServiceRequest:
          typedServiceRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Slot typedSlot:
          typedSlot.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Specimen typedSpecimen:
          typedSpecimen.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SpecimenDefinition typedSpecimenDefinition:
          typedSpecimenDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.StructureDefinition typedStructureDefinition:
          typedStructureDefinition.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.StructureMap typedStructureMap:
          typedStructureMap.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Subscription typedSubscription:
          typedSubscription.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Substance typedSubstance:
          typedSubstance.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstanceNucleicAcid typedSubstanceNucleicAcid:
          typedSubstanceNucleicAcid.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstancePolymer typedSubstancePolymer:
          typedSubstancePolymer.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstanceProtein typedSubstanceProtein:
          typedSubstanceProtein.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstanceReferenceInformation typedSubstanceReferenceInformation:
          typedSubstanceReferenceInformation.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstanceSourceMaterial typedSubstanceSourceMaterial:
          typedSubstanceSourceMaterial.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SubstanceSpecification typedSubstanceSpecification:
          typedSubstanceSpecification.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SupplyDelivery typedSupplyDelivery:
          typedSupplyDelivery.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.SupplyRequest typedSupplyRequest:
          typedSupplyRequest.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.Task typedTask:
          typedTask.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.TerminologyCapabilities typedTerminologyCapabilities:
          typedTerminologyCapabilities.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.TestReport typedTestReport:
          typedTestReport.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.TestScript typedTestScript:
          typedTestScript.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.ValueSet typedValueSet:
          typedValueSet.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.VerificationResult typedVerificationResult:
          typedVerificationResult.SerializeJson(writer, options, true);
          break;
        case Hl7.Fhir.Model.VisionPrescription typedVisionPrescription:
          typedVisionPrescription.SerializeJson(writer, options, true);
          break;
      }

      writer.Flush();
    }

    /// <summary>
    /// Sub-function for simpler handling of reader switching.
    /// </summary>
    public static Resource DispatchDeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options, string resourceType)
    {
      object target;
      switch (resourceType)
      {
        case "Account":
          target = new Hl7.Fhir.Model.Account();
          ((Hl7.Fhir.Model.Account)target).DeserializeJson(ref reader, options);
          break;
        case "ActivityDefinition":
          target = new Hl7.Fhir.Model.ActivityDefinition();
          ((Hl7.Fhir.Model.ActivityDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "AdverseEvent":
          target = new Hl7.Fhir.Model.AdverseEvent();
          ((Hl7.Fhir.Model.AdverseEvent)target).DeserializeJson(ref reader, options);
          break;
        case "AllergyIntolerance":
          target = new Hl7.Fhir.Model.AllergyIntolerance();
          ((Hl7.Fhir.Model.AllergyIntolerance)target).DeserializeJson(ref reader, options);
          break;
        case "Appointment":
          target = new Hl7.Fhir.Model.Appointment();
          ((Hl7.Fhir.Model.Appointment)target).DeserializeJson(ref reader, options);
          break;
        case "AppointmentResponse":
          target = new Hl7.Fhir.Model.AppointmentResponse();
          ((Hl7.Fhir.Model.AppointmentResponse)target).DeserializeJson(ref reader, options);
          break;
        case "AuditEvent":
          target = new Hl7.Fhir.Model.AuditEvent();
          ((Hl7.Fhir.Model.AuditEvent)target).DeserializeJson(ref reader, options);
          break;
        case "Basic":
          target = new Hl7.Fhir.Model.Basic();
          ((Hl7.Fhir.Model.Basic)target).DeserializeJson(ref reader, options);
          break;
        case "Binary":
          target = new Hl7.Fhir.Model.Binary();
          ((Hl7.Fhir.Model.Binary)target).DeserializeJson(ref reader, options);
          break;
        case "BiologicallyDerivedProduct":
          target = new Hl7.Fhir.Model.BiologicallyDerivedProduct();
          ((Hl7.Fhir.Model.BiologicallyDerivedProduct)target).DeserializeJson(ref reader, options);
          break;
        case "BodyStructure":
          target = new Hl7.Fhir.Model.BodyStructure();
          ((Hl7.Fhir.Model.BodyStructure)target).DeserializeJson(ref reader, options);
          break;
        case "Bundle":
          target = new Hl7.Fhir.Model.Bundle();
          ((Hl7.Fhir.Model.Bundle)target).DeserializeJson(ref reader, options);
          break;
        case "CapabilityStatement":
          target = new Hl7.Fhir.Model.CapabilityStatement();
          ((Hl7.Fhir.Model.CapabilityStatement)target).DeserializeJson(ref reader, options);
          break;
        case "CarePlan":
          target = new Hl7.Fhir.Model.CarePlan();
          ((Hl7.Fhir.Model.CarePlan)target).DeserializeJson(ref reader, options);
          break;
        case "CareTeam":
          target = new Hl7.Fhir.Model.CareTeam();
          ((Hl7.Fhir.Model.CareTeam)target).DeserializeJson(ref reader, options);
          break;
        case "CatalogEntry":
          target = new Hl7.Fhir.Model.CatalogEntry();
          ((Hl7.Fhir.Model.CatalogEntry)target).DeserializeJson(ref reader, options);
          break;
        case "ChargeItem":
          target = new Hl7.Fhir.Model.ChargeItem();
          ((Hl7.Fhir.Model.ChargeItem)target).DeserializeJson(ref reader, options);
          break;
        case "ChargeItemDefinition":
          target = new Hl7.Fhir.Model.ChargeItemDefinition();
          ((Hl7.Fhir.Model.ChargeItemDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Claim":
          target = new Hl7.Fhir.Model.Claim();
          ((Hl7.Fhir.Model.Claim)target).DeserializeJson(ref reader, options);
          break;
        case "ClaimResponse":
          target = new Hl7.Fhir.Model.ClaimResponse();
          ((Hl7.Fhir.Model.ClaimResponse)target).DeserializeJson(ref reader, options);
          break;
        case "ClinicalImpression":
          target = new Hl7.Fhir.Model.ClinicalImpression();
          ((Hl7.Fhir.Model.ClinicalImpression)target).DeserializeJson(ref reader, options);
          break;
        case "CodeSystem":
          target = new Hl7.Fhir.Model.CodeSystem();
          ((Hl7.Fhir.Model.CodeSystem)target).DeserializeJson(ref reader, options);
          break;
        case "Communication":
          target = new Hl7.Fhir.Model.Communication();
          ((Hl7.Fhir.Model.Communication)target).DeserializeJson(ref reader, options);
          break;
        case "CommunicationRequest":
          target = new Hl7.Fhir.Model.CommunicationRequest();
          ((Hl7.Fhir.Model.CommunicationRequest)target).DeserializeJson(ref reader, options);
          break;
        case "CompartmentDefinition":
          target = new Hl7.Fhir.Model.CompartmentDefinition();
          ((Hl7.Fhir.Model.CompartmentDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Composition":
          target = new Hl7.Fhir.Model.Composition();
          ((Hl7.Fhir.Model.Composition)target).DeserializeJson(ref reader, options);
          break;
        case "ConceptMap":
          target = new Hl7.Fhir.Model.ConceptMap();
          ((Hl7.Fhir.Model.ConceptMap)target).DeserializeJson(ref reader, options);
          break;
        case "Condition":
          target = new Hl7.Fhir.Model.Condition();
          ((Hl7.Fhir.Model.Condition)target).DeserializeJson(ref reader, options);
          break;
        case "Consent":
          target = new Hl7.Fhir.Model.Consent();
          ((Hl7.Fhir.Model.Consent)target).DeserializeJson(ref reader, options);
          break;
        case "Contract":
          target = new Hl7.Fhir.Model.Contract();
          ((Hl7.Fhir.Model.Contract)target).DeserializeJson(ref reader, options);
          break;
        case "Coverage":
          target = new Hl7.Fhir.Model.Coverage();
          ((Hl7.Fhir.Model.Coverage)target).DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityRequest":
          target = new Hl7.Fhir.Model.CoverageEligibilityRequest();
          ((Hl7.Fhir.Model.CoverageEligibilityRequest)target).DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityResponse":
          target = new Hl7.Fhir.Model.CoverageEligibilityResponse();
          ((Hl7.Fhir.Model.CoverageEligibilityResponse)target).DeserializeJson(ref reader, options);
          break;
        case "DetectedIssue":
          target = new Hl7.Fhir.Model.DetectedIssue();
          ((Hl7.Fhir.Model.DetectedIssue)target).DeserializeJson(ref reader, options);
          break;
        case "Device":
          target = new Hl7.Fhir.Model.Device();
          ((Hl7.Fhir.Model.Device)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceDefinition":
          target = new Hl7.Fhir.Model.DeviceDefinition();
          ((Hl7.Fhir.Model.DeviceDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceMetric":
          target = new Hl7.Fhir.Model.DeviceMetric();
          ((Hl7.Fhir.Model.DeviceMetric)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceRequest":
          target = new Hl7.Fhir.Model.DeviceRequest();
          ((Hl7.Fhir.Model.DeviceRequest)target).DeserializeJson(ref reader, options);
          break;
        case "DeviceUseStatement":
          target = new Hl7.Fhir.Model.DeviceUseStatement();
          ((Hl7.Fhir.Model.DeviceUseStatement)target).DeserializeJson(ref reader, options);
          break;
        case "DiagnosticReport":
          target = new Hl7.Fhir.Model.DiagnosticReport();
          ((Hl7.Fhir.Model.DiagnosticReport)target).DeserializeJson(ref reader, options);
          break;
        case "DocumentManifest":
          target = new Hl7.Fhir.Model.DocumentManifest();
          ((Hl7.Fhir.Model.DocumentManifest)target).DeserializeJson(ref reader, options);
          break;
        case "DocumentReference":
          target = new Hl7.Fhir.Model.DocumentReference();
          ((Hl7.Fhir.Model.DocumentReference)target).DeserializeJson(ref reader, options);
          break;
        case "EffectEvidenceSynthesis":
          target = new Hl7.Fhir.Model.EffectEvidenceSynthesis();
          ((Hl7.Fhir.Model.EffectEvidenceSynthesis)target).DeserializeJson(ref reader, options);
          break;
        case "Encounter":
          target = new Hl7.Fhir.Model.Encounter();
          ((Hl7.Fhir.Model.Encounter)target).DeserializeJson(ref reader, options);
          break;
        case "Endpoint":
          target = new Hl7.Fhir.Model.Endpoint();
          ((Hl7.Fhir.Model.Endpoint)target).DeserializeJson(ref reader, options);
          break;
        case "EnrollmentRequest":
          target = new Hl7.Fhir.Model.EnrollmentRequest();
          ((Hl7.Fhir.Model.EnrollmentRequest)target).DeserializeJson(ref reader, options);
          break;
        case "EnrollmentResponse":
          target = new Hl7.Fhir.Model.EnrollmentResponse();
          ((Hl7.Fhir.Model.EnrollmentResponse)target).DeserializeJson(ref reader, options);
          break;
        case "EpisodeOfCare":
          target = new Hl7.Fhir.Model.EpisodeOfCare();
          ((Hl7.Fhir.Model.EpisodeOfCare)target).DeserializeJson(ref reader, options);
          break;
        case "EventDefinition":
          target = new Hl7.Fhir.Model.EventDefinition();
          ((Hl7.Fhir.Model.EventDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Evidence":
          target = new Hl7.Fhir.Model.Evidence();
          ((Hl7.Fhir.Model.Evidence)target).DeserializeJson(ref reader, options);
          break;
        case "EvidenceVariable":
          target = new Hl7.Fhir.Model.EvidenceVariable();
          ((Hl7.Fhir.Model.EvidenceVariable)target).DeserializeJson(ref reader, options);
          break;
        case "ExampleScenario":
          target = new Hl7.Fhir.Model.ExampleScenario();
          ((Hl7.Fhir.Model.ExampleScenario)target).DeserializeJson(ref reader, options);
          break;
        case "ExplanationOfBenefit":
          target = new Hl7.Fhir.Model.ExplanationOfBenefit();
          ((Hl7.Fhir.Model.ExplanationOfBenefit)target).DeserializeJson(ref reader, options);
          break;
        case "FamilyMemberHistory":
          target = new Hl7.Fhir.Model.FamilyMemberHistory();
          ((Hl7.Fhir.Model.FamilyMemberHistory)target).DeserializeJson(ref reader, options);
          break;
        case "Flag":
          target = new Hl7.Fhir.Model.Flag();
          ((Hl7.Fhir.Model.Flag)target).DeserializeJson(ref reader, options);
          break;
        case "Goal":
          target = new Hl7.Fhir.Model.Goal();
          ((Hl7.Fhir.Model.Goal)target).DeserializeJson(ref reader, options);
          break;
        case "GraphDefinition":
          target = new Hl7.Fhir.Model.GraphDefinition();
          ((Hl7.Fhir.Model.GraphDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Group":
          target = new Hl7.Fhir.Model.Group();
          ((Hl7.Fhir.Model.Group)target).DeserializeJson(ref reader, options);
          break;
        case "GuidanceResponse":
          target = new Hl7.Fhir.Model.GuidanceResponse();
          ((Hl7.Fhir.Model.GuidanceResponse)target).DeserializeJson(ref reader, options);
          break;
        case "HealthcareService":
          target = new Hl7.Fhir.Model.HealthcareService();
          ((Hl7.Fhir.Model.HealthcareService)target).DeserializeJson(ref reader, options);
          break;
        case "ImagingStudy":
          target = new Hl7.Fhir.Model.ImagingStudy();
          ((Hl7.Fhir.Model.ImagingStudy)target).DeserializeJson(ref reader, options);
          break;
        case "Immunization":
          target = new Hl7.Fhir.Model.Immunization();
          ((Hl7.Fhir.Model.Immunization)target).DeserializeJson(ref reader, options);
          break;
        case "ImmunizationEvaluation":
          target = new Hl7.Fhir.Model.ImmunizationEvaluation();
          ((Hl7.Fhir.Model.ImmunizationEvaluation)target).DeserializeJson(ref reader, options);
          break;
        case "ImmunizationRecommendation":
          target = new Hl7.Fhir.Model.ImmunizationRecommendation();
          ((Hl7.Fhir.Model.ImmunizationRecommendation)target).DeserializeJson(ref reader, options);
          break;
        case "ImplementationGuide":
          target = new Hl7.Fhir.Model.ImplementationGuide();
          ((Hl7.Fhir.Model.ImplementationGuide)target).DeserializeJson(ref reader, options);
          break;
        case "InsurancePlan":
          target = new Hl7.Fhir.Model.InsurancePlan();
          ((Hl7.Fhir.Model.InsurancePlan)target).DeserializeJson(ref reader, options);
          break;
        case "Invoice":
          target = new Hl7.Fhir.Model.Invoice();
          ((Hl7.Fhir.Model.Invoice)target).DeserializeJson(ref reader, options);
          break;
        case "Library":
          target = new Hl7.Fhir.Model.Library();
          ((Hl7.Fhir.Model.Library)target).DeserializeJson(ref reader, options);
          break;
        case "Linkage":
          target = new Hl7.Fhir.Model.Linkage();
          ((Hl7.Fhir.Model.Linkage)target).DeserializeJson(ref reader, options);
          break;
        case "List":
          target = new Hl7.Fhir.Model.List();
          ((Hl7.Fhir.Model.List)target).DeserializeJson(ref reader, options);
          break;
        case "Location":
          target = new Hl7.Fhir.Model.Location();
          ((Hl7.Fhir.Model.Location)target).DeserializeJson(ref reader, options);
          break;
        case "Measure":
          target = new Hl7.Fhir.Model.Measure();
          ((Hl7.Fhir.Model.Measure)target).DeserializeJson(ref reader, options);
          break;
        case "MeasureReport":
          target = new Hl7.Fhir.Model.MeasureReport();
          ((Hl7.Fhir.Model.MeasureReport)target).DeserializeJson(ref reader, options);
          break;
        case "Media":
          target = new Hl7.Fhir.Model.Media();
          ((Hl7.Fhir.Model.Media)target).DeserializeJson(ref reader, options);
          break;
        case "Medication":
          target = new Hl7.Fhir.Model.Medication();
          ((Hl7.Fhir.Model.Medication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationAdministration":
          target = new Hl7.Fhir.Model.MedicationAdministration();
          ((Hl7.Fhir.Model.MedicationAdministration)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationDispense":
          target = new Hl7.Fhir.Model.MedicationDispense();
          ((Hl7.Fhir.Model.MedicationDispense)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationKnowledge":
          target = new Hl7.Fhir.Model.MedicationKnowledge();
          ((Hl7.Fhir.Model.MedicationKnowledge)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationRequest":
          target = new Hl7.Fhir.Model.MedicationRequest();
          ((Hl7.Fhir.Model.MedicationRequest)target).DeserializeJson(ref reader, options);
          break;
        case "MedicationStatement":
          target = new Hl7.Fhir.Model.MedicationStatement();
          ((Hl7.Fhir.Model.MedicationStatement)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProduct":
          target = new Hl7.Fhir.Model.MedicinalProduct();
          ((Hl7.Fhir.Model.MedicinalProduct)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductAuthorization":
          target = new Hl7.Fhir.Model.MedicinalProductAuthorization();
          ((Hl7.Fhir.Model.MedicinalProductAuthorization)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductContraindication":
          target = new Hl7.Fhir.Model.MedicinalProductContraindication();
          ((Hl7.Fhir.Model.MedicinalProductContraindication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIndication":
          target = new Hl7.Fhir.Model.MedicinalProductIndication();
          ((Hl7.Fhir.Model.MedicinalProductIndication)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductIngredient":
          target = new Hl7.Fhir.Model.MedicinalProductIngredient();
          ((Hl7.Fhir.Model.MedicinalProductIngredient)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductInteraction":
          target = new Hl7.Fhir.Model.MedicinalProductInteraction();
          ((Hl7.Fhir.Model.MedicinalProductInteraction)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductManufactured":
          target = new Hl7.Fhir.Model.MedicinalProductManufactured();
          ((Hl7.Fhir.Model.MedicinalProductManufactured)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPackaged":
          target = new Hl7.Fhir.Model.MedicinalProductPackaged();
          ((Hl7.Fhir.Model.MedicinalProductPackaged)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductPharmaceutical":
          target = new Hl7.Fhir.Model.MedicinalProductPharmaceutical();
          ((Hl7.Fhir.Model.MedicinalProductPharmaceutical)target).DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductUndesirableEffect":
          target = new Hl7.Fhir.Model.MedicinalProductUndesirableEffect();
          ((Hl7.Fhir.Model.MedicinalProductUndesirableEffect)target).DeserializeJson(ref reader, options);
          break;
        case "MessageDefinition":
          target = new Hl7.Fhir.Model.MessageDefinition();
          ((Hl7.Fhir.Model.MessageDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "MessageHeader":
          target = new Hl7.Fhir.Model.MessageHeader();
          ((Hl7.Fhir.Model.MessageHeader)target).DeserializeJson(ref reader, options);
          break;
        case "MolecularSequence":
          target = new Hl7.Fhir.Model.MolecularSequence();
          ((Hl7.Fhir.Model.MolecularSequence)target).DeserializeJson(ref reader, options);
          break;
        case "NamingSystem":
          target = new Hl7.Fhir.Model.NamingSystem();
          ((Hl7.Fhir.Model.NamingSystem)target).DeserializeJson(ref reader, options);
          break;
        case "NutritionOrder":
          target = new Hl7.Fhir.Model.NutritionOrder();
          ((Hl7.Fhir.Model.NutritionOrder)target).DeserializeJson(ref reader, options);
          break;
        case "Observation":
          target = new Hl7.Fhir.Model.Observation();
          ((Hl7.Fhir.Model.Observation)target).DeserializeJson(ref reader, options);
          break;
        case "ObservationDefinition":
          target = new Hl7.Fhir.Model.ObservationDefinition();
          ((Hl7.Fhir.Model.ObservationDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "OperationDefinition":
          target = new Hl7.Fhir.Model.OperationDefinition();
          ((Hl7.Fhir.Model.OperationDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "OperationOutcome":
          target = new Hl7.Fhir.Model.OperationOutcome();
          ((Hl7.Fhir.Model.OperationOutcome)target).DeserializeJson(ref reader, options);
          break;
        case "Organization":
          target = new Hl7.Fhir.Model.Organization();
          ((Hl7.Fhir.Model.Organization)target).DeserializeJson(ref reader, options);
          break;
        case "OrganizationAffiliation":
          target = new Hl7.Fhir.Model.OrganizationAffiliation();
          ((Hl7.Fhir.Model.OrganizationAffiliation)target).DeserializeJson(ref reader, options);
          break;
        case "Parameters":
          target = new Hl7.Fhir.Model.Parameters();
          ((Hl7.Fhir.Model.Parameters)target).DeserializeJson(ref reader, options);
          break;
        case "Patient":
          target = new Hl7.Fhir.Model.Patient();
          ((Hl7.Fhir.Model.Patient)target).DeserializeJson(ref reader, options);
          break;
        case "PaymentNotice":
          target = new Hl7.Fhir.Model.PaymentNotice();
          ((Hl7.Fhir.Model.PaymentNotice)target).DeserializeJson(ref reader, options);
          break;
        case "PaymentReconciliation":
          target = new Hl7.Fhir.Model.PaymentReconciliation();
          ((Hl7.Fhir.Model.PaymentReconciliation)target).DeserializeJson(ref reader, options);
          break;
        case "Person":
          target = new Hl7.Fhir.Model.Person();
          ((Hl7.Fhir.Model.Person)target).DeserializeJson(ref reader, options);
          break;
        case "PlanDefinition":
          target = new Hl7.Fhir.Model.PlanDefinition();
          ((Hl7.Fhir.Model.PlanDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "Practitioner":
          target = new Hl7.Fhir.Model.Practitioner();
          ((Hl7.Fhir.Model.Practitioner)target).DeserializeJson(ref reader, options);
          break;
        case "PractitionerRole":
          target = new Hl7.Fhir.Model.PractitionerRole();
          ((Hl7.Fhir.Model.PractitionerRole)target).DeserializeJson(ref reader, options);
          break;
        case "Procedure":
          target = new Hl7.Fhir.Model.Procedure();
          ((Hl7.Fhir.Model.Procedure)target).DeserializeJson(ref reader, options);
          break;
        case "Provenance":
          target = new Hl7.Fhir.Model.Provenance();
          ((Hl7.Fhir.Model.Provenance)target).DeserializeJson(ref reader, options);
          break;
        case "Questionnaire":
          target = new Hl7.Fhir.Model.Questionnaire();
          ((Hl7.Fhir.Model.Questionnaire)target).DeserializeJson(ref reader, options);
          break;
        case "QuestionnaireResponse":
          target = new Hl7.Fhir.Model.QuestionnaireResponse();
          ((Hl7.Fhir.Model.QuestionnaireResponse)target).DeserializeJson(ref reader, options);
          break;
        case "RelatedPerson":
          target = new Hl7.Fhir.Model.RelatedPerson();
          ((Hl7.Fhir.Model.RelatedPerson)target).DeserializeJson(ref reader, options);
          break;
        case "RequestGroup":
          target = new Hl7.Fhir.Model.RequestGroup();
          ((Hl7.Fhir.Model.RequestGroup)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchDefinition":
          target = new Hl7.Fhir.Model.ResearchDefinition();
          ((Hl7.Fhir.Model.ResearchDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchElementDefinition":
          target = new Hl7.Fhir.Model.ResearchElementDefinition();
          ((Hl7.Fhir.Model.ResearchElementDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchStudy":
          target = new Hl7.Fhir.Model.ResearchStudy();
          ((Hl7.Fhir.Model.ResearchStudy)target).DeserializeJson(ref reader, options);
          break;
        case "ResearchSubject":
          target = new Hl7.Fhir.Model.ResearchSubject();
          ((Hl7.Fhir.Model.ResearchSubject)target).DeserializeJson(ref reader, options);
          break;
        case "RiskAssessment":
          target = new Hl7.Fhir.Model.RiskAssessment();
          ((Hl7.Fhir.Model.RiskAssessment)target).DeserializeJson(ref reader, options);
          break;
        case "RiskEvidenceSynthesis":
          target = new Hl7.Fhir.Model.RiskEvidenceSynthesis();
          ((Hl7.Fhir.Model.RiskEvidenceSynthesis)target).DeserializeJson(ref reader, options);
          break;
        case "Schedule":
          target = new Hl7.Fhir.Model.Schedule();
          ((Hl7.Fhir.Model.Schedule)target).DeserializeJson(ref reader, options);
          break;
        case "SearchParameter":
          target = new Hl7.Fhir.Model.SearchParameter();
          ((Hl7.Fhir.Model.SearchParameter)target).DeserializeJson(ref reader, options);
          break;
        case "ServiceRequest":
          target = new Hl7.Fhir.Model.ServiceRequest();
          ((Hl7.Fhir.Model.ServiceRequest)target).DeserializeJson(ref reader, options);
          break;
        case "Slot":
          target = new Hl7.Fhir.Model.Slot();
          ((Hl7.Fhir.Model.Slot)target).DeserializeJson(ref reader, options);
          break;
        case "Specimen":
          target = new Hl7.Fhir.Model.Specimen();
          ((Hl7.Fhir.Model.Specimen)target).DeserializeJson(ref reader, options);
          break;
        case "SpecimenDefinition":
          target = new Hl7.Fhir.Model.SpecimenDefinition();
          ((Hl7.Fhir.Model.SpecimenDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "StructureDefinition":
          target = new Hl7.Fhir.Model.StructureDefinition();
          ((Hl7.Fhir.Model.StructureDefinition)target).DeserializeJson(ref reader, options);
          break;
        case "StructureMap":
          target = new Hl7.Fhir.Model.StructureMap();
          ((Hl7.Fhir.Model.StructureMap)target).DeserializeJson(ref reader, options);
          break;
        case "Subscription":
          target = new Hl7.Fhir.Model.Subscription();
          ((Hl7.Fhir.Model.Subscription)target).DeserializeJson(ref reader, options);
          break;
        case "Substance":
          target = new Hl7.Fhir.Model.Substance();
          ((Hl7.Fhir.Model.Substance)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceNucleicAcid":
          target = new Hl7.Fhir.Model.SubstanceNucleicAcid();
          ((Hl7.Fhir.Model.SubstanceNucleicAcid)target).DeserializeJson(ref reader, options);
          break;
        case "SubstancePolymer":
          target = new Hl7.Fhir.Model.SubstancePolymer();
          ((Hl7.Fhir.Model.SubstancePolymer)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceProtein":
          target = new Hl7.Fhir.Model.SubstanceProtein();
          ((Hl7.Fhir.Model.SubstanceProtein)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceReferenceInformation":
          target = new Hl7.Fhir.Model.SubstanceReferenceInformation();
          ((Hl7.Fhir.Model.SubstanceReferenceInformation)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceSourceMaterial":
          target = new Hl7.Fhir.Model.SubstanceSourceMaterial();
          ((Hl7.Fhir.Model.SubstanceSourceMaterial)target).DeserializeJson(ref reader, options);
          break;
        case "SubstanceSpecification":
          target = new Hl7.Fhir.Model.SubstanceSpecification();
          ((Hl7.Fhir.Model.SubstanceSpecification)target).DeserializeJson(ref reader, options);
          break;
        case "SupplyDelivery":
          target = new Hl7.Fhir.Model.SupplyDelivery();
          ((Hl7.Fhir.Model.SupplyDelivery)target).DeserializeJson(ref reader, options);
          break;
        case "SupplyRequest":
          target = new Hl7.Fhir.Model.SupplyRequest();
          ((Hl7.Fhir.Model.SupplyRequest)target).DeserializeJson(ref reader, options);
          break;
        case "Task":
          target = new Hl7.Fhir.Model.Task();
          ((Hl7.Fhir.Model.Task)target).DeserializeJson(ref reader, options);
          break;
        case "TerminologyCapabilities":
          target = new Hl7.Fhir.Model.TerminologyCapabilities();
          ((Hl7.Fhir.Model.TerminologyCapabilities)target).DeserializeJson(ref reader, options);
          break;
        case "TestReport":
          target = new Hl7.Fhir.Model.TestReport();
          ((Hl7.Fhir.Model.TestReport)target).DeserializeJson(ref reader, options);
          break;
        case "TestScript":
          target = new Hl7.Fhir.Model.TestScript();
          ((Hl7.Fhir.Model.TestScript)target).DeserializeJson(ref reader, options);
          break;
        case "ValueSet":
          target = new Hl7.Fhir.Model.ValueSet();
          ((Hl7.Fhir.Model.ValueSet)target).DeserializeJson(ref reader, options);
          break;
        case "VerificationResult":
          target = new Hl7.Fhir.Model.VerificationResult();
          ((Hl7.Fhir.Model.VerificationResult)target).DeserializeJson(ref reader, options);
          break;
        case "VisionPrescription":
          target = new Hl7.Fhir.Model.VisionPrescription();
          ((Hl7.Fhir.Model.VisionPrescription)target).DeserializeJson(ref reader, options);
          break;
        default:
          throw new Exception($"Cannot parse resource type: {resourceType}");
      }

      return (Resource)target;
    }
  }
}
// end of file
