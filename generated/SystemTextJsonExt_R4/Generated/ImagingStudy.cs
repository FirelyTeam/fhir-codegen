// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ImagingStudy
  /// </summary>
  public static class ImagingStudySerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ImagingStudy into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImagingStudy current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ImagingStudy");
      // Complex: ImagingStudy, Export: ImagingStudy, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if ((current.Modality != null) && (current.Modality.Count != 0))
      {
        writer.WritePropertyName("modality");
        writer.WriteStartArray();
        foreach (Coding val in current.Modality)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Subject != null)
      {
        writer.WritePropertyName("subject");
        current.Subject.SerializeJson(writer, options);
      }

      if (current.Encounter != null)
      {
        writer.WritePropertyName("encounter");
        current.Encounter.SerializeJson(writer, options);
      }

      if (current.StartedElement != null)
      {
        if (!string.IsNullOrEmpty(current.StartedElement.Value))
        {
          writer.WriteString("started",current.StartedElement.Value);
        }
        if (current.StartedElement.HasExtensions() || (!string.IsNullOrEmpty(current.StartedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_started",false,current.StartedElement.Extension,current.StartedElement.ElementId);
        }
      }

      if ((current.BasedOn != null) && (current.BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.BasedOn)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Referrer != null)
      {
        writer.WritePropertyName("referrer");
        current.Referrer.SerializeJson(writer, options);
      }

      if ((current.Interpreter != null) && (current.Interpreter.Count != 0))
      {
        writer.WritePropertyName("interpreter");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Interpreter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NumberOfSeriesElement != null)
      {
        if (current.NumberOfSeriesElement.Value != null)
        {
          writer.WriteNumber("numberOfSeries",(int)current.NumberOfSeriesElement.Value);
        }
        if (current.NumberOfSeriesElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberOfSeriesElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_numberOfSeries",false,current.NumberOfSeriesElement.Extension,current.NumberOfSeriesElement.ElementId);
        }
      }

      if (current.NumberOfInstancesElement != null)
      {
        if (current.NumberOfInstancesElement.Value != null)
        {
          writer.WriteNumber("numberOfInstances",(int)current.NumberOfInstancesElement.Value);
        }
        if (current.NumberOfInstancesElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberOfInstancesElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_numberOfInstances",false,current.NumberOfInstancesElement.Extension,current.NumberOfInstancesElement.ElementId);
        }
      }

      if (current.ProcedureReference != null)
      {
        writer.WritePropertyName("procedureReference");
        current.ProcedureReference.SerializeJson(writer, options);
      }

      if ((current.ProcedureCode != null) && (current.ProcedureCode.Count != 0))
      {
        writer.WritePropertyName("procedureCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProcedureCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if ((current.ReasonCode != null) && (current.ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ReasonCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonReference != null) && (current.ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ReasonReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.Series != null) && (current.Series.Count != 0))
      {
        writer.WritePropertyName("series");
        writer.WriteStartArray();
        foreach (ImagingStudy.SeriesComponent val in current.Series)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImagingStudy current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImagingStudy >>> ImagingStudy.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImagingStudy: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImagingStudy current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "modality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'modality' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modality = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Modality = new Hl7.Fhir.Model.Coding();
            v_Modality.DeserializeJson(ref reader, options);
            current.Modality.Add(v_Modality);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'modality' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modality.Count == 0)
          {
            current.Modality = null;
          }
          break;

        case "subject":
          current.Subject = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Subject).DeserializeJson(ref reader, options);
          break;

        case "encounter":
          current.Encounter = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Encounter).DeserializeJson(ref reader, options);
          break;

        case "started":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.StartedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_started":
          if (current.StartedElement == null) { current.StartedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.StartedElement).DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'basedOn' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.BasedOn = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_BasedOn = new Hl7.Fhir.Model.ResourceReference();
            v_BasedOn.DeserializeJson(ref reader, options);
            current.BasedOn.Add(v_BasedOn);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'basedOn' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.BasedOn.Count == 0)
          {
            current.BasedOn = null;
          }
          break;

        case "referrer":
          current.Referrer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Referrer).DeserializeJson(ref reader, options);
          break;

        case "interpreter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'interpreter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Interpreter = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Interpreter = new Hl7.Fhir.Model.ResourceReference();
            v_Interpreter.DeserializeJson(ref reader, options);
            current.Interpreter.Add(v_Interpreter);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'interpreter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Interpreter.Count == 0)
          {
            current.Interpreter = null;
          }
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'endpoint' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endpoint = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Endpoint = new Hl7.Fhir.Model.ResourceReference();
            v_Endpoint.DeserializeJson(ref reader, options);
            current.Endpoint.Add(v_Endpoint);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'endpoint' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }
          break;

        case "numberOfSeries":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfSeriesElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.NumberOfSeriesElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_numberOfSeries":
          if (current.NumberOfSeriesElement == null) { current.NumberOfSeriesElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfSeriesElement).DeserializeJson(ref reader, options);
          break;

        case "numberOfInstances":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfInstancesElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.NumberOfInstancesElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_numberOfInstances":
          if (current.NumberOfInstancesElement == null) { current.NumberOfInstancesElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfInstancesElement).DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          current.ProcedureReference = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ProcedureReference).DeserializeJson(ref reader, options);
          break;

        case "procedureCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'procedureCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProcedureCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProcedureCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProcedureCode.DeserializeJson(ref reader, options);
            current.ProcedureCode.Add(v_ProcedureCode);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'procedureCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcedureCode.Count == 0)
          {
            current.ProcedureCode = null;
          }
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'reasonCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ReasonCode.DeserializeJson(ref reader, options);
            current.ReasonCode.Add(v_ReasonCode);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'reasonCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonCode.Count == 0)
          {
            current.ReasonCode = null;
          }
          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'reasonReference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ReasonReference = new Hl7.Fhir.Model.ResourceReference();
            v_ReasonReference.DeserializeJson(ref reader, options);
            current.ReasonReference.Add(v_ReasonReference);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'reasonReference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonReference.Count == 0)
          {
            current.ReasonReference = null;
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "series":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImagingStudy error reading 'series' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Series = new List<ImagingStudy.SeriesComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImagingStudy.SeriesComponent v_Series = new Hl7.Fhir.Model.ImagingStudy.SeriesComponent();
            v_Series.DeserializeJson(ref reader, options);
            current.Series.Add(v_Series);

            if (!reader.Read())
            {
              throw new JsonException($"ImagingStudy error reading 'series' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Series.Count == 0)
          {
            current.Series = null;
          }
          break;

        // Complex: ImagingStudy, Export: ImagingStudy, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImagingStudy#Series into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImagingStudy.SeriesComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImagingStudy#Series, Export: SeriesComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.UidElement != null)
      {
        if (!string.IsNullOrEmpty(current.UidElement.Value))
        {
          writer.WriteString("uid",current.UidElement.Value);
        }
        if (current.UidElement.HasExtensions() || (!string.IsNullOrEmpty(current.UidElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_uid",false,current.UidElement.Extension,current.UidElement.ElementId);
        }
      }

      if (current.NumberElement != null)
      {
        if (current.NumberElement.Value != null)
        {
          writer.WriteNumber("number",(int)current.NumberElement.Value);
        }
        if (current.NumberElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_number",false,current.NumberElement.Extension,current.NumberElement.ElementId);
        }
      }

      if (current.Modality != null)
      {
        writer.WritePropertyName("modality");
        current.Modality.SerializeJson(writer, options);
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if (current.NumberOfInstancesElement != null)
      {
        if (current.NumberOfInstancesElement.Value != null)
        {
          writer.WriteNumber("numberOfInstances",(int)current.NumberOfInstancesElement.Value);
        }
        if (current.NumberOfInstancesElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberOfInstancesElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_numberOfInstances",false,current.NumberOfInstancesElement.Extension,current.NumberOfInstancesElement.ElementId);
        }
      }

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        current.BodySite.SerializeJson(writer, options);
      }

      if (current.Laterality != null)
      {
        writer.WritePropertyName("laterality");
        current.Laterality.SerializeJson(writer, options);
      }

      if ((current.Specimen != null) && (current.Specimen.Count != 0))
      {
        writer.WritePropertyName("specimen");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Specimen)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StartedElement != null)
      {
        if (!string.IsNullOrEmpty(current.StartedElement.Value))
        {
          writer.WriteString("started",current.StartedElement.Value);
        }
        if (current.StartedElement.HasExtensions() || (!string.IsNullOrEmpty(current.StartedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_started",false,current.StartedElement.Extension,current.StartedElement.ElementId);
        }
      }

      if ((current.Performer != null) && (current.Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();
        foreach (ImagingStudy.PerformerComponent val in current.Performer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Instance != null) && (current.Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();
        foreach (ImagingStudy.InstanceComponent val in current.Instance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Series
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImagingStudy.SeriesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImagingStudy.SeriesComponent >>> ImagingStudy#Series.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImagingStudy.SeriesComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Series
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImagingStudy.SeriesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uid":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UidElement = new Id();
            reader.Skip();
          }
          else
          {
            current.UidElement = new Id(reader.GetString());
          }
          break;

        case "_uid":
          if (current.UidElement == null) { current.UidElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.UidElement).DeserializeJson(ref reader, options);
          break;

        case "number":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.NumberElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_number":
          if (current.NumberElement == null) { current.NumberElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberElement).DeserializeJson(ref reader, options);
          break;

        case "modality":
          current.Modality = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Modality).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "numberOfInstances":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfInstancesElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.NumberOfInstancesElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_numberOfInstances":
          if (current.NumberOfInstancesElement == null) { current.NumberOfInstancesElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfInstancesElement).DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SeriesComponent error reading 'endpoint' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endpoint = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Endpoint = new Hl7.Fhir.Model.ResourceReference();
            v_Endpoint.DeserializeJson(ref reader, options);
            current.Endpoint.Add(v_Endpoint);

            if (!reader.Read())
            {
              throw new JsonException($"SeriesComponent error reading 'endpoint' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "laterality":
          current.Laterality = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Laterality).DeserializeJson(ref reader, options);
          break;

        case "specimen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SeriesComponent error reading 'specimen' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Specimen = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Specimen = new Hl7.Fhir.Model.ResourceReference();
            v_Specimen.DeserializeJson(ref reader, options);
            current.Specimen.Add(v_Specimen);

            if (!reader.Read())
            {
              throw new JsonException($"SeriesComponent error reading 'specimen' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Specimen.Count == 0)
          {
            current.Specimen = null;
          }
          break;

        case "started":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.StartedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_started":
          if (current.StartedElement == null) { current.StartedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.StartedElement).DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SeriesComponent error reading 'performer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Performer = new List<ImagingStudy.PerformerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImagingStudy.PerformerComponent v_Performer = new Hl7.Fhir.Model.ImagingStudy.PerformerComponent();
            v_Performer.DeserializeJson(ref reader, options);
            current.Performer.Add(v_Performer);

            if (!reader.Read())
            {
              throw new JsonException($"SeriesComponent error reading 'performer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Performer.Count == 0)
          {
            current.Performer = null;
          }
          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SeriesComponent error reading 'instance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Instance = new List<ImagingStudy.InstanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImagingStudy.InstanceComponent v_Instance = new Hl7.Fhir.Model.ImagingStudy.InstanceComponent();
            v_Instance.DeserializeJson(ref reader, options);
            current.Instance.Add(v_Instance);

            if (!reader.Read())
            {
              throw new JsonException($"SeriesComponent error reading 'instance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Instance.Count == 0)
          {
            current.Instance = null;
          }
          break;

        // Complex: series, Export: SeriesComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImagingStudy#Performer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImagingStudy.PerformerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImagingStudy#Performer, Export: PerformerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Function != null)
      {
        writer.WritePropertyName("function");
        current.Function.SerializeJson(writer, options);
      }

      if (current.Actor != null)
      {
        writer.WritePropertyName("actor");
        current.Actor.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Performer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImagingStudy.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImagingStudy.PerformerComponent >>> ImagingStudy#Performer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImagingStudy.PerformerComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Performer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImagingStudy.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "function":
          current.Function = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Function).DeserializeJson(ref reader, options);
          break;

        case "actor":
          current.Actor = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Actor).DeserializeJson(ref reader, options);
          break;

        // Complex: performer, Export: PerformerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImagingStudy#Instance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImagingStudy.InstanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImagingStudy#Instance, Export: InstanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.UidElement != null)
      {
        if (!string.IsNullOrEmpty(current.UidElement.Value))
        {
          writer.WriteString("uid",current.UidElement.Value);
        }
        if (current.UidElement.HasExtensions() || (!string.IsNullOrEmpty(current.UidElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_uid",false,current.UidElement.Extension,current.UidElement.ElementId);
        }
      }

      if (current.SopClass != null)
      {
        writer.WritePropertyName("sopClass");
        current.SopClass.SerializeJson(writer, options);
      }

      if (current.NumberElement != null)
      {
        if (current.NumberElement.Value != null)
        {
          writer.WriteNumber("number",(int)current.NumberElement.Value);
        }
        if (current.NumberElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_number",false,current.NumberElement.Extension,current.NumberElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Instance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImagingStudy.InstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImagingStudy.InstanceComponent >>> ImagingStudy#Instance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImagingStudy.InstanceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImagingStudy#Instance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImagingStudy.InstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uid":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UidElement = new Id();
            reader.Skip();
          }
          else
          {
            current.UidElement = new Id(reader.GetString());
          }
          break;

        case "_uid":
          if (current.UidElement == null) { current.UidElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.UidElement).DeserializeJson(ref reader, options);
          break;

        case "sopClass":
          current.SopClass = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.SopClass).DeserializeJson(ref reader, options);
          break;

        case "number":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberElement = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.NumberElement = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_number":
          if (current.NumberElement == null) { current.NumberElement = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        // Complex: instance, Export: InstanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ImagingStudyJsonConverter : JsonConverter<Hl7.Fhir.Model.ImagingStudy>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ImagingStudy value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ImagingStudy Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ImagingStudy();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
