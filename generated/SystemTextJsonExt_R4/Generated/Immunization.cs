// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for Immunization
  /// </summary>
  public static class ImmunizationSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR Immunization into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Immunization current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Immunization");
      // Complex: Immunization, Export: Immunization, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        current.StatusReason.SerializeJson(writer, options);
      }

      if (current.VaccineCode != null)
      {
        writer.WritePropertyName("vaccineCode");
        current.VaccineCode.SerializeJson(writer, options);
      }

      if (current.Patient != null)
      {
        writer.WritePropertyName("patient");
        current.Patient.SerializeJson(writer, options);
      }

      if (current.Encounter != null)
      {
        writer.WritePropertyName("encounter");
        current.Encounter.SerializeJson(writer, options);
      }

      if (current.Occurrence != null)
      {
        switch (current.Occurrence)
        {
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("occurrenceDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_occurrenceDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("occurrenceString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_occurrenceString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (current.RecordedElement != null)
      {
        if (!string.IsNullOrEmpty(current.RecordedElement.Value))
        {
          writer.WriteString("recorded",current.RecordedElement.Value);
        }
        if (current.RecordedElement.HasExtensions() || (!string.IsNullOrEmpty(current.RecordedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_recorded",false,current.RecordedElement.Extension,current.RecordedElement.ElementId);
        }
      }

      if (current.PrimarySourceElement != null)
      {
        if (current.PrimarySourceElement.Value != null)
        {
          writer.WriteBoolean("primarySource",(bool)current.PrimarySourceElement.Value);
        }
        if (current.PrimarySourceElement.HasExtensions() || (!string.IsNullOrEmpty(current.PrimarySourceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_primarySource",false,current.PrimarySourceElement.Extension,current.PrimarySourceElement.ElementId);
        }
      }

      if (current.ReportOrigin != null)
      {
        writer.WritePropertyName("reportOrigin");
        current.ReportOrigin.SerializeJson(writer, options);
      }

      if (current.Location != null)
      {
        writer.WritePropertyName("location");
        current.Location.SerializeJson(writer, options);
      }

      if (current.Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        current.Manufacturer.SerializeJson(writer, options);
      }

      if (current.LotNumberElement != null)
      {
        if (!string.IsNullOrEmpty(current.LotNumberElement.Value))
        {
          writer.WriteString("lotNumber",current.LotNumberElement.Value);
        }
        if (current.LotNumberElement.HasExtensions() || (!string.IsNullOrEmpty(current.LotNumberElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lotNumber",false,current.LotNumberElement.Extension,current.LotNumberElement.ElementId);
        }
      }

      if (current.ExpirationDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ExpirationDateElement.Value))
        {
          writer.WriteString("expirationDate",current.ExpirationDateElement.Value);
        }
        if (current.ExpirationDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExpirationDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_expirationDate",false,current.ExpirationDateElement.Extension,current.ExpirationDateElement.ElementId);
        }
      }

      if (current.Site != null)
      {
        writer.WritePropertyName("site");
        current.Site.SerializeJson(writer, options);
      }

      if (current.Route != null)
      {
        writer.WritePropertyName("route");
        current.Route.SerializeJson(writer, options);
      }

      if (current.DoseQuantity != null)
      {
        writer.WritePropertyName("doseQuantity");
        current.DoseQuantity.SerializeJson(writer, options);
      }

      if ((current.Performer != null) && (current.Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();
        foreach (Immunization.PerformerComponent val in current.Performer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Note != null) && (current.Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();
        foreach (Annotation val in current.Note)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonCode != null) && (current.ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ReasonCode)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReasonReference != null) && (current.ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ReasonReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.IsSubpotentElement != null)
      {
        if (current.IsSubpotentElement.Value != null)
        {
          writer.WriteBoolean("isSubpotent",(bool)current.IsSubpotentElement.Value);
        }
        if (current.IsSubpotentElement.HasExtensions() || (!string.IsNullOrEmpty(current.IsSubpotentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_isSubpotent",false,current.IsSubpotentElement.Extension,current.IsSubpotentElement.ElementId);
        }
      }

      if ((current.SubpotentReason != null) && (current.SubpotentReason.Count != 0))
      {
        writer.WritePropertyName("subpotentReason");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.SubpotentReason)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Education != null) && (current.Education.Count != 0))
      {
        writer.WritePropertyName("education");
        writer.WriteStartArray();
        foreach (Immunization.EducationComponent val in current.Education)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProgramEligibility != null) && (current.ProgramEligibility.Count != 0))
      {
        writer.WritePropertyName("programEligibility");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProgramEligibility)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.FundingSource != null)
      {
        writer.WritePropertyName("fundingSource");
        current.FundingSource.SerializeJson(writer, options);
      }

      if ((current.Reaction != null) && (current.Reaction.Count != 0))
      {
        writer.WritePropertyName("reaction");
        writer.WriteStartArray();
        foreach (Immunization.ReactionComponent val in current.Reaction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProtocolApplied != null) && (current.ProtocolApplied.Count != 0))
      {
        writer.WritePropertyName("protocolApplied");
        writer.WriteStartArray();
        foreach (Immunization.ProtocolAppliedComponent val in current.ProtocolApplied)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Immunization current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Immunization >>> Immunization.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Immunization: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Immunization current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          current.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.StatusReason).DeserializeJson(ref reader, options);
          break;

        case "vaccineCode":
          current.VaccineCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.VaccineCode).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "encounter":
          current.Encounter = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Encounter).DeserializeJson(ref reader, options);
          break;

        case "occurrenceDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Occurrence = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Occurrence = new FhirDateTime(reader.GetString());
          }
          break;

        case "_occurrenceDateTime":
          if (current.Occurrence == null) { current.Occurrence = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "occurrenceString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Occurrence = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Occurrence = new FhirString(reader.GetString());
          }
          break;

        case "_occurrenceString":
          if (current.Occurrence == null) { current.Occurrence = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "recorded":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RecordedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.RecordedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_recorded":
          if (current.RecordedElement == null) { current.RecordedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.RecordedElement).DeserializeJson(ref reader, options);
          break;

        case "primarySource":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PrimarySourceElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.PrimarySourceElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_primarySource":
          if (current.PrimarySourceElement == null) { current.PrimarySourceElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.PrimarySourceElement).DeserializeJson(ref reader, options);
          break;

        case "reportOrigin":
          current.ReportOrigin = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ReportOrigin).DeserializeJson(ref reader, options);
          break;

        case "location":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          current.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Manufacturer).DeserializeJson(ref reader, options);
          break;

        case "lotNumber":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LotNumberElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.LotNumberElement = new FhirString(reader.GetString());
          }
          break;

        case "_lotNumber":
          if (current.LotNumberElement == null) { current.LotNumberElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.LotNumberElement).DeserializeJson(ref reader, options);
          break;

        case "expirationDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExpirationDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.ExpirationDateElement = new Date(reader.GetString());
          }
          break;

        case "_expirationDate":
          if (current.ExpirationDateElement == null) { current.ExpirationDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.ExpirationDateElement).DeserializeJson(ref reader, options);
          break;

        case "site":
          current.Site = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Site).DeserializeJson(ref reader, options);
          break;

        case "route":
          current.Route = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Route).DeserializeJson(ref reader, options);
          break;

        case "doseQuantity":
          current.DoseQuantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.DoseQuantity).DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'performer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Performer = new List<Immunization.PerformerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.PerformerComponent v_Performer = new Hl7.Fhir.Model.Immunization.PerformerComponent();
            v_Performer.DeserializeJson(ref reader, options);
            current.Performer.Add(v_Performer);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'performer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Performer.Count == 0)
          {
            current.Performer = null;
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'reasonCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ReasonCode.DeserializeJson(ref reader, options);
            current.ReasonCode.Add(v_ReasonCode);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'reasonCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonCode.Count == 0)
          {
            current.ReasonCode = null;
          }
          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'reasonReference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ReasonReference = new Hl7.Fhir.Model.ResourceReference();
            v_ReasonReference.DeserializeJson(ref reader, options);
            current.ReasonReference.Add(v_ReasonReference);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'reasonReference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonReference.Count == 0)
          {
            current.ReasonReference = null;
          }
          break;

        case "isSubpotent":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IsSubpotentElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IsSubpotentElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_isSubpotent":
          if (current.IsSubpotentElement == null) { current.IsSubpotentElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IsSubpotentElement).DeserializeJson(ref reader, options);
          break;

        case "subpotentReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'subpotentReason' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubpotentReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubpotentReason = new Hl7.Fhir.Model.CodeableConcept();
            v_SubpotentReason.DeserializeJson(ref reader, options);
            current.SubpotentReason.Add(v_SubpotentReason);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'subpotentReason' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubpotentReason.Count == 0)
          {
            current.SubpotentReason = null;
          }
          break;

        case "education":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'education' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Education = new List<Immunization.EducationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.EducationComponent v_Education = new Hl7.Fhir.Model.Immunization.EducationComponent();
            v_Education.DeserializeJson(ref reader, options);
            current.Education.Add(v_Education);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'education' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Education.Count == 0)
          {
            current.Education = null;
          }
          break;

        case "programEligibility":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'programEligibility' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramEligibility = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramEligibility = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramEligibility.DeserializeJson(ref reader, options);
            current.ProgramEligibility.Add(v_ProgramEligibility);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'programEligibility' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramEligibility.Count == 0)
          {
            current.ProgramEligibility = null;
          }
          break;

        case "fundingSource":
          current.FundingSource = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundingSource).DeserializeJson(ref reader, options);
          break;

        case "reaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'reaction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reaction = new List<Immunization.ReactionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.ReactionComponent v_Reaction = new Hl7.Fhir.Model.Immunization.ReactionComponent();
            v_Reaction.DeserializeJson(ref reader, options);
            current.Reaction.Add(v_Reaction);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'reaction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reaction.Count == 0)
          {
            current.Reaction = null;
          }
          break;

        case "protocolApplied":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Immunization error reading 'protocolApplied' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProtocolApplied = new List<Immunization.ProtocolAppliedComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent v_ProtocolApplied = new Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent();
            v_ProtocolApplied.DeserializeJson(ref reader, options);
            current.ProtocolApplied.Add(v_ProtocolApplied);

            if (!reader.Read())
            {
              throw new JsonException($"Immunization error reading 'protocolApplied' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProtocolApplied.Count == 0)
          {
            current.ProtocolApplied = null;
          }
          break;

        // Complex: Immunization, Export: Immunization, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Performer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Immunization.PerformerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Performer, Export: PerformerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Function != null)
      {
        writer.WritePropertyName("function");
        current.Function.SerializeJson(writer, options);
      }

      if (current.Actor != null)
      {
        writer.WritePropertyName("actor");
        current.Actor.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Performer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Immunization.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Immunization.PerformerComponent >>> Immunization#Performer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Immunization.PerformerComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Performer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Immunization.PerformerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "function":
          current.Function = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Function).DeserializeJson(ref reader, options);
          break;

        case "actor":
          current.Actor = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Actor).DeserializeJson(ref reader, options);
          break;

        // Complex: performer, Export: PerformerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Education into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Immunization.EducationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Education, Export: EducationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.DocumentTypeElement != null)
      {
        if (!string.IsNullOrEmpty(current.DocumentTypeElement.Value))
        {
          writer.WriteString("documentType",current.DocumentTypeElement.Value);
        }
        if (current.DocumentTypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.DocumentTypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_documentType",false,current.DocumentTypeElement.Extension,current.DocumentTypeElement.ElementId);
        }
      }

      if (current.ReferenceElement != null)
      {
        if (!string.IsNullOrEmpty(current.ReferenceElement.Value))
        {
          writer.WriteString("reference",current.ReferenceElement.Value);
        }
        if (current.ReferenceElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReferenceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_reference",false,current.ReferenceElement.Extension,current.ReferenceElement.ElementId);
        }
      }

      if (current.PublicationDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublicationDateElement.Value))
        {
          writer.WriteString("publicationDate",current.PublicationDateElement.Value);
        }
        if (current.PublicationDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublicationDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publicationDate",false,current.PublicationDateElement.Extension,current.PublicationDateElement.ElementId);
        }
      }

      if (current.PresentationDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.PresentationDateElement.Value))
        {
          writer.WriteString("presentationDate",current.PresentationDateElement.Value);
        }
        if (current.PresentationDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.PresentationDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_presentationDate",false,current.PresentationDateElement.Extension,current.PresentationDateElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Education
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Immunization.EducationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Immunization.EducationComponent >>> Immunization#Education.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Immunization.EducationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Education
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Immunization.EducationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentType":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DocumentTypeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DocumentTypeElement = new FhirString(reader.GetString());
          }
          break;

        case "_documentType":
          if (current.DocumentTypeElement == null) { current.DocumentTypeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DocumentTypeElement).DeserializeJson(ref reader, options);
          break;

        case "reference":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReferenceElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.ReferenceElement = new FhirUri(reader.GetString());
          }
          break;

        case "_reference":
          if (current.ReferenceElement == null) { current.ReferenceElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.ReferenceElement).DeserializeJson(ref reader, options);
          break;

        case "publicationDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublicationDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.PublicationDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_publicationDate":
          if (current.PublicationDateElement == null) { current.PublicationDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.PublicationDateElement).DeserializeJson(ref reader, options);
          break;

        case "presentationDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PresentationDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.PresentationDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_presentationDate":
          if (current.PresentationDateElement == null) { current.PresentationDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.PresentationDateElement).DeserializeJson(ref reader, options);
          break;

        // Complex: education, Export: EducationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#Reaction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Immunization.ReactionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#Reaction, Export: ReactionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.Detail != null)
      {
        writer.WritePropertyName("detail");
        current.Detail.SerializeJson(writer, options);
      }

      if (current.ReportedElement != null)
      {
        if (current.ReportedElement.Value != null)
        {
          writer.WriteBoolean("reported",(bool)current.ReportedElement.Value);
        }
        if (current.ReportedElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReportedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_reported",false,current.ReportedElement.Extension,current.ReportedElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Reaction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Immunization.ReactionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Immunization.ReactionComponent >>> Immunization#Reaction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Immunization.ReactionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#Reaction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Immunization.ReactionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "detail":
          current.Detail = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Detail).DeserializeJson(ref reader, options);
          break;

        case "reported":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReportedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ReportedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_reported":
          if (current.ReportedElement == null) { current.ReportedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ReportedElement).DeserializeJson(ref reader, options);
          break;

        // Complex: reaction, Export: ReactionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Immunization#ProtocolApplied into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Immunization#ProtocolApplied, Export: ProtocolAppliedComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SeriesElement != null)
      {
        if (!string.IsNullOrEmpty(current.SeriesElement.Value))
        {
          writer.WriteString("series",current.SeriesElement.Value);
        }
        if (current.SeriesElement.HasExtensions() || (!string.IsNullOrEmpty(current.SeriesElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_series",false,current.SeriesElement.Extension,current.SeriesElement.ElementId);
        }
      }

      if (current.Authority != null)
      {
        writer.WritePropertyName("authority");
        current.Authority.SerializeJson(writer, options);
      }

      if ((current.TargetDisease != null) && (current.TargetDisease.Count != 0))
      {
        writer.WritePropertyName("targetDisease");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.TargetDisease)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.DoseNumber != null)
      {
        switch (current.DoseNumber)
        {
          case Hl7.Fhir.Model.PositiveInt v_PositiveInt:
            if (v_PositiveInt != null)
            {
              if (v_PositiveInt.Value != null)
              {
                writer.WriteNumber("doseNumberPositiveInt",(int)v_PositiveInt.Value);
              }
              if (v_PositiveInt.HasExtensions() || (!string.IsNullOrEmpty(v_PositiveInt.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_doseNumberPositiveInt",false,v_PositiveInt.Extension,v_PositiveInt.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("doseNumberString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_doseNumberString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (current.SeriesDoses != null)
      {
        switch (current.SeriesDoses)
        {
          case Hl7.Fhir.Model.PositiveInt v_PositiveInt:
            if (v_PositiveInt != null)
            {
              if (v_PositiveInt.Value != null)
              {
                writer.WriteNumber("seriesDosesPositiveInt",(int)v_PositiveInt.Value);
              }
              if (v_PositiveInt.HasExtensions() || (!string.IsNullOrEmpty(v_PositiveInt.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_seriesDosesPositiveInt",false,v_PositiveInt.Extension,v_PositiveInt.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("seriesDosesString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_seriesDosesString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#ProtocolApplied
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Immunization.ProtocolAppliedComponent >>> Immunization#ProtocolApplied.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Immunization.ProtocolAppliedComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Immunization#ProtocolApplied
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "series":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SeriesElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SeriesElement = new FhirString(reader.GetString());
          }
          break;

        case "_series":
          if (current.SeriesElement == null) { current.SeriesElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SeriesElement).DeserializeJson(ref reader, options);
          break;

        case "authority":
          current.Authority = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Authority).DeserializeJson(ref reader, options);
          break;

        case "targetDisease":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ProtocolAppliedComponent error reading 'targetDisease' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.TargetDisease = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_TargetDisease = new Hl7.Fhir.Model.CodeableConcept();
            v_TargetDisease.DeserializeJson(ref reader, options);
            current.TargetDisease.Add(v_TargetDisease);

            if (!reader.Read())
            {
              throw new JsonException($"ProtocolAppliedComponent error reading 'targetDisease' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TargetDisease.Count == 0)
          {
            current.TargetDisease = null;
          }
          break;

        case "doseNumberPositiveInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DoseNumber = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.DoseNumber = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_doseNumberPositiveInt":
          if (current.DoseNumber == null) { current.DoseNumber = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.DoseNumber).DeserializeJson(ref reader, options);
          break;

        case "doseNumberString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DoseNumber = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DoseNumber = new FhirString(reader.GetString());
          }
          break;

        case "_doseNumberString":
          if (current.DoseNumber == null) { current.DoseNumber = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DoseNumber).DeserializeJson(ref reader, options);
          break;

        case "seriesDosesPositiveInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SeriesDoses = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SeriesDoses = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_seriesDosesPositiveInt":
          if (current.SeriesDoses == null) { current.SeriesDoses = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SeriesDoses).DeserializeJson(ref reader, options);
          break;

        case "seriesDosesString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SeriesDoses = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SeriesDoses = new FhirString(reader.GetString());
          }
          break;

        case "_seriesDosesString":
          if (current.SeriesDoses == null) { current.SeriesDoses = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SeriesDoses).DeserializeJson(ref reader, options);
          break;

        // Complex: protocolApplied, Export: ProtocolAppliedComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ImmunizationJsonConverter : JsonConverter<Hl7.Fhir.Model.Immunization>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.Immunization value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.Immunization Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.Immunization();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
