// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for InsurancePlan
  /// </summary>
  public static class InsurancePlanSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR InsurancePlan into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","InsurancePlan");
      // Complex: InsurancePlan, Export: InsurancePlan, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if ((current.Type != null) && (current.Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Type)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if ((current.AliasElement != null) && (current.AliasElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.AliasElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("alias");
          writer.WriteStartArray();
          foreach (FhirString val in current.AliasElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_alias");
          writer.WriteStartArray();
          foreach (FhirString val in current.AliasElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.Period != null)
      {
        writer.WritePropertyName("period");
        current.Period.SerializeJson(writer, options);
      }

      if (current.OwnedBy != null)
      {
        writer.WritePropertyName("ownedBy");
        current.OwnedBy.SerializeJson(writer, options);
      }

      if (current.AdministeredBy != null)
      {
        writer.WritePropertyName("administeredBy");
        current.AdministeredBy.SerializeJson(writer, options);
      }

      if ((current.CoverageArea != null) && (current.CoverageArea.Count != 0))
      {
        writer.WritePropertyName("coverageArea");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.CoverageArea)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (InsurancePlan.ContactComponent val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Endpoint != null) && (current.Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Endpoint)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Network != null) && (current.Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Network)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Coverage != null) && (current.Coverage.Count != 0))
      {
        writer.WritePropertyName("coverage");
        writer.WriteStartArray();
        foreach (InsurancePlan.CoverageComponent val in current.Coverage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Plan != null) && (current.Plan.Count != 0))
      {
        writer.WritePropertyName("plan");
        writer.WriteStartArray();
        foreach (InsurancePlan.PlanComponent val in current.Plan)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan >>> InsurancePlan.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'alias' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AliasElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.AliasElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.AliasElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'alias' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AliasElement.Count == 0)
          {
            current.AliasElement = null;
          }
          break;

        case "_alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'alias' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_alias = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_alias >= current.AliasElement.Count)
            {
              current.AliasElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.AliasElement[i_alias++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'alias' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "period":
          current.Period = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Period).DeserializeJson(ref reader, options);
          break;

        case "ownedBy":
          current.OwnedBy = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.OwnedBy).DeserializeJson(ref reader, options);
          break;

        case "administeredBy":
          current.AdministeredBy = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.AdministeredBy).DeserializeJson(ref reader, options);
          break;

        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'coverageArea' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CoverageArea = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_CoverageArea = new Hl7.Fhir.Model.ResourceReference();
            v_CoverageArea.DeserializeJson(ref reader, options);
            current.CoverageArea.Add(v_CoverageArea);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'coverageArea' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CoverageArea.Count == 0)
          {
            current.CoverageArea = null;
          }
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<InsurancePlan.ContactComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.ContactComponent v_Contact = new Hl7.Fhir.Model.InsurancePlan.ContactComponent();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'endpoint' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endpoint = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Endpoint = new Hl7.Fhir.Model.ResourceReference();
            v_Endpoint.DeserializeJson(ref reader, options);
            current.Endpoint.Add(v_Endpoint);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'endpoint' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endpoint.Count == 0)
          {
            current.Endpoint = null;
          }
          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'network' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Network = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Network = new Hl7.Fhir.Model.ResourceReference();
            v_Network.DeserializeJson(ref reader, options);
            current.Network.Add(v_Network);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'network' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Network.Count == 0)
          {
            current.Network = null;
          }
          break;

        case "coverage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'coverage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Coverage = new List<InsurancePlan.CoverageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.CoverageComponent v_Coverage = new Hl7.Fhir.Model.InsurancePlan.CoverageComponent();
            v_Coverage.DeserializeJson(ref reader, options);
            current.Coverage.Add(v_Coverage);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'coverage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Coverage.Count == 0)
          {
            current.Coverage = null;
          }
          break;

        case "plan":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsurancePlan error reading 'plan' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Plan = new List<InsurancePlan.PlanComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.PlanComponent v_Plan = new Hl7.Fhir.Model.InsurancePlan.PlanComponent();
            v_Plan.DeserializeJson(ref reader, options);
            current.Plan.Add(v_Plan);

            if (!reader.Read())
            {
              throw new JsonException($"InsurancePlan error reading 'plan' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Plan.Count == 0)
          {
            current.Plan = null;
          }
          break;

        // Complex: InsurancePlan, Export: InsurancePlan, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#Contact into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.ContactComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#Contact, Export: ContactComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Purpose != null)
      {
        writer.WritePropertyName("purpose");
        current.Purpose.SerializeJson(writer, options);
      }

      if (current.Name != null)
      {
        writer.WritePropertyName("name");
        current.Name.SerializeJson(writer, options);
      }

      if ((current.Telecom != null) && (current.Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();
        foreach (ContactPoint val in current.Telecom)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Address != null)
      {
        writer.WritePropertyName("address");
        current.Address.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Contact
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.ContactComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.ContactComponent >>> InsurancePlan#Contact.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.ContactComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Contact
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.ContactComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "purpose":
          current.Purpose = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.Name = new Hl7.Fhir.Model.HumanName();
          ((Hl7.Fhir.Model.HumanName)current.Name).DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContactComponent error reading 'telecom' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactPoint v_Telecom = new Hl7.Fhir.Model.ContactPoint();
            v_Telecom.DeserializeJson(ref reader, options);
            current.Telecom.Add(v_Telecom);

            if (!reader.Read())
            {
              throw new JsonException($"ContactComponent error reading 'telecom' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Telecom.Count == 0)
          {
            current.Telecom = null;
          }
          break;

        case "address":
          current.Address = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Address).DeserializeJson(ref reader, options);
          break;

        // Complex: contact, Export: ContactComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#Coverage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.CoverageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#Coverage, Export: CoverageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Network != null) && (current.Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Network)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Benefit != null) && (current.Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();
        foreach (InsurancePlan.CoverageBenefitComponent val in current.Benefit)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Coverage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.CoverageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.CoverageComponent >>> InsurancePlan#Coverage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.CoverageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Coverage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.CoverageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageComponent error reading 'network' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Network = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Network = new Hl7.Fhir.Model.ResourceReference();
            v_Network.DeserializeJson(ref reader, options);
            current.Network.Add(v_Network);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageComponent error reading 'network' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Network.Count == 0)
          {
            current.Network = null;
          }
          break;

        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageComponent error reading 'benefit' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Benefit = new List<InsurancePlan.CoverageBenefitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent v_Benefit = new Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent();
            v_Benefit.DeserializeJson(ref reader, options);
            current.Benefit.Add(v_Benefit);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageComponent error reading 'benefit' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Benefit.Count == 0)
          {
            current.Benefit = null;
          }
          break;

        // Complex: coverage, Export: CoverageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#CoverageBenefit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#CoverageBenefit, Export: CoverageBenefitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.RequirementElement != null)
      {
        if (!string.IsNullOrEmpty(current.RequirementElement.Value))
        {
          writer.WriteString("requirement",current.RequirementElement.Value);
        }
        if (current.RequirementElement.HasExtensions() || (!string.IsNullOrEmpty(current.RequirementElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_requirement",false,current.RequirementElement.Extension,current.RequirementElement.ElementId);
        }
      }

      if ((current.Limit != null) && (current.Limit.Count != 0))
      {
        writer.WritePropertyName("limit");
        writer.WriteStartArray();
        foreach (InsurancePlan.LimitComponent val in current.Limit)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#CoverageBenefit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.CoverageBenefitComponent >>> InsurancePlan#CoverageBenefit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.CoverageBenefitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#CoverageBenefit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "requirement":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequirementElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RequirementElement = new FhirString(reader.GetString());
          }
          break;

        case "_requirement":
          if (current.RequirementElement == null) { current.RequirementElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RequirementElement).DeserializeJson(ref reader, options);
          break;

        case "limit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CoverageBenefitComponent error reading 'limit' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Limit = new List<InsurancePlan.LimitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.LimitComponent v_Limit = new Hl7.Fhir.Model.InsurancePlan.LimitComponent();
            v_Limit.DeserializeJson(ref reader, options);
            current.Limit.Add(v_Limit);

            if (!reader.Read())
            {
              throw new JsonException($"CoverageBenefitComponent error reading 'limit' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Limit.Count == 0)
          {
            current.Limit = null;
          }
          break;

        // Complex: benefit, Export: CoverageBenefitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#Limit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.LimitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#Limit, Export: LimitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        writer.WritePropertyName("value");
        current.Value.SerializeJson(writer, options);
      }

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Limit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.LimitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.LimitComponent >>> InsurancePlan#Limit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.LimitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Limit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.LimitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "value":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        // Complex: limit, Export: LimitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#Plan into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.PlanComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#Plan, Export: PlanComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.CoverageArea != null) && (current.CoverageArea.Count != 0))
      {
        writer.WritePropertyName("coverageArea");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.CoverageArea)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Network != null) && (current.Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Network)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.GeneralCost != null) && (current.GeneralCost.Count != 0))
      {
        writer.WritePropertyName("generalCost");
        writer.WriteStartArray();
        foreach (InsurancePlan.GeneralCostComponent val in current.GeneralCost)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SpecificCost != null) && (current.SpecificCost.Count != 0))
      {
        writer.WritePropertyName("specificCost");
        writer.WriteStartArray();
        foreach (InsurancePlan.SpecificCostComponent val in current.SpecificCost)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Plan
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.PlanComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.PlanComponent >>> InsurancePlan#Plan.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.PlanComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Plan
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.PlanComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanComponent error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"PlanComponent error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanComponent error reading 'coverageArea' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CoverageArea = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_CoverageArea = new Hl7.Fhir.Model.ResourceReference();
            v_CoverageArea.DeserializeJson(ref reader, options);
            current.CoverageArea.Add(v_CoverageArea);

            if (!reader.Read())
            {
              throw new JsonException($"PlanComponent error reading 'coverageArea' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CoverageArea.Count == 0)
          {
            current.CoverageArea = null;
          }
          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanComponent error reading 'network' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Network = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Network = new Hl7.Fhir.Model.ResourceReference();
            v_Network.DeserializeJson(ref reader, options);
            current.Network.Add(v_Network);

            if (!reader.Read())
            {
              throw new JsonException($"PlanComponent error reading 'network' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Network.Count == 0)
          {
            current.Network = null;
          }
          break;

        case "generalCost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanComponent error reading 'generalCost' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.GeneralCost = new List<InsurancePlan.GeneralCostComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent v_GeneralCost = new Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent();
            v_GeneralCost.DeserializeJson(ref reader, options);
            current.GeneralCost.Add(v_GeneralCost);

            if (!reader.Read())
            {
              throw new JsonException($"PlanComponent error reading 'generalCost' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.GeneralCost.Count == 0)
          {
            current.GeneralCost = null;
          }
          break;

        case "specificCost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanComponent error reading 'specificCost' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SpecificCost = new List<InsurancePlan.SpecificCostComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent v_SpecificCost = new Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent();
            v_SpecificCost.DeserializeJson(ref reader, options);
            current.SpecificCost.Add(v_SpecificCost);

            if (!reader.Read())
            {
              throw new JsonException($"PlanComponent error reading 'specificCost' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SpecificCost.Count == 0)
          {
            current.SpecificCost = null;
          }
          break;

        // Complex: plan, Export: PlanComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#GeneralCost into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#GeneralCost, Export: GeneralCostComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.GroupSizeElement != null)
      {
        if (current.GroupSizeElement.Value != null)
        {
          writer.WriteNumber("groupSize",(int)current.GroupSizeElement.Value);
        }
        if (current.GroupSizeElement.HasExtensions() || (!string.IsNullOrEmpty(current.GroupSizeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_groupSize",false,current.GroupSizeElement.Extension,current.GroupSizeElement.ElementId);
        }
      }

      if (current.Cost != null)
      {
        writer.WritePropertyName("cost");
        current.Cost.SerializeJson(writer, options);
      }

      if (current.CommentElement != null)
      {
        if (!string.IsNullOrEmpty(current.CommentElement.Value))
        {
          writer.WriteString("comment",current.CommentElement.Value);
        }
        if (current.CommentElement.HasExtensions() || (!string.IsNullOrEmpty(current.CommentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_comment",false,current.CommentElement.Extension,current.CommentElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#GeneralCost
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.GeneralCostComponent >>> InsurancePlan#GeneralCost.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.GeneralCostComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#GeneralCost
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "groupSize":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.GroupSizeElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.GroupSizeElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_groupSize":
          if (current.GroupSizeElement == null) { current.GroupSizeElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.GroupSizeElement).DeserializeJson(ref reader, options);
          break;

        case "cost":
          current.Cost = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Cost).DeserializeJson(ref reader, options);
          break;

        case "comment":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CommentElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CommentElement = new FhirString(reader.GetString());
          }
          break;

        case "_comment":
          if (current.CommentElement == null) { current.CommentElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CommentElement).DeserializeJson(ref reader, options);
          break;

        // Complex: generalCost, Export: GeneralCostComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#SpecificCost into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#SpecificCost, Export: SpecificCostComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      if ((current.Benefit != null) && (current.Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();
        foreach (InsurancePlan.PlanBenefitComponent val in current.Benefit)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#SpecificCost
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.SpecificCostComponent >>> InsurancePlan#SpecificCost.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.SpecificCostComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#SpecificCost
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SpecificCostComponent error reading 'benefit' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Benefit = new List<InsurancePlan.PlanBenefitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent v_Benefit = new Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent();
            v_Benefit.DeserializeJson(ref reader, options);
            current.Benefit.Add(v_Benefit);

            if (!reader.Read())
            {
              throw new JsonException($"SpecificCostComponent error reading 'benefit' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Benefit.Count == 0)
          {
            current.Benefit = null;
          }
          break;

        // Complex: specificCost, Export: SpecificCostComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#PlanBenefit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#PlanBenefit, Export: PlanBenefitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Cost != null) && (current.Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();
        foreach (InsurancePlan.CostComponent val in current.Cost)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#PlanBenefit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.PlanBenefitComponent >>> InsurancePlan#PlanBenefit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.PlanBenefitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#PlanBenefit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PlanBenefitComponent error reading 'cost' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Cost = new List<InsurancePlan.CostComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.InsurancePlan.CostComponent v_Cost = new Hl7.Fhir.Model.InsurancePlan.CostComponent();
            v_Cost.DeserializeJson(ref reader, options);
            current.Cost.Add(v_Cost);

            if (!reader.Read())
            {
              throw new JsonException($"PlanBenefitComponent error reading 'cost' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Cost.Count == 0)
          {
            current.Cost = null;
          }
          break;

        // Complex: benefit, Export: PlanBenefitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR InsurancePlan#Cost into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.InsurancePlan.CostComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: InsurancePlan#Cost, Export: CostComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Applicability != null)
      {
        writer.WritePropertyName("applicability");
        current.Applicability.SerializeJson(writer, options);
      }

      if ((current.Qualifiers != null) && (current.Qualifiers.Count != 0))
      {
        writer.WritePropertyName("qualifiers");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Qualifiers)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Value != null)
      {
        writer.WritePropertyName("value");
        current.Value.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Cost
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.InsurancePlan.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"InsurancePlan.CostComponent >>> InsurancePlan#Cost.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"InsurancePlan.CostComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR InsurancePlan#Cost
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.InsurancePlan.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "applicability":
          current.Applicability = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Applicability).DeserializeJson(ref reader, options);
          break;

        case "qualifiers":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CostComponent error reading 'qualifiers' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Qualifiers = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Qualifiers = new Hl7.Fhir.Model.CodeableConcept();
            v_Qualifiers.DeserializeJson(ref reader, options);
            current.Qualifiers.Add(v_Qualifiers);

            if (!reader.Read())
            {
              throw new JsonException($"CostComponent error reading 'qualifiers' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Qualifiers.Count == 0)
          {
            current.Qualifiers = null;
          }
          break;

        case "value":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: cost, Export: CostComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class InsurancePlanJsonConverter : JsonConverter<Hl7.Fhir.Model.InsurancePlan>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.InsurancePlan value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.InsurancePlan Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.InsurancePlan();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
