// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for MedicationKnowledge
  /// </summary>
  public static class MedicationKnowledgeSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR MedicationKnowledge into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MedicationKnowledge");
      // Complex: MedicationKnowledge, Export: MedicationKnowledge, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.Manufacturer != null)
      {
        writer.WritePropertyName("manufacturer");
        current.Manufacturer.SerializeJson(writer, options);
      }

      if (current.DoseForm != null)
      {
        writer.WritePropertyName("doseForm");
        current.DoseForm.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if ((current.SynonymElement != null) && (current.SynonymElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.SynonymElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("synonym");
          writer.WriteStartArray();
          foreach (FhirString val in current.SynonymElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_synonym");
          writer.WriteStartArray();
          foreach (FhirString val in current.SynonymElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.RelatedMedicationKnowledge != null) && (current.RelatedMedicationKnowledge.Count != 0))
      {
        writer.WritePropertyName("relatedMedicationKnowledge");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.RelatedMedicationKnowledgeComponent val in current.RelatedMedicationKnowledge)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AssociatedMedication != null) && (current.AssociatedMedication.Count != 0))
      {
        writer.WritePropertyName("associatedMedication");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.AssociatedMedication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ProductType != null) && (current.ProductType.Count != 0))
      {
        writer.WritePropertyName("productType");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProductType)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Monograph != null) && (current.Monograph.Count != 0))
      {
        writer.WritePropertyName("monograph");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MonographComponent val in current.Monograph)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Ingredient != null) && (current.Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.IngredientComponent val in current.Ingredient)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PreparationInstruction != null)
      {
        if (!string.IsNullOrEmpty(current.PreparationInstruction.Value))
        {
          writer.WriteString("preparationInstruction",current.PreparationInstruction.Value);
        }
        if (current.PreparationInstruction.HasExtensions() || (!string.IsNullOrEmpty(current.PreparationInstruction.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_preparationInstruction",false,current.PreparationInstruction.Extension,current.PreparationInstruction.ElementId);
        }
      }

      if ((current.IntendedRoute != null) && (current.IntendedRoute.Count != 0))
      {
        writer.WritePropertyName("intendedRoute");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.IntendedRoute)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Cost != null) && (current.Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.CostComponent val in current.Cost)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MonitoringProgram != null) && (current.MonitoringProgram.Count != 0))
      {
        writer.WritePropertyName("monitoringProgram");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MonitoringProgramComponent val in current.MonitoringProgram)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AdministrationGuidelines != null) && (current.AdministrationGuidelines.Count != 0))
      {
        writer.WritePropertyName("administrationGuidelines");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.AdministrationGuidelinesComponent val in current.AdministrationGuidelines)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MedicineClassification != null) && (current.MedicineClassification.Count != 0))
      {
        writer.WritePropertyName("medicineClassification");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.MedicineClassificationComponent val in current.MedicineClassification)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Packaging != null)
      {
        writer.WritePropertyName("packaging");
        current.Packaging.SerializeJson(writer, options);
      }

      if ((current.DrugCharacteristic != null) && (current.DrugCharacteristic.Count != 0))
      {
        writer.WritePropertyName("drugCharacteristic");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.DrugCharacteristicComponent val in current.DrugCharacteristic)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contraindication != null) && (current.Contraindication.Count != 0))
      {
        writer.WritePropertyName("contraindication");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Contraindication)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Regulatory != null) && (current.Regulatory.Count != 0))
      {
        writer.WritePropertyName("regulatory");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.RegulatoryComponent val in current.Regulatory)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Kinetics != null) && (current.Kinetics.Count != 0))
      {
        writer.WritePropertyName("kinetics");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.KineticsComponent val in current.Kinetics)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge >>> MedicationKnowledge.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          current.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Manufacturer).DeserializeJson(ref reader, options);
          break;

        case "doseForm":
          current.DoseForm = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.DoseForm).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'synonym' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SynonymElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SynonymElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.SynonymElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'synonym' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SynonymElement.Count == 0)
          {
            current.SynonymElement = null;
          }
          break;

        case "_synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'synonym' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_synonym = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_synonym >= current.SynonymElement.Count)
            {
              current.SynonymElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SynonymElement[i_synonym++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'synonym' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "relatedMedicationKnowledge":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'relatedMedicationKnowledge' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RelatedMedicationKnowledge = new List<MedicationKnowledge.RelatedMedicationKnowledgeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent v_RelatedMedicationKnowledge = new Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent();
            v_RelatedMedicationKnowledge.DeserializeJson(ref reader, options);
            current.RelatedMedicationKnowledge.Add(v_RelatedMedicationKnowledge);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'relatedMedicationKnowledge' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelatedMedicationKnowledge.Count == 0)
          {
            current.RelatedMedicationKnowledge = null;
          }
          break;

        case "associatedMedication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'associatedMedication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AssociatedMedication = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_AssociatedMedication = new Hl7.Fhir.Model.ResourceReference();
            v_AssociatedMedication.DeserializeJson(ref reader, options);
            current.AssociatedMedication.Add(v_AssociatedMedication);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'associatedMedication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AssociatedMedication.Count == 0)
          {
            current.AssociatedMedication = null;
          }
          break;

        case "productType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'productType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProductType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProductType = new Hl7.Fhir.Model.CodeableConcept();
            v_ProductType.DeserializeJson(ref reader, options);
            current.ProductType.Add(v_ProductType);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'productType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProductType.Count == 0)
          {
            current.ProductType = null;
          }
          break;

        case "monograph":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'monograph' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Monograph = new List<MedicationKnowledge.MonographComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.MonographComponent v_Monograph = new Hl7.Fhir.Model.MedicationKnowledge.MonographComponent();
            v_Monograph.DeserializeJson(ref reader, options);
            current.Monograph.Add(v_Monograph);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'monograph' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Monograph.Count == 0)
          {
            current.Monograph = null;
          }
          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'ingredient' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Ingredient = new List<MedicationKnowledge.IngredientComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent v_Ingredient = new Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent();
            v_Ingredient.DeserializeJson(ref reader, options);
            current.Ingredient.Add(v_Ingredient);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'ingredient' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Ingredient.Count == 0)
          {
            current.Ingredient = null;
          }
          break;

        case "preparationInstruction":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PreparationInstruction = new Markdown();
            reader.Skip();
          }
          else
          {
            current.PreparationInstruction = new Markdown(reader.GetString());
          }
          break;

        case "_preparationInstruction":
          if (current.PreparationInstruction == null) { current.PreparationInstruction = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.PreparationInstruction).DeserializeJson(ref reader, options);
          break;

        case "intendedRoute":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'intendedRoute' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.IntendedRoute = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_IntendedRoute = new Hl7.Fhir.Model.CodeableConcept();
            v_IntendedRoute.DeserializeJson(ref reader, options);
            current.IntendedRoute.Add(v_IntendedRoute);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'intendedRoute' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.IntendedRoute.Count == 0)
          {
            current.IntendedRoute = null;
          }
          break;

        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'cost' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Cost = new List<MedicationKnowledge.CostComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.CostComponent v_Cost = new Hl7.Fhir.Model.MedicationKnowledge.CostComponent();
            v_Cost.DeserializeJson(ref reader, options);
            current.Cost.Add(v_Cost);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'cost' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Cost.Count == 0)
          {
            current.Cost = null;
          }
          break;

        case "monitoringProgram":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'monitoringProgram' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MonitoringProgram = new List<MedicationKnowledge.MonitoringProgramComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent v_MonitoringProgram = new Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent();
            v_MonitoringProgram.DeserializeJson(ref reader, options);
            current.MonitoringProgram.Add(v_MonitoringProgram);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'monitoringProgram' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MonitoringProgram.Count == 0)
          {
            current.MonitoringProgram = null;
          }
          break;

        case "administrationGuidelines":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'administrationGuidelines' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AdministrationGuidelines = new List<MedicationKnowledge.AdministrationGuidelinesComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent v_AdministrationGuidelines = new Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent();
            v_AdministrationGuidelines.DeserializeJson(ref reader, options);
            current.AdministrationGuidelines.Add(v_AdministrationGuidelines);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'administrationGuidelines' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AdministrationGuidelines.Count == 0)
          {
            current.AdministrationGuidelines = null;
          }
          break;

        case "medicineClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'medicineClassification' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MedicineClassification = new List<MedicationKnowledge.MedicineClassificationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent v_MedicineClassification = new Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent();
            v_MedicineClassification.DeserializeJson(ref reader, options);
            current.MedicineClassification.Add(v_MedicineClassification);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'medicineClassification' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MedicineClassification.Count == 0)
          {
            current.MedicineClassification = null;
          }
          break;

        case "packaging":
          current.Packaging = new Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent();
          ((Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent)current.Packaging).DeserializeJson(ref reader, options);
          break;

        case "drugCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'drugCharacteristic' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DrugCharacteristic = new List<MedicationKnowledge.DrugCharacteristicComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent v_DrugCharacteristic = new Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent();
            v_DrugCharacteristic.DeserializeJson(ref reader, options);
            current.DrugCharacteristic.Add(v_DrugCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'drugCharacteristic' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DrugCharacteristic.Count == 0)
          {
            current.DrugCharacteristic = null;
          }
          break;

        case "contraindication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'contraindication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contraindication = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Contraindication = new Hl7.Fhir.Model.ResourceReference();
            v_Contraindication.DeserializeJson(ref reader, options);
            current.Contraindication.Add(v_Contraindication);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'contraindication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contraindication.Count == 0)
          {
            current.Contraindication = null;
          }
          break;

        case "regulatory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'regulatory' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Regulatory = new List<MedicationKnowledge.RegulatoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent v_Regulatory = new Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent();
            v_Regulatory.DeserializeJson(ref reader, options);
            current.Regulatory.Add(v_Regulatory);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'regulatory' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Regulatory.Count == 0)
          {
            current.Regulatory = null;
          }
          break;

        case "kinetics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicationKnowledge error reading 'kinetics' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Kinetics = new List<MedicationKnowledge.KineticsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent v_Kinetics = new Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent();
            v_Kinetics.DeserializeJson(ref reader, options);
            current.Kinetics.Add(v_Kinetics);

            if (!reader.Read())
            {
              throw new JsonException($"MedicationKnowledge error reading 'kinetics' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Kinetics.Count == 0)
          {
            current.Kinetics = null;
          }
          break;

        // Complex: MedicationKnowledge, Export: MedicationKnowledge, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#RelatedMedicationKnowledge into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#RelatedMedicationKnowledge, Export: RelatedMedicationKnowledgeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Reference != null) && (current.Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Reference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#RelatedMedicationKnowledge
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.RelatedMedicationKnowledgeComponent >>> MedicationKnowledge#RelatedMedicationKnowledge.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.RelatedMedicationKnowledgeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#RelatedMedicationKnowledge
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RelatedMedicationKnowledgeComponent error reading 'reference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Reference = new Hl7.Fhir.Model.ResourceReference();
            v_Reference.DeserializeJson(ref reader, options);
            current.Reference.Add(v_Reference);

            if (!reader.Read())
            {
              throw new JsonException($"RelatedMedicationKnowledgeComponent error reading 'reference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }
          break;

        // Complex: relatedMedicationKnowledge, Export: RelatedMedicationKnowledgeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Monograph into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MonographComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Monograph, Export: MonographComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Source != null)
      {
        writer.WritePropertyName("source");
        current.Source.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Monograph
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MonographComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.MonographComponent >>> MedicationKnowledge#Monograph.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.MonographComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Monograph
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.MonographComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "source":
          current.Source = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Source).DeserializeJson(ref reader, options);
          break;

        // Complex: monograph, Export: MonographComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Ingredient into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Ingredient, Export: IngredientComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Item != null)
      {
        switch (current.Item)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("itemCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("itemReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.IsActiveElement != null)
      {
        if (current.IsActiveElement.Value != null)
        {
          writer.WriteBoolean("isActive",(bool)current.IsActiveElement.Value);
        }
        if (current.IsActiveElement.HasExtensions() || (!string.IsNullOrEmpty(current.IsActiveElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_isActive",false,current.IsActiveElement.Extension,current.IsActiveElement.ElementId);
        }
      }

      if (current.Strength != null)
      {
        writer.WritePropertyName("strength");
        current.Strength.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Ingredient
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.IngredientComponent >>> MedicationKnowledge#Ingredient.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.IngredientComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Ingredient
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemCodeableConcept":
          current.Item = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Item).DeserializeJson(ref reader, options);
          break;

        case "itemReference":
          current.Item = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Item).DeserializeJson(ref reader, options);
          break;

        case "isActive":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IsActiveElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IsActiveElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_isActive":
          if (current.IsActiveElement == null) { current.IsActiveElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IsActiveElement).DeserializeJson(ref reader, options);
          break;

        case "strength":
          current.Strength = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.Strength).DeserializeJson(ref reader, options);
          break;

        // Complex: ingredient, Export: IngredientComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Cost into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.CostComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Cost, Export: CostComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.SourceElement != null)
      {
        if (!string.IsNullOrEmpty(current.SourceElement.Value))
        {
          writer.WriteString("source",current.SourceElement.Value);
        }
        if (current.SourceElement.HasExtensions() || (!string.IsNullOrEmpty(current.SourceElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_source",false,current.SourceElement.Extension,current.SourceElement.ElementId);
        }
      }

      if (current.Cost != null)
      {
        writer.WritePropertyName("cost");
        current.Cost.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Cost
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.CostComponent >>> MedicationKnowledge#Cost.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.CostComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Cost
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.CostComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "source":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SourceElement = new FhirString(reader.GetString());
          }
          break;

        case "_source":
          if (current.SourceElement == null) { current.SourceElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SourceElement).DeserializeJson(ref reader, options);
          break;

        case "cost":
          current.Cost = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Cost).DeserializeJson(ref reader, options);
          break;

        // Complex: cost, Export: CostComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MonitoringProgram into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MonitoringProgram, Export: MonitoringProgramComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MonitoringProgram
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.MonitoringProgramComponent >>> MedicationKnowledge#MonitoringProgram.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.MonitoringProgramComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MonitoringProgram
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        // Complex: monitoringProgram, Export: MonitoringProgramComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#AdministrationGuidelines into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#AdministrationGuidelines, Export: AdministrationGuidelinesComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.DosageComponent val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Indication != null)
      {
        switch (current.Indication)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("indicationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("indicationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.PatientCharacteristics != null) && (current.PatientCharacteristics.Count != 0))
      {
        writer.WritePropertyName("patientCharacteristics");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.PatientCharacteristicsComponent val in current.PatientCharacteristics)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#AdministrationGuidelines
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.AdministrationGuidelinesComponent >>> MedicationKnowledge#AdministrationGuidelines.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.AdministrationGuidelinesComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#AdministrationGuidelines
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AdministrationGuidelinesComponent error reading 'dosage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Dosage = new List<MedicationKnowledge.DosageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.DosageComponent v_Dosage = new Hl7.Fhir.Model.MedicationKnowledge.DosageComponent();
            v_Dosage.DeserializeJson(ref reader, options);
            current.Dosage.Add(v_Dosage);

            if (!reader.Read())
            {
              throw new JsonException($"AdministrationGuidelinesComponent error reading 'dosage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }
          break;

        case "indicationCodeableConcept":
          current.Indication = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Indication).DeserializeJson(ref reader, options);
          break;

        case "indicationReference":
          current.Indication = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Indication).DeserializeJson(ref reader, options);
          break;

        case "patientCharacteristics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AdministrationGuidelinesComponent error reading 'patientCharacteristics' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PatientCharacteristics = new List<MedicationKnowledge.PatientCharacteristicsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent v_PatientCharacteristics = new Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent();
            v_PatientCharacteristics.DeserializeJson(ref reader, options);
            current.PatientCharacteristics.Add(v_PatientCharacteristics);

            if (!reader.Read())
            {
              throw new JsonException($"AdministrationGuidelinesComponent error reading 'patientCharacteristics' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PatientCharacteristics.Count == 0)
          {
            current.PatientCharacteristics = null;
          }
          break;

        // Complex: administrationGuidelines, Export: AdministrationGuidelinesComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Dosage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.DosageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Dosage, Export: DosageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Dosage != null) && (current.Dosage.Count != 0))
      {
        writer.WritePropertyName("dosage");
        writer.WriteStartArray();
        foreach (Dosage val in current.Dosage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Dosage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.DosageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.DosageComponent >>> MedicationKnowledge#Dosage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.DosageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Dosage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.DosageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "dosage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DosageComponent error reading 'dosage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Dosage = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Dosage v_Dosage = new Hl7.Fhir.Model.Dosage();
            v_Dosage.DeserializeJson(ref reader, options);
            current.Dosage.Add(v_Dosage);

            if (!reader.Read())
            {
              throw new JsonException($"DosageComponent error reading 'dosage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Dosage.Count == 0)
          {
            current.Dosage = null;
          }
          break;

        // Complex: dosage, Export: DosageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#PatientCharacteristics into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#PatientCharacteristics, Export: PatientCharacteristicsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Characteristic != null)
      {
        switch (current.Characteristic)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("characteristicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("characteristicQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
        }
      }
      if ((current.ValueElement != null) && (current.ValueElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.ValueElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("value");
          writer.WriteStartArray();
          foreach (FhirString val in current.ValueElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_value");
          writer.WriteStartArray();
          foreach (FhirString val in current.ValueElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#PatientCharacteristics
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.PatientCharacteristicsComponent >>> MedicationKnowledge#PatientCharacteristics.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.PatientCharacteristicsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#PatientCharacteristics
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "characteristicCodeableConcept":
          current.Characteristic = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Characteristic).DeserializeJson(ref reader, options);
          break;

        case "characteristicQuantity":
          current.Characteristic = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Characteristic).DeserializeJson(ref reader, options);
          break;

        case "value":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PatientCharacteristicsComponent error reading 'value' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ValueElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ValueElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ValueElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"PatientCharacteristicsComponent error reading 'value' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueElement.Count == 0)
          {
            current.ValueElement = null;
          }
          break;

        case "_value":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PatientCharacteristicsComponent error reading 'value' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_value = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_value >= current.ValueElement.Count)
            {
              current.ValueElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ValueElement[i_value++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"PatientCharacteristicsComponent error reading 'value' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: patientCharacteristics, Export: PatientCharacteristicsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MedicineClassification into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MedicineClassification, Export: MedicineClassificationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if ((current.Classification != null) && (current.Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Classification)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MedicineClassification
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.MedicineClassificationComponent >>> MedicationKnowledge#MedicineClassification.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.MedicineClassificationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MedicineClassification
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicineClassificationComponent error reading 'classification' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Classification = new Hl7.Fhir.Model.CodeableConcept();
            v_Classification.DeserializeJson(ref reader, options);
            current.Classification.Add(v_Classification);

            if (!reader.Read())
            {
              throw new JsonException($"MedicineClassificationComponent error reading 'classification' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Classification.Count == 0)
          {
            current.Classification = null;
          }
          break;

        // Complex: medicineClassification, Export: MedicineClassificationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Packaging into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Packaging, Export: PackagingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Packaging
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.PackagingComponent >>> MedicationKnowledge#Packaging.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.PackagingComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Packaging
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        // Complex: packaging, Export: PackagingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#DrugCharacteristic into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#DrugCharacteristic, Export: DrugCharacteristicComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("valueCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Base64Binary v_Base64Binary:
            if (v_Base64Binary != null)
            {
              if (v_Base64Binary.Value != null)
              {
                writer.WriteString("valueBase64Binary",System.Convert.ToBase64String(v_Base64Binary.Value));
              }
              if (v_Base64Binary.HasExtensions() || (!string.IsNullOrEmpty(v_Base64Binary.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueBase64Binary",false,v_Base64Binary.Extension,v_Base64Binary.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#DrugCharacteristic
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.DrugCharacteristicComponent >>> MedicationKnowledge#DrugCharacteristic.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.DrugCharacteristicComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#DrugCharacteristic
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          current.Value = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Base64Binary();
            reader.Skip();
          }
          else
          {
            current.Value = new Base64Binary(System.Convert.FromBase64String(reader.GetString()));
          }
          break;

        case "_valueBase64Binary":
          if (current.Value == null) { current.Value = new Base64Binary(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: drugCharacteristic, Export: DrugCharacteristicComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Regulatory into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Regulatory, Export: RegulatoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.RegulatoryAuthority != null)
      {
        writer.WritePropertyName("regulatoryAuthority");
        current.RegulatoryAuthority.SerializeJson(writer, options);
      }

      if ((current.Substitution != null) && (current.Substitution.Count != 0))
      {
        writer.WritePropertyName("substitution");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.SubstitutionComponent val in current.Substitution)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Schedule != null) && (current.Schedule.Count != 0))
      {
        writer.WritePropertyName("schedule");
        writer.WriteStartArray();
        foreach (MedicationKnowledge.ScheduleComponent val in current.Schedule)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MaxDispense != null)
      {
        writer.WritePropertyName("maxDispense");
        current.MaxDispense.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Regulatory
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.RegulatoryComponent >>> MedicationKnowledge#Regulatory.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.RegulatoryComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Regulatory
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "regulatoryAuthority":
          current.RegulatoryAuthority = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.RegulatoryAuthority).DeserializeJson(ref reader, options);
          break;

        case "substitution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RegulatoryComponent error reading 'substitution' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Substitution = new List<MedicationKnowledge.SubstitutionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent v_Substitution = new Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent();
            v_Substitution.DeserializeJson(ref reader, options);
            current.Substitution.Add(v_Substitution);

            if (!reader.Read())
            {
              throw new JsonException($"RegulatoryComponent error reading 'substitution' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Substitution.Count == 0)
          {
            current.Substitution = null;
          }
          break;

        case "schedule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RegulatoryComponent error reading 'schedule' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Schedule = new List<MedicationKnowledge.ScheduleComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent v_Schedule = new Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent();
            v_Schedule.DeserializeJson(ref reader, options);
            current.Schedule.Add(v_Schedule);

            if (!reader.Read())
            {
              throw new JsonException($"RegulatoryComponent error reading 'schedule' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Schedule.Count == 0)
          {
            current.Schedule = null;
          }
          break;

        case "maxDispense":
          current.MaxDispense = new Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent();
          ((Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent)current.MaxDispense).DeserializeJson(ref reader, options);
          break;

        // Complex: regulatory, Export: RegulatoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Substitution into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Substitution, Export: SubstitutionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.AllowedElement != null)
      {
        if (current.AllowedElement.Value != null)
        {
          writer.WriteBoolean("allowed",(bool)current.AllowedElement.Value);
        }
        if (current.AllowedElement.HasExtensions() || (!string.IsNullOrEmpty(current.AllowedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_allowed",false,current.AllowedElement.Extension,current.AllowedElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Substitution
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.SubstitutionComponent >>> MedicationKnowledge#Substitution.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.SubstitutionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Substitution
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "allowed":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AllowedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AllowedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_allowed":
          if (current.AllowedElement == null) { current.AllowedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AllowedElement).DeserializeJson(ref reader, options);
          break;

        // Complex: substitution, Export: SubstitutionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Schedule into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Schedule, Export: ScheduleComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Schedule != null)
      {
        writer.WritePropertyName("schedule");
        current.Schedule.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Schedule
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.ScheduleComponent >>> MedicationKnowledge#Schedule.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.ScheduleComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Schedule
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "schedule":
          current.Schedule = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Schedule).DeserializeJson(ref reader, options);
          break;

        // Complex: schedule, Export: ScheduleComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#MaxDispense into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#MaxDispense, Export: MaxDispenseComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Quantity != null)
      {
        writer.WritePropertyName("quantity");
        current.Quantity.SerializeJson(writer, options);
      }

      if (current.Period != null)
      {
        writer.WritePropertyName("period");
        current.Period.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MaxDispense
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.MaxDispenseComponent >>> MedicationKnowledge#MaxDispense.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.MaxDispenseComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#MaxDispense
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "period":
          current.Period = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.Period).DeserializeJson(ref reader, options);
          break;

        // Complex: maxDispense, Export: MaxDispenseComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicationKnowledge#Kinetics into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicationKnowledge#Kinetics, Export: KineticsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.AreaUnderCurve != null) && (current.AreaUnderCurve.Count != 0))
      {
        writer.WritePropertyName("areaUnderCurve");
        writer.WriteStartArray();
        foreach (Quantity val in current.AreaUnderCurve)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.LethalDose50 != null) && (current.LethalDose50.Count != 0))
      {
        writer.WritePropertyName("lethalDose50");
        writer.WriteStartArray();
        foreach (Quantity val in current.LethalDose50)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.HalfLifePeriod != null)
      {
        writer.WritePropertyName("halfLifePeriod");
        current.HalfLifePeriod.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Kinetics
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicationKnowledge.KineticsComponent >>> MedicationKnowledge#Kinetics.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicationKnowledge.KineticsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicationKnowledge#Kinetics
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "areaUnderCurve":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"KineticsComponent error reading 'areaUnderCurve' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AreaUnderCurve = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Quantity v_AreaUnderCurve = new Hl7.Fhir.Model.Quantity();
            v_AreaUnderCurve.DeserializeJson(ref reader, options);
            current.AreaUnderCurve.Add(v_AreaUnderCurve);

            if (!reader.Read())
            {
              throw new JsonException($"KineticsComponent error reading 'areaUnderCurve' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AreaUnderCurve.Count == 0)
          {
            current.AreaUnderCurve = null;
          }
          break;

        case "lethalDose50":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"KineticsComponent error reading 'lethalDose50' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LethalDose50 = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Quantity v_LethalDose50 = new Hl7.Fhir.Model.Quantity();
            v_LethalDose50.DeserializeJson(ref reader, options);
            current.LethalDose50.Add(v_LethalDose50);

            if (!reader.Read())
            {
              throw new JsonException($"KineticsComponent error reading 'lethalDose50' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LethalDose50.Count == 0)
          {
            current.LethalDose50 = null;
          }
          break;

        case "halfLifePeriod":
          current.HalfLifePeriod = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.HalfLifePeriod).DeserializeJson(ref reader, options);
          break;

        // Complex: kinetics, Export: KineticsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MedicationKnowledgeJsonConverter : JsonConverter<Hl7.Fhir.Model.MedicationKnowledge>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.MedicationKnowledge value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.MedicationKnowledge Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.MedicationKnowledge();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
