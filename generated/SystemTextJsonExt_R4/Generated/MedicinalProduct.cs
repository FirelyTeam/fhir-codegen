// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for MedicinalProduct
  /// </summary>
  public static class MedicinalProductSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR MedicinalProduct into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MedicinalProduct");
      // Complex: MedicinalProduct, Export: MedicinalProduct, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Domain != null)
      {
        writer.WritePropertyName("domain");
        current.Domain.SerializeJson(writer, options);
      }

      if (current.CombinedPharmaceuticalDoseForm != null)
      {
        writer.WritePropertyName("combinedPharmaceuticalDoseForm");
        current.CombinedPharmaceuticalDoseForm.SerializeJson(writer, options);
      }

      if (current.LegalStatusOfSupply != null)
      {
        writer.WritePropertyName("legalStatusOfSupply");
        current.LegalStatusOfSupply.SerializeJson(writer, options);
      }

      if (current.AdditionalMonitoringIndicator != null)
      {
        writer.WritePropertyName("additionalMonitoringIndicator");
        current.AdditionalMonitoringIndicator.SerializeJson(writer, options);
      }

      if ((current.SpecialMeasuresElement != null) && (current.SpecialMeasuresElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.SpecialMeasuresElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("specialMeasures");
          writer.WriteStartArray();
          foreach (FhirString val in current.SpecialMeasuresElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_specialMeasures");
          writer.WriteStartArray();
          foreach (FhirString val in current.SpecialMeasuresElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.PaediatricUseIndicator != null)
      {
        writer.WritePropertyName("paediatricUseIndicator");
        current.PaediatricUseIndicator.SerializeJson(writer, options);
      }

      if ((current.ProductClassification != null) && (current.ProductClassification.Count != 0))
      {
        writer.WritePropertyName("productClassification");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.ProductClassification)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MarketingStatus != null) && (current.MarketingStatus.Count != 0))
      {
        writer.WritePropertyName("marketingStatus");
        writer.WriteStartArray();
        foreach (MarketingStatus val in current.MarketingStatus)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PharmaceuticalProduct != null) && (current.PharmaceuticalProduct.Count != 0))
      {
        writer.WritePropertyName("pharmaceuticalProduct");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.PharmaceuticalProduct)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.PackagedMedicinalProduct != null) && (current.PackagedMedicinalProduct.Count != 0))
      {
        writer.WritePropertyName("packagedMedicinalProduct");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.PackagedMedicinalProduct)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.AttachedDocument != null) && (current.AttachedDocument.Count != 0))
      {
        writer.WritePropertyName("attachedDocument");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.AttachedDocument)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MasterFile != null) && (current.MasterFile.Count != 0))
      {
        writer.WritePropertyName("masterFile");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.MasterFile)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ClinicalTrial != null) && (current.ClinicalTrial.Count != 0))
      {
        writer.WritePropertyName("clinicalTrial");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.ClinicalTrial)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Name != null) && (current.Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();
        foreach (MedicinalProduct.NameComponent val in current.Name)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CrossReference != null) && (current.CrossReference.Count != 0))
      {
        writer.WritePropertyName("crossReference");
        writer.WriteStartArray();
        foreach (Identifier val in current.CrossReference)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ManufacturingBusinessOperation != null) && (current.ManufacturingBusinessOperation.Count != 0))
      {
        writer.WritePropertyName("manufacturingBusinessOperation");
        writer.WriteStartArray();
        foreach (MedicinalProduct.ManufacturingBusinessOperationComponent val in current.ManufacturingBusinessOperation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SpecialDesignation != null) && (current.SpecialDesignation.Count != 0))
      {
        writer.WritePropertyName("specialDesignation");
        writer.WriteStartArray();
        foreach (MedicinalProduct.SpecialDesignationComponent val in current.SpecialDesignation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct >>> MedicinalProduct.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "domain":
          current.Domain = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Domain).DeserializeJson(ref reader, options);
          break;

        case "combinedPharmaceuticalDoseForm":
          current.CombinedPharmaceuticalDoseForm = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.CombinedPharmaceuticalDoseForm).DeserializeJson(ref reader, options);
          break;

        case "legalStatusOfSupply":
          current.LegalStatusOfSupply = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.LegalStatusOfSupply).DeserializeJson(ref reader, options);
          break;

        case "additionalMonitoringIndicator":
          current.AdditionalMonitoringIndicator = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AdditionalMonitoringIndicator).DeserializeJson(ref reader, options);
          break;

        case "specialMeasures":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'specialMeasures' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SpecialMeasuresElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SpecialMeasuresElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.SpecialMeasuresElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'specialMeasures' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SpecialMeasuresElement.Count == 0)
          {
            current.SpecialMeasuresElement = null;
          }
          break;

        case "_specialMeasures":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'specialMeasures' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_specialMeasures = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_specialMeasures >= current.SpecialMeasuresElement.Count)
            {
              current.SpecialMeasuresElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SpecialMeasuresElement[i_specialMeasures++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'specialMeasures' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "paediatricUseIndicator":
          current.PaediatricUseIndicator = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PaediatricUseIndicator).DeserializeJson(ref reader, options);
          break;

        case "productClassification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'productClassification' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProductClassification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProductClassification = new Hl7.Fhir.Model.CodeableConcept();
            v_ProductClassification.DeserializeJson(ref reader, options);
            current.ProductClassification.Add(v_ProductClassification);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'productClassification' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProductClassification.Count == 0)
          {
            current.ProductClassification = null;
          }
          break;

        case "marketingStatus":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'marketingStatus' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MarketingStatus = new List<MarketingStatus>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MarketingStatus v_MarketingStatus = new Hl7.Fhir.Model.MarketingStatus();
            v_MarketingStatus.DeserializeJson(ref reader, options);
            current.MarketingStatus.Add(v_MarketingStatus);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'marketingStatus' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MarketingStatus.Count == 0)
          {
            current.MarketingStatus = null;
          }
          break;

        case "pharmaceuticalProduct":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'pharmaceuticalProduct' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PharmaceuticalProduct = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_PharmaceuticalProduct = new Hl7.Fhir.Model.ResourceReference();
            v_PharmaceuticalProduct.DeserializeJson(ref reader, options);
            current.PharmaceuticalProduct.Add(v_PharmaceuticalProduct);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'pharmaceuticalProduct' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PharmaceuticalProduct.Count == 0)
          {
            current.PharmaceuticalProduct = null;
          }
          break;

        case "packagedMedicinalProduct":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'packagedMedicinalProduct' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PackagedMedicinalProduct = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_PackagedMedicinalProduct = new Hl7.Fhir.Model.ResourceReference();
            v_PackagedMedicinalProduct.DeserializeJson(ref reader, options);
            current.PackagedMedicinalProduct.Add(v_PackagedMedicinalProduct);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'packagedMedicinalProduct' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PackagedMedicinalProduct.Count == 0)
          {
            current.PackagedMedicinalProduct = null;
          }
          break;

        case "attachedDocument":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'attachedDocument' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AttachedDocument = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_AttachedDocument = new Hl7.Fhir.Model.ResourceReference();
            v_AttachedDocument.DeserializeJson(ref reader, options);
            current.AttachedDocument.Add(v_AttachedDocument);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'attachedDocument' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AttachedDocument.Count == 0)
          {
            current.AttachedDocument = null;
          }
          break;

        case "masterFile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'masterFile' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MasterFile = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_MasterFile = new Hl7.Fhir.Model.ResourceReference();
            v_MasterFile.DeserializeJson(ref reader, options);
            current.MasterFile.Add(v_MasterFile);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'masterFile' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MasterFile.Count == 0)
          {
            current.MasterFile = null;
          }
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Contact = new Hl7.Fhir.Model.ResourceReference();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "clinicalTrial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'clinicalTrial' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ClinicalTrial = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ClinicalTrial = new Hl7.Fhir.Model.ResourceReference();
            v_ClinicalTrial.DeserializeJson(ref reader, options);
            current.ClinicalTrial.Add(v_ClinicalTrial);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'clinicalTrial' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ClinicalTrial.Count == 0)
          {
            current.ClinicalTrial = null;
          }
          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'name' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Name = new List<MedicinalProduct.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProduct.NameComponent v_Name = new Hl7.Fhir.Model.MedicinalProduct.NameComponent();
            v_Name.DeserializeJson(ref reader, options);
            current.Name.Add(v_Name);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'name' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Name.Count == 0)
          {
            current.Name = null;
          }
          break;

        case "crossReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'crossReference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CrossReference = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_CrossReference = new Hl7.Fhir.Model.Identifier();
            v_CrossReference.DeserializeJson(ref reader, options);
            current.CrossReference.Add(v_CrossReference);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'crossReference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CrossReference.Count == 0)
          {
            current.CrossReference = null;
          }
          break;

        case "manufacturingBusinessOperation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'manufacturingBusinessOperation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ManufacturingBusinessOperation = new List<MedicinalProduct.ManufacturingBusinessOperationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent v_ManufacturingBusinessOperation = new Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent();
            v_ManufacturingBusinessOperation.DeserializeJson(ref reader, options);
            current.ManufacturingBusinessOperation.Add(v_ManufacturingBusinessOperation);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'manufacturingBusinessOperation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ManufacturingBusinessOperation.Count == 0)
          {
            current.ManufacturingBusinessOperation = null;
          }
          break;

        case "specialDesignation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProduct error reading 'specialDesignation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SpecialDesignation = new List<MedicinalProduct.SpecialDesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent v_SpecialDesignation = new Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent();
            v_SpecialDesignation.DeserializeJson(ref reader, options);
            current.SpecialDesignation.Add(v_SpecialDesignation);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProduct error reading 'specialDesignation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SpecialDesignation.Count == 0)
          {
            current.SpecialDesignation = null;
          }
          break;

        // Complex: MedicinalProduct, Export: MedicinalProduct, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProduct#Name into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct.NameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProduct#Name, Export: NameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.ProductNameElement != null)
      {
        if (!string.IsNullOrEmpty(current.ProductNameElement.Value))
        {
          writer.WriteString("productName",current.ProductNameElement.Value);
        }
        if (current.ProductNameElement.HasExtensions() || (!string.IsNullOrEmpty(current.ProductNameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_productName",false,current.ProductNameElement.Extension,current.ProductNameElement.ElementId);
        }
      }

      if ((current.NamePart != null) && (current.NamePart.Count != 0))
      {
        writer.WritePropertyName("namePart");
        writer.WriteStartArray();
        foreach (MedicinalProduct.NamePartComponent val in current.NamePart)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.CountryLanguage != null) && (current.CountryLanguage.Count != 0))
      {
        writer.WritePropertyName("countryLanguage");
        writer.WriteStartArray();
        foreach (MedicinalProduct.CountryLanguageComponent val in current.CountryLanguage)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#Name
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct.NameComponent >>> MedicinalProduct#Name.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct.NameComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#Name
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productName":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ProductNameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ProductNameElement = new FhirString(reader.GetString());
          }
          break;

        case "_productName":
          if (current.ProductNameElement == null) { current.ProductNameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ProductNameElement).DeserializeJson(ref reader, options);
          break;

        case "namePart":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'namePart' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NamePart = new List<MedicinalProduct.NamePartComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProduct.NamePartComponent v_NamePart = new Hl7.Fhir.Model.MedicinalProduct.NamePartComponent();
            v_NamePart.DeserializeJson(ref reader, options);
            current.NamePart.Add(v_NamePart);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'namePart' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NamePart.Count == 0)
          {
            current.NamePart = null;
          }
          break;

        case "countryLanguage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'countryLanguage' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CountryLanguage = new List<MedicinalProduct.CountryLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent v_CountryLanguage = new Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent();
            v_CountryLanguage.DeserializeJson(ref reader, options);
            current.CountryLanguage.Add(v_CountryLanguage);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'countryLanguage' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CountryLanguage.Count == 0)
          {
            current.CountryLanguage = null;
          }
          break;

        // Complex: name, Export: NameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProduct#NamePart into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct.NamePartComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProduct#NamePart, Export: NamePartComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.PartElement != null)
      {
        if (!string.IsNullOrEmpty(current.PartElement.Value))
        {
          writer.WriteString("part",current.PartElement.Value);
        }
        if (current.PartElement.HasExtensions() || (!string.IsNullOrEmpty(current.PartElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_part",false,current.PartElement.Extension,current.PartElement.ElementId);
        }
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#NamePart
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct.NamePartComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct.NamePartComponent >>> MedicinalProduct#NamePart.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct.NamePartComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#NamePart
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct.NamePartComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "part":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PartElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PartElement = new FhirString(reader.GetString());
          }
          break;

        case "_part":
          if (current.PartElement == null) { current.PartElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PartElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        // Complex: namePart, Export: NamePartComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProduct#CountryLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProduct#CountryLanguage, Export: CountryLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Country != null)
      {
        writer.WritePropertyName("country");
        current.Country.SerializeJson(writer, options);
      }

      if (current.Jurisdiction != null)
      {
        writer.WritePropertyName("jurisdiction");
        current.Jurisdiction.SerializeJson(writer, options);
      }

      if (current.Language != null)
      {
        writer.WritePropertyName("language");
        current.Language.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#CountryLanguage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct.CountryLanguageComponent >>> MedicinalProduct#CountryLanguage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct.CountryLanguageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#CountryLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          current.Country = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Country).DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          current.Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Jurisdiction).DeserializeJson(ref reader, options);
          break;

        case "language":
          current.Language = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Language).DeserializeJson(ref reader, options);
          break;

        // Complex: countryLanguage, Export: CountryLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProduct#ManufacturingBusinessOperation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProduct#ManufacturingBusinessOperation, Export: ManufacturingBusinessOperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.OperationType != null)
      {
        writer.WritePropertyName("operationType");
        current.OperationType.SerializeJson(writer, options);
      }

      if (current.AuthorisationReferenceNumber != null)
      {
        writer.WritePropertyName("authorisationReferenceNumber");
        current.AuthorisationReferenceNumber.SerializeJson(writer, options);
      }

      if (current.EffectiveDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.EffectiveDateElement.Value))
        {
          writer.WriteString("effectiveDate",current.EffectiveDateElement.Value);
        }
        if (current.EffectiveDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.EffectiveDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_effectiveDate",false,current.EffectiveDateElement.Extension,current.EffectiveDateElement.ElementId);
        }
      }

      if (current.ConfidentialityIndicator != null)
      {
        writer.WritePropertyName("confidentialityIndicator");
        current.ConfidentialityIndicator.SerializeJson(writer, options);
      }

      if ((current.Manufacturer != null) && (current.Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Manufacturer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Regulator != null)
      {
        writer.WritePropertyName("regulator");
        current.Regulator.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#ManufacturingBusinessOperation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct.ManufacturingBusinessOperationComponent >>> MedicinalProduct#ManufacturingBusinessOperation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct.ManufacturingBusinessOperationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#ManufacturingBusinessOperation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operationType":
          current.OperationType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OperationType).DeserializeJson(ref reader, options);
          break;

        case "authorisationReferenceNumber":
          current.AuthorisationReferenceNumber = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.AuthorisationReferenceNumber).DeserializeJson(ref reader, options);
          break;

        case "effectiveDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EffectiveDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.EffectiveDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_effectiveDate":
          if (current.EffectiveDateElement == null) { current.EffectiveDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.EffectiveDateElement).DeserializeJson(ref reader, options);
          break;

        case "confidentialityIndicator":
          current.ConfidentialityIndicator = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ConfidentialityIndicator).DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManufacturingBusinessOperationComponent error reading 'manufacturer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Manufacturer = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Manufacturer = new Hl7.Fhir.Model.ResourceReference();
            v_Manufacturer.DeserializeJson(ref reader, options);
            current.Manufacturer.Add(v_Manufacturer);

            if (!reader.Read())
            {
              throw new JsonException($"ManufacturingBusinessOperationComponent error reading 'manufacturer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Manufacturer.Count == 0)
          {
            current.Manufacturer = null;
          }
          break;

        case "regulator":
          current.Regulator = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Regulator).DeserializeJson(ref reader, options);
          break;

        // Complex: manufacturingBusinessOperation, Export: ManufacturingBusinessOperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProduct#SpecialDesignation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProduct#SpecialDesignation, Export: SpecialDesignationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.IntendedUse != null)
      {
        writer.WritePropertyName("intendedUse");
        current.IntendedUse.SerializeJson(writer, options);
      }

      if (current.Indication != null)
      {
        switch (current.Indication)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("indicationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("indicationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.Species != null)
      {
        writer.WritePropertyName("species");
        current.Species.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#SpecialDesignation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProduct.SpecialDesignationComponent >>> MedicinalProduct#SpecialDesignation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProduct.SpecialDesignationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProduct#SpecialDesignation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SpecialDesignationComponent error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"SpecialDesignationComponent error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "intendedUse":
          current.IntendedUse = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.IntendedUse).DeserializeJson(ref reader, options);
          break;

        case "indicationCodeableConcept":
          current.Indication = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Indication).DeserializeJson(ref reader, options);
          break;

        case "indicationReference":
          current.Indication = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Indication).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "species":
          current.Species = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Species).DeserializeJson(ref reader, options);
          break;

        // Complex: specialDesignation, Export: SpecialDesignationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MedicinalProductJsonConverter : JsonConverter<Hl7.Fhir.Model.MedicinalProduct>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.MedicinalProduct value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.MedicinalProduct Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.MedicinalProduct();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
