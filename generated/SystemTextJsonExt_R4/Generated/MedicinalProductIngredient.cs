// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for MedicinalProductIngredient
  /// </summary>
  public static class MedicinalProductIngredientSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR MedicinalProductIngredient into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MedicinalProductIngredient");
      // Complex: MedicinalProductIngredient, Export: MedicinalProductIngredient, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.AllergenicIndicatorElement != null)
      {
        if (current.AllergenicIndicatorElement.Value != null)
        {
          writer.WriteBoolean("allergenicIndicator",(bool)current.AllergenicIndicatorElement.Value);
        }
        if (current.AllergenicIndicatorElement.HasExtensions() || (!string.IsNullOrEmpty(current.AllergenicIndicatorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_allergenicIndicator",false,current.AllergenicIndicatorElement.Extension,current.AllergenicIndicatorElement.ElementId);
        }
      }

      if ((current.Manufacturer != null) && (current.Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Manufacturer)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.SpecifiedSubstance != null) && (current.SpecifiedSubstance.Count != 0))
      {
        writer.WritePropertyName("specifiedSubstance");
        writer.WriteStartArray();
        foreach (MedicinalProductIngredient.SpecifiedSubstanceComponent val in current.SpecifiedSubstance)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Substance != null)
      {
        writer.WritePropertyName("substance");
        current.Substance.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductIngredient >>> MedicinalProductIngredient.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductIngredient: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductIngredient current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        case "allergenicIndicator":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AllergenicIndicatorElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AllergenicIndicatorElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_allergenicIndicator":
          if (current.AllergenicIndicatorElement == null) { current.AllergenicIndicatorElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AllergenicIndicatorElement).DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductIngredient error reading 'manufacturer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Manufacturer = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Manufacturer = new Hl7.Fhir.Model.ResourceReference();
            v_Manufacturer.DeserializeJson(ref reader, options);
            current.Manufacturer.Add(v_Manufacturer);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductIngredient error reading 'manufacturer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Manufacturer.Count == 0)
          {
            current.Manufacturer = null;
          }
          break;

        case "specifiedSubstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductIngredient error reading 'specifiedSubstance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SpecifiedSubstance = new List<MedicinalProductIngredient.SpecifiedSubstanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent v_SpecifiedSubstance = new Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent();
            v_SpecifiedSubstance.DeserializeJson(ref reader, options);
            current.SpecifiedSubstance.Add(v_SpecifiedSubstance);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductIngredient error reading 'specifiedSubstance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SpecifiedSubstance.Count == 0)
          {
            current.SpecifiedSubstance = null;
          }
          break;

        case "substance":
          current.Substance = new Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent();
          ((Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent)current.Substance).DeserializeJson(ref reader, options);
          break;

        // Complex: MedicinalProductIngredient, Export: MedicinalProductIngredient, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductIngredient#SpecifiedSubstance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductIngredient#SpecifiedSubstance, Export: SpecifiedSubstanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Group != null)
      {
        writer.WritePropertyName("group");
        current.Group.SerializeJson(writer, options);
      }

      if (current.Confidentiality != null)
      {
        writer.WritePropertyName("confidentiality");
        current.Confidentiality.SerializeJson(writer, options);
      }

      if ((current.Strength != null) && (current.Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();
        foreach (MedicinalProductIngredient.StrengthComponent val in current.Strength)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#SpecifiedSubstance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductIngredient.SpecifiedSubstanceComponent >>> MedicinalProductIngredient#SpecifiedSubstance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductIngredient.SpecifiedSubstanceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#SpecifiedSubstance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "group":
          current.Group = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Group).DeserializeJson(ref reader, options);
          break;

        case "confidentiality":
          current.Confidentiality = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Confidentiality).DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SpecifiedSubstanceComponent error reading 'strength' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Strength = new List<MedicinalProductIngredient.StrengthComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent v_Strength = new Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent();
            v_Strength.DeserializeJson(ref reader, options);
            current.Strength.Add(v_Strength);

            if (!reader.Read())
            {
              throw new JsonException($"SpecifiedSubstanceComponent error reading 'strength' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Strength.Count == 0)
          {
            current.Strength = null;
          }
          break;

        // Complex: specifiedSubstance, Export: SpecifiedSubstanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductIngredient#Strength into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductIngredient#Strength, Export: StrengthComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Presentation != null)
      {
        writer.WritePropertyName("presentation");
        current.Presentation.SerializeJson(writer, options);
      }

      if (current.PresentationLowLimit != null)
      {
        writer.WritePropertyName("presentationLowLimit");
        current.PresentationLowLimit.SerializeJson(writer, options);
      }

      if (current.Concentration != null)
      {
        writer.WritePropertyName("concentration");
        current.Concentration.SerializeJson(writer, options);
      }

      if (current.ConcentrationLowLimit != null)
      {
        writer.WritePropertyName("concentrationLowLimit");
        current.ConcentrationLowLimit.SerializeJson(writer, options);
      }

      if (current.MeasurementPointElement != null)
      {
        if (!string.IsNullOrEmpty(current.MeasurementPointElement.Value))
        {
          writer.WriteString("measurementPoint",current.MeasurementPointElement.Value);
        }
        if (current.MeasurementPointElement.HasExtensions() || (!string.IsNullOrEmpty(current.MeasurementPointElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_measurementPoint",false,current.MeasurementPointElement.Extension,current.MeasurementPointElement.ElementId);
        }
      }

      if ((current.Country != null) && (current.Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Country)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ReferenceStrength != null) && (current.ReferenceStrength.Count != 0))
      {
        writer.WritePropertyName("referenceStrength");
        writer.WriteStartArray();
        foreach (MedicinalProductIngredient.ReferenceStrengthComponent val in current.ReferenceStrength)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#Strength
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductIngredient.StrengthComponent >>> MedicinalProductIngredient#Strength.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductIngredient.StrengthComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#Strength
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "presentation":
          current.Presentation = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.Presentation).DeserializeJson(ref reader, options);
          break;

        case "presentationLowLimit":
          current.PresentationLowLimit = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.PresentationLowLimit).DeserializeJson(ref reader, options);
          break;

        case "concentration":
          current.Concentration = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.Concentration).DeserializeJson(ref reader, options);
          break;

        case "concentrationLowLimit":
          current.ConcentrationLowLimit = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.ConcentrationLowLimit).DeserializeJson(ref reader, options);
          break;

        case "measurementPoint":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MeasurementPointElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MeasurementPointElement = new FhirString(reader.GetString());
          }
          break;

        case "_measurementPoint":
          if (current.MeasurementPointElement == null) { current.MeasurementPointElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MeasurementPointElement).DeserializeJson(ref reader, options);
          break;

        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"StrengthComponent error reading 'country' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Country = new Hl7.Fhir.Model.CodeableConcept();
            v_Country.DeserializeJson(ref reader, options);
            current.Country.Add(v_Country);

            if (!reader.Read())
            {
              throw new JsonException($"StrengthComponent error reading 'country' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Country.Count == 0)
          {
            current.Country = null;
          }
          break;

        case "referenceStrength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"StrengthComponent error reading 'referenceStrength' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReferenceStrength = new List<MedicinalProductIngredient.ReferenceStrengthComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent v_ReferenceStrength = new Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent();
            v_ReferenceStrength.DeserializeJson(ref reader, options);
            current.ReferenceStrength.Add(v_ReferenceStrength);

            if (!reader.Read())
            {
              throw new JsonException($"StrengthComponent error reading 'referenceStrength' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReferenceStrength.Count == 0)
          {
            current.ReferenceStrength = null;
          }
          break;

        // Complex: strength, Export: StrengthComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductIngredient#ReferenceStrength into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductIngredient#ReferenceStrength, Export: ReferenceStrengthComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Substance != null)
      {
        writer.WritePropertyName("substance");
        current.Substance.SerializeJson(writer, options);
      }

      if (current.Strength != null)
      {
        writer.WritePropertyName("strength");
        current.Strength.SerializeJson(writer, options);
      }

      if (current.StrengthLowLimit != null)
      {
        writer.WritePropertyName("strengthLowLimit");
        current.StrengthLowLimit.SerializeJson(writer, options);
      }

      if (current.MeasurementPointElement != null)
      {
        if (!string.IsNullOrEmpty(current.MeasurementPointElement.Value))
        {
          writer.WriteString("measurementPoint",current.MeasurementPointElement.Value);
        }
        if (current.MeasurementPointElement.HasExtensions() || (!string.IsNullOrEmpty(current.MeasurementPointElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_measurementPoint",false,current.MeasurementPointElement.Extension,current.MeasurementPointElement.ElementId);
        }
      }

      if ((current.Country != null) && (current.Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Country)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#ReferenceStrength
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductIngredient.ReferenceStrengthComponent >>> MedicinalProductIngredient#ReferenceStrength.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductIngredient.ReferenceStrengthComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#ReferenceStrength
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "substance":
          current.Substance = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Substance).DeserializeJson(ref reader, options);
          break;

        case "strength":
          current.Strength = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.Strength).DeserializeJson(ref reader, options);
          break;

        case "strengthLowLimit":
          current.StrengthLowLimit = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.StrengthLowLimit).DeserializeJson(ref reader, options);
          break;

        case "measurementPoint":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MeasurementPointElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MeasurementPointElement = new FhirString(reader.GetString());
          }
          break;

        case "_measurementPoint":
          if (current.MeasurementPointElement == null) { current.MeasurementPointElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MeasurementPointElement).DeserializeJson(ref reader, options);
          break;

        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ReferenceStrengthComponent error reading 'country' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Country = new Hl7.Fhir.Model.CodeableConcept();
            v_Country.DeserializeJson(ref reader, options);
            current.Country.Add(v_Country);

            if (!reader.Read())
            {
              throw new JsonException($"ReferenceStrengthComponent error reading 'country' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Country.Count == 0)
          {
            current.Country = null;
          }
          break;

        // Complex: referenceStrength, Export: ReferenceStrengthComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductIngredient#Substance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductIngredient#Substance, Export: SubstanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if ((current.Strength != null) && (current.Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();
        foreach (MedicinalProductIngredient.StrengthComponent val in current.Strength)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#Substance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductIngredient.SubstanceComponent >>> MedicinalProductIngredient#Substance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductIngredient.SubstanceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductIngredient#Substance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceComponent error reading 'strength' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Strength = new List<MedicinalProductIngredient.StrengthComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent v_Strength = new Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent();
            v_Strength.DeserializeJson(ref reader, options);
            current.Strength.Add(v_Strength);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceComponent error reading 'strength' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Strength.Count == 0)
          {
            current.Strength = null;
          }
          break;

        // Complex: substance, Export: SubstanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MedicinalProductIngredientJsonConverter : JsonConverter<Hl7.Fhir.Model.MedicinalProductIngredient>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.MedicinalProductIngredient value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.MedicinalProductIngredient Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.MedicinalProductIngredient();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
