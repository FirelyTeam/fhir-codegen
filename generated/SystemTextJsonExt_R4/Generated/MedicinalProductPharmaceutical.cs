// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for MedicinalProductPharmaceutical
  /// </summary>
  public static class MedicinalProductPharmaceuticalSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR MedicinalProductPharmaceutical into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MedicinalProductPharmaceutical");
      // Complex: MedicinalProductPharmaceutical, Export: MedicinalProductPharmaceutical, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.AdministrableDoseForm != null)
      {
        writer.WritePropertyName("administrableDoseForm");
        current.AdministrableDoseForm.SerializeJson(writer, options);
      }

      if (current.UnitOfPresentation != null)
      {
        writer.WritePropertyName("unitOfPresentation");
        current.UnitOfPresentation.SerializeJson(writer, options);
      }

      if ((current.Ingredient != null) && (current.Ingredient.Count != 0))
      {
        writer.WritePropertyName("ingredient");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Ingredient)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Device != null) && (current.Device.Count != 0))
      {
        writer.WritePropertyName("device");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Device)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Characteristics != null) && (current.Characteristics.Count != 0))
      {
        writer.WritePropertyName("characteristics");
        writer.WriteStartArray();
        foreach (MedicinalProductPharmaceutical.CharacteristicsComponent val in current.Characteristics)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.RouteOfAdministration != null) && (current.RouteOfAdministration.Count != 0))
      {
        writer.WritePropertyName("routeOfAdministration");
        writer.WriteStartArray();
        foreach (MedicinalProductPharmaceutical.RouteOfAdministrationComponent val in current.RouteOfAdministration)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductPharmaceutical >>> MedicinalProductPharmaceutical.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductPharmaceutical: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductPharmaceutical current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductPharmaceutical error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductPharmaceutical error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "administrableDoseForm":
          current.AdministrableDoseForm = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AdministrableDoseForm).DeserializeJson(ref reader, options);
          break;

        case "unitOfPresentation":
          current.UnitOfPresentation = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.UnitOfPresentation).DeserializeJson(ref reader, options);
          break;

        case "ingredient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductPharmaceutical error reading 'ingredient' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Ingredient = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Ingredient = new Hl7.Fhir.Model.ResourceReference();
            v_Ingredient.DeserializeJson(ref reader, options);
            current.Ingredient.Add(v_Ingredient);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductPharmaceutical error reading 'ingredient' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Ingredient.Count == 0)
          {
            current.Ingredient = null;
          }
          break;

        case "device":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductPharmaceutical error reading 'device' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Device = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Device = new Hl7.Fhir.Model.ResourceReference();
            v_Device.DeserializeJson(ref reader, options);
            current.Device.Add(v_Device);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductPharmaceutical error reading 'device' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Device.Count == 0)
          {
            current.Device = null;
          }
          break;

        case "characteristics":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductPharmaceutical error reading 'characteristics' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Characteristics = new List<MedicinalProductPharmaceutical.CharacteristicsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent v_Characteristics = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent();
            v_Characteristics.DeserializeJson(ref reader, options);
            current.Characteristics.Add(v_Characteristics);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductPharmaceutical error reading 'characteristics' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Characteristics.Count == 0)
          {
            current.Characteristics = null;
          }
          break;

        case "routeOfAdministration":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MedicinalProductPharmaceutical error reading 'routeOfAdministration' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RouteOfAdministration = new List<MedicinalProductPharmaceutical.RouteOfAdministrationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent v_RouteOfAdministration = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent();
            v_RouteOfAdministration.DeserializeJson(ref reader, options);
            current.RouteOfAdministration.Add(v_RouteOfAdministration);

            if (!reader.Read())
            {
              throw new JsonException($"MedicinalProductPharmaceutical error reading 'routeOfAdministration' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RouteOfAdministration.Count == 0)
          {
            current.RouteOfAdministration = null;
          }
          break;

        // Complex: MedicinalProductPharmaceutical, Export: MedicinalProductPharmaceutical, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductPharmaceutical#Characteristics into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductPharmaceutical#Characteristics, Export: CharacteristicsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#Characteristics
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductPharmaceutical.CharacteristicsComponent >>> MedicinalProductPharmaceutical#Characteristics.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductPharmaceutical.CharacteristicsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#Characteristics
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        // Complex: characteristics, Export: CharacteristicsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductPharmaceutical#RouteOfAdministration into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductPharmaceutical#RouteOfAdministration, Export: RouteOfAdministrationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.FirstDose != null)
      {
        writer.WritePropertyName("firstDose");
        current.FirstDose.SerializeJson(writer, options);
      }

      if (current.MaxSingleDose != null)
      {
        writer.WritePropertyName("maxSingleDose");
        current.MaxSingleDose.SerializeJson(writer, options);
      }

      if (current.MaxDosePerDay != null)
      {
        writer.WritePropertyName("maxDosePerDay");
        current.MaxDosePerDay.SerializeJson(writer, options);
      }

      if (current.MaxDosePerTreatmentPeriod != null)
      {
        writer.WritePropertyName("maxDosePerTreatmentPeriod");
        current.MaxDosePerTreatmentPeriod.SerializeJson(writer, options);
      }

      if (current.MaxTreatmentPeriod != null)
      {
        writer.WritePropertyName("maxTreatmentPeriod");
        current.MaxTreatmentPeriod.SerializeJson(writer, options);
      }

      if ((current.TargetSpecies != null) && (current.TargetSpecies.Count != 0))
      {
        writer.WritePropertyName("targetSpecies");
        writer.WriteStartArray();
        foreach (MedicinalProductPharmaceutical.TargetSpeciesComponent val in current.TargetSpecies)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#RouteOfAdministration
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductPharmaceutical.RouteOfAdministrationComponent >>> MedicinalProductPharmaceutical#RouteOfAdministration.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductPharmaceutical.RouteOfAdministrationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#RouteOfAdministration
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "firstDose":
          current.FirstDose = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.FirstDose).DeserializeJson(ref reader, options);
          break;

        case "maxSingleDose":
          current.MaxSingleDose = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.MaxSingleDose).DeserializeJson(ref reader, options);
          break;

        case "maxDosePerDay":
          current.MaxDosePerDay = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.MaxDosePerDay).DeserializeJson(ref reader, options);
          break;

        case "maxDosePerTreatmentPeriod":
          current.MaxDosePerTreatmentPeriod = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.MaxDosePerTreatmentPeriod).DeserializeJson(ref reader, options);
          break;

        case "maxTreatmentPeriod":
          current.MaxTreatmentPeriod = new Hl7.Fhir.Model.Duration();
          ((Hl7.Fhir.Model.Duration)current.MaxTreatmentPeriod).DeserializeJson(ref reader, options);
          break;

        case "targetSpecies":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RouteOfAdministrationComponent error reading 'targetSpecies' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.TargetSpecies = new List<MedicinalProductPharmaceutical.TargetSpeciesComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent v_TargetSpecies = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent();
            v_TargetSpecies.DeserializeJson(ref reader, options);
            current.TargetSpecies.Add(v_TargetSpecies);

            if (!reader.Read())
            {
              throw new JsonException($"RouteOfAdministrationComponent error reading 'targetSpecies' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TargetSpecies.Count == 0)
          {
            current.TargetSpecies = null;
          }
          break;

        // Complex: routeOfAdministration, Export: RouteOfAdministrationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductPharmaceutical#TargetSpecies into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductPharmaceutical#TargetSpecies, Export: TargetSpeciesComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if ((current.WithdrawalPeriod != null) && (current.WithdrawalPeriod.Count != 0))
      {
        writer.WritePropertyName("withdrawalPeriod");
        writer.WriteStartArray();
        foreach (MedicinalProductPharmaceutical.WithdrawalPeriodComponent val in current.WithdrawalPeriod)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#TargetSpecies
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductPharmaceutical.TargetSpeciesComponent >>> MedicinalProductPharmaceutical#TargetSpecies.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductPharmaceutical.TargetSpeciesComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#TargetSpecies
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "withdrawalPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TargetSpeciesComponent error reading 'withdrawalPeriod' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.WithdrawalPeriod = new List<MedicinalProductPharmaceutical.WithdrawalPeriodComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent v_WithdrawalPeriod = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent();
            v_WithdrawalPeriod.DeserializeJson(ref reader, options);
            current.WithdrawalPeriod.Add(v_WithdrawalPeriod);

            if (!reader.Read())
            {
              throw new JsonException($"TargetSpeciesComponent error reading 'withdrawalPeriod' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.WithdrawalPeriod.Count == 0)
          {
            current.WithdrawalPeriod = null;
          }
          break;

        // Complex: targetSpecies, Export: TargetSpeciesComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MedicinalProductPharmaceutical#WithdrawalPeriod into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MedicinalProductPharmaceutical#WithdrawalPeriod, Export: WithdrawalPeriodComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Tissue != null)
      {
        writer.WritePropertyName("tissue");
        current.Tissue.SerializeJson(writer, options);
      }

      if (current.Value != null)
      {
        writer.WritePropertyName("value");
        current.Value.SerializeJson(writer, options);
      }

      if (current.SupportingInformationElement != null)
      {
        if (!string.IsNullOrEmpty(current.SupportingInformationElement.Value))
        {
          writer.WriteString("supportingInformation",current.SupportingInformationElement.Value);
        }
        if (current.SupportingInformationElement.HasExtensions() || (!string.IsNullOrEmpty(current.SupportingInformationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_supportingInformation",false,current.SupportingInformationElement.Extension,current.SupportingInformationElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#WithdrawalPeriod
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MedicinalProductPharmaceutical.WithdrawalPeriodComponent >>> MedicinalProductPharmaceutical#WithdrawalPeriod.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MedicinalProductPharmaceutical.WithdrawalPeriodComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MedicinalProductPharmaceutical#WithdrawalPeriod
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "tissue":
          current.Tissue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Tissue).DeserializeJson(ref reader, options);
          break;

        case "value":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SupportingInformationElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SupportingInformationElement = new FhirString(reader.GetString());
          }
          break;

        case "_supportingInformation":
          if (current.SupportingInformationElement == null) { current.SupportingInformationElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SupportingInformationElement).DeserializeJson(ref reader, options);
          break;

        // Complex: withdrawalPeriod, Export: WithdrawalPeriodComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MedicinalProductPharmaceuticalJsonConverter : JsonConverter<Hl7.Fhir.Model.MedicinalProductPharmaceutical>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.MedicinalProductPharmaceutical value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.MedicinalProductPharmaceutical Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.MedicinalProductPharmaceutical();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
