// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for Questionnaire
  /// </summary>
  public static class QuestionnaireSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR Questionnaire into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Questionnaire current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Questionnaire");
      // Complex: Questionnaire, Export: Questionnaire, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if ((current.DerivedFromElement != null) && (current.DerivedFromElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.DerivedFromElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("derivedFrom");
          writer.WriteStartArray();
          foreach (Canonical val in current.DerivedFromElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_derivedFrom");
          writer.WriteStartArray();
          foreach (Canonical val in current.DerivedFromElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if ((current.SubjectTypeElement != null) && (current.SubjectTypeElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Code<Hl7.Fhir.Model.ResourceType> val in current.SubjectTypeElement)
        {
          if (val.Value != null) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("subjectType");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.ResourceType> val in current.SubjectTypeElement)
          {
            if (val.Value == null)
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(Hl7.Fhir.Utility.EnumUtility.GetLiteral(val.Value));
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_subjectType");
          writer.WriteStartArray();
          foreach (Code<Hl7.Fhir.Model.ResourceType> val in current.SubjectTypeElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.ApprovalDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.ApprovalDateElement.Value))
        {
          writer.WriteString("approvalDate",current.ApprovalDateElement.Value);
        }
        if (current.ApprovalDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.ApprovalDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_approvalDate",false,current.ApprovalDateElement.Extension,current.ApprovalDateElement.ElementId);
        }
      }

      if (current.LastReviewDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.LastReviewDateElement.Value))
        {
          writer.WriteString("lastReviewDate",current.LastReviewDateElement.Value);
        }
        if (current.LastReviewDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.LastReviewDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lastReviewDate",false,current.LastReviewDateElement.Extension,current.LastReviewDateElement.ElementId);
        }
      }

      if (current.EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        current.EffectivePeriod.SerializeJson(writer, options);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (Coding val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (Questionnaire.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Questionnaire current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Questionnaire >>> Questionnaire.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Questionnaire: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Questionnaire current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'derivedFrom' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DerivedFromElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.DerivedFromElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.DerivedFromElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'derivedFrom' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DerivedFromElement.Count == 0)
          {
            current.DerivedFromElement = null;
          }
          break;

        case "_derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'derivedFrom' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_derivedFrom = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_derivedFrom >= current.DerivedFromElement.Count)
            {
              current.DerivedFromElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.DerivedFromElement[i_derivedFrom++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'derivedFrom' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'subjectType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubjectTypeElement = new List<Code<Hl7.Fhir.Model.ResourceType>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SubjectTypeElement.Add(new Code<Hl7.Fhir.Model.ResourceType>());
              reader.Skip();
            }
            else
            {
              current.SubjectTypeElement.Add(new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'subjectType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubjectTypeElement.Count == 0)
          {
            current.SubjectTypeElement = null;
          }
          break;

        case "_subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'subjectType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_subjectType = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_subjectType >= current.SubjectTypeElement.Count)
            {
              current.SubjectTypeElement.Add(new Code<Hl7.Fhir.Model.ResourceType>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SubjectTypeElement[i_subjectType++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'subjectType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "approvalDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ApprovalDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.ApprovalDateElement = new Date(reader.GetString());
          }
          break;

        case "_approvalDate":
          if (current.ApprovalDateElement == null) { current.ApprovalDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.ApprovalDateElement).DeserializeJson(ref reader, options);
          break;

        case "lastReviewDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LastReviewDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.LastReviewDateElement = new Date(reader.GetString());
          }
          break;

        case "_lastReviewDate":
          if (current.LastReviewDateElement == null) { current.LastReviewDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.LastReviewDateElement).DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          current.EffectivePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.EffectivePeriod).DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'code' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Code = new Hl7.Fhir.Model.Coding();
            v_Code.DeserializeJson(ref reader, options);
            current.Code.Add(v_Code);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'code' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Questionnaire error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<Questionnaire.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Questionnaire.ItemComponent v_Item = new Hl7.Fhir.Model.Questionnaire.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"Questionnaire error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        // Complex: Questionnaire, Export: Questionnaire, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#Item into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Questionnaire.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.LinkIdElement != null)
      {
        if (!string.IsNullOrEmpty(current.LinkIdElement.Value))
        {
          writer.WriteString("linkId",current.LinkIdElement.Value);
        }
        if (current.LinkIdElement.HasExtensions() || (!string.IsNullOrEmpty(current.LinkIdElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_linkId",false,current.LinkIdElement.Extension,current.LinkIdElement.ElementId);
        }
      }

      if (current.DefinitionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DefinitionElement.Value))
        {
          writer.WriteString("definition",current.DefinitionElement.Value);
        }
        if (current.DefinitionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DefinitionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_definition",false,current.DefinitionElement.Extension,current.DefinitionElement.ElementId);
        }
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (Coding val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.PrefixElement != null)
      {
        if (!string.IsNullOrEmpty(current.PrefixElement.Value))
        {
          writer.WriteString("prefix",current.PrefixElement.Value);
        }
        if (current.PrefixElement.HasExtensions() || (!string.IsNullOrEmpty(current.PrefixElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_prefix",false,current.PrefixElement.Extension,current.PrefixElement.ElementId);
        }
      }

      if (current.TextElement != null)
      {
        if (!string.IsNullOrEmpty(current.TextElement.Value))
        {
          writer.WriteString("text",current.TextElement.Value);
        }
        if (current.TextElement.HasExtensions() || (!string.IsNullOrEmpty(current.TextElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_text",false,current.TextElement.Extension,current.TextElement.ElementId);
        }
      }

      if (current.TypeElement != null)
      {
        if (current.TypeElement.Value != null)
        {
          writer.WriteString("type",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.TypeElement.Value));
        }
        if (current.TypeElement.HasExtensions() || (!string.IsNullOrEmpty(current.TypeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_type",false,current.TypeElement.Extension,current.TypeElement.ElementId);
        }
      }

      if ((current.EnableWhen != null) && (current.EnableWhen.Count != 0))
      {
        writer.WritePropertyName("enableWhen");
        writer.WriteStartArray();
        foreach (Questionnaire.EnableWhenComponent val in current.EnableWhen)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.EnableBehaviorElement != null)
      {
        if (current.EnableBehaviorElement.Value != null)
        {
          writer.WriteString("enableBehavior",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.EnableBehaviorElement.Value));
        }
        if (current.EnableBehaviorElement.HasExtensions() || (!string.IsNullOrEmpty(current.EnableBehaviorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_enableBehavior",false,current.EnableBehaviorElement.Extension,current.EnableBehaviorElement.ElementId);
        }
      }

      if (current.RequiredElement != null)
      {
        if (current.RequiredElement.Value != null)
        {
          writer.WriteBoolean("required",(bool)current.RequiredElement.Value);
        }
        if (current.RequiredElement.HasExtensions() || (!string.IsNullOrEmpty(current.RequiredElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_required",false,current.RequiredElement.Extension,current.RequiredElement.ElementId);
        }
      }

      if (current.RepeatsElement != null)
      {
        if (current.RepeatsElement.Value != null)
        {
          writer.WriteBoolean("repeats",(bool)current.RepeatsElement.Value);
        }
        if (current.RepeatsElement.HasExtensions() || (!string.IsNullOrEmpty(current.RepeatsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_repeats",false,current.RepeatsElement.Extension,current.RepeatsElement.ElementId);
        }
      }

      if (current.ReadOnlyElement != null)
      {
        if (current.ReadOnlyElement.Value != null)
        {
          writer.WriteBoolean("readOnly",(bool)current.ReadOnlyElement.Value);
        }
        if (current.ReadOnlyElement.HasExtensions() || (!string.IsNullOrEmpty(current.ReadOnlyElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_readOnly",false,current.ReadOnlyElement.Extension,current.ReadOnlyElement.ElementId);
        }
      }

      if (current.MaxLengthElement != null)
      {
        if (current.MaxLengthElement.Value != null)
        {
          writer.WriteNumber("maxLength",(int)current.MaxLengthElement.Value);
        }
        if (current.MaxLengthElement.HasExtensions() || (!string.IsNullOrEmpty(current.MaxLengthElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_maxLength",false,current.MaxLengthElement.Extension,current.MaxLengthElement.ElementId);
        }
      }

      if (current.AnswerValueSetElement != null)
      {
        if (!string.IsNullOrEmpty(current.AnswerValueSetElement.Value))
        {
          writer.WriteString("answerValueSet",current.AnswerValueSetElement.Value);
        }
        if (current.AnswerValueSetElement.HasExtensions() || (!string.IsNullOrEmpty(current.AnswerValueSetElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerValueSet",false,current.AnswerValueSetElement.Extension,current.AnswerValueSetElement.ElementId);
        }
      }

      if ((current.AnswerOption != null) && (current.AnswerOption.Count != 0))
      {
        writer.WritePropertyName("answerOption");
        writer.WriteStartArray();
        foreach (Questionnaire.AnswerOptionComponent val in current.AnswerOption)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Initial != null) && (current.Initial.Count != 0))
      {
        writer.WritePropertyName("initial");
        writer.WriteStartArray();
        foreach (Questionnaire.InitialComponent val in current.Initial)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Item != null) && (current.Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();
        foreach (Questionnaire.ItemComponent val in current.Item)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Item
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Questionnaire.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Questionnaire.ItemComponent >>> Questionnaire#Item.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Questionnaire.ItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Questionnaire.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "linkId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LinkIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.LinkIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_linkId":
          if (current.LinkIdElement == null) { current.LinkIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.LinkIdElement).DeserializeJson(ref reader, options);
          break;

        case "definition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefinitionElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.DefinitionElement = new FhirUri(reader.GetString());
          }
          break;

        case "_definition":
          if (current.DefinitionElement == null) { current.DefinitionElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.DefinitionElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'code' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Code = new Hl7.Fhir.Model.Coding();
            v_Code.DeserializeJson(ref reader, options);
            current.Code.Add(v_Code);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'code' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }
          break;

        case "prefix":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PrefixElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PrefixElement = new FhirString(reader.GetString());
          }
          break;

        case "_prefix":
          if (current.PrefixElement == null) { current.PrefixElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PrefixElement).DeserializeJson(ref reader, options);
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "enableWhen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'enableWhen' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.EnableWhen = new List<Questionnaire.EnableWhenComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Questionnaire.EnableWhenComponent v_EnableWhen = new Hl7.Fhir.Model.Questionnaire.EnableWhenComponent();
            v_EnableWhen.DeserializeJson(ref reader, options);
            current.EnableWhen.Add(v_EnableWhen);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'enableWhen' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.EnableWhen.Count == 0)
          {
            current.EnableWhen = null;
          }
          break;

        case "enableBehavior":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EnableBehaviorElement = new Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>();
            reader.Skip();
          }
          else
          {
            current.EnableBehaviorElement = new Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>(reader.GetString()));
          }
          break;

        case "_enableBehavior":
          if (current.EnableBehaviorElement == null) { current.EnableBehaviorElement = new Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>(); }
          ((Hl7.Fhir.Model.Element)current.EnableBehaviorElement).DeserializeJson(ref reader, options);
          break;

        case "required":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequiredElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.RequiredElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_required":
          if (current.RequiredElement == null) { current.RequiredElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.RequiredElement).DeserializeJson(ref reader, options);
          break;

        case "repeats":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RepeatsElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.RepeatsElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_repeats":
          if (current.RepeatsElement == null) { current.RepeatsElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.RepeatsElement).DeserializeJson(ref reader, options);
          break;

        case "readOnly":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReadOnlyElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ReadOnlyElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_readOnly":
          if (current.ReadOnlyElement == null) { current.ReadOnlyElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ReadOnlyElement).DeserializeJson(ref reader, options);
          break;

        case "maxLength":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MaxLengthElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.MaxLengthElement = new Integer(reader.GetInt32());
          }
          break;

        case "_maxLength":
          if (current.MaxLengthElement == null) { current.MaxLengthElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.MaxLengthElement).DeserializeJson(ref reader, options);
          break;

        case "answerValueSet":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AnswerValueSetElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.AnswerValueSetElement = new Canonical(reader.GetString());
          }
          break;

        case "_answerValueSet":
          if (current.AnswerValueSetElement == null) { current.AnswerValueSetElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.AnswerValueSetElement).DeserializeJson(ref reader, options);
          break;

        case "answerOption":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'answerOption' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AnswerOption = new List<Questionnaire.AnswerOptionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent v_AnswerOption = new Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent();
            v_AnswerOption.DeserializeJson(ref reader, options);
            current.AnswerOption.Add(v_AnswerOption);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'answerOption' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AnswerOption.Count == 0)
          {
            current.AnswerOption = null;
          }
          break;

        case "initial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'initial' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Initial = new List<Questionnaire.InitialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Questionnaire.InitialComponent v_Initial = new Hl7.Fhir.Model.Questionnaire.InitialComponent();
            v_Initial.DeserializeJson(ref reader, options);
            current.Initial.Add(v_Initial);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'initial' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Initial.Count == 0)
          {
            current.Initial = null;
          }
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<Questionnaire.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Questionnaire.ItemComponent v_Item = new Hl7.Fhir.Model.Questionnaire.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#EnableWhen into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Questionnaire.EnableWhenComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#EnableWhen, Export: EnableWhenComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.QuestionElement != null)
      {
        if (!string.IsNullOrEmpty(current.QuestionElement.Value))
        {
          writer.WriteString("question",current.QuestionElement.Value);
        }
        if (current.QuestionElement.HasExtensions() || (!string.IsNullOrEmpty(current.QuestionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_question",false,current.QuestionElement.Extension,current.QuestionElement.ElementId);
        }
      }

      if (current.OperatorElement != null)
      {
        if (current.OperatorElement.Value != null)
        {
          writer.WriteString("operator",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OperatorElement.Value));
        }
        if (current.OperatorElement.HasExtensions() || (!string.IsNullOrEmpty(current.OperatorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_operator",false,current.OperatorElement.Extension,current.OperatorElement.ElementId);
        }
      }

      if (current.Answer != null)
      {
        switch (current.Answer)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            if (v_FhirBoolean != null)
            {
              if (v_FhirBoolean.Value != null)
              {
                writer.WriteBoolean("answerBoolean",(bool)v_FhirBoolean.Value);
              }
              if (v_FhirBoolean.HasExtensions() || (!string.IsNullOrEmpty(v_FhirBoolean.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerBoolean",false,v_FhirBoolean.Extension,v_FhirBoolean.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDecimal v_FhirDecimal:
            if (v_FhirDecimal != null)
            {
              if (v_FhirDecimal.Value != null)
              {
                writer.WriteNumber("answerDecimal",(decimal)v_FhirDecimal.Value);
              }
              if (v_FhirDecimal.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDecimal.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerDecimal",false,v_FhirDecimal.Extension,v_FhirDecimal.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Integer v_Integer:
            if (v_Integer != null)
            {
              if (v_Integer.Value != null)
              {
                writer.WriteNumber("answerInteger",(int)v_Integer.Value);
              }
              if (v_Integer.HasExtensions() || (!string.IsNullOrEmpty(v_Integer.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerInteger",false,v_Integer.Extension,v_Integer.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Date v_Date:
            if (v_Date != null)
            {
              if (!string.IsNullOrEmpty(v_Date.Value))
              {
                writer.WriteString("answerDate",v_Date.Value);
              }
              if (v_Date.HasExtensions() || (!string.IsNullOrEmpty(v_Date.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerDate",false,v_Date.Extension,v_Date.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("answerDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Time v_Time:
            if (v_Time != null)
            {
              if (!string.IsNullOrEmpty(v_Time.Value))
              {
                writer.WriteString("answerTime",v_Time.Value);
              }
              if (v_Time.HasExtensions() || (!string.IsNullOrEmpty(v_Time.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerTime",false,v_Time.Extension,v_Time.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("answerString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_answerString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Coding v_Coding:
            writer.WritePropertyName("answerCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("answerQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("answerReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#EnableWhen
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Questionnaire.EnableWhenComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Questionnaire.EnableWhenComponent >>> Questionnaire#EnableWhen.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Questionnaire.EnableWhenComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#EnableWhen
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Questionnaire.EnableWhenComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "question":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.QuestionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.QuestionElement = new FhirString(reader.GetString());
          }
          break;

        case "_question":
          if (current.QuestionElement == null) { current.QuestionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.QuestionElement).DeserializeJson(ref reader, options);
          break;

        case "operator":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OperatorElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>();
            reader.Skip();
          }
          else
          {
            current.OperatorElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>(reader.GetString()));
          }
          break;

        case "_operator":
          if (current.OperatorElement == null) { current.OperatorElement = new Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>(); }
          ((Hl7.Fhir.Model.Element)current.OperatorElement).DeserializeJson(ref reader, options);
          break;

        case "answerBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Answer = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_answerBoolean":
          if (current.Answer == null) { current.Answer = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerDecimal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.Answer = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_answerDecimal":
          if (current.Answer == null) { current.Answer = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new Integer();
            reader.Skip();
          }
          else
          {
            current.Answer = new Integer(reader.GetInt32());
          }
          break;

        case "_answerInteger":
          if (current.Answer == null) { current.Answer = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new Date();
            reader.Skip();
          }
          else
          {
            current.Answer = new Date(reader.GetString());
          }
          break;

        case "_answerDate":
          if (current.Answer == null) { current.Answer = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Answer = new FhirDateTime(reader.GetString());
          }
          break;

        case "_answerDateTime":
          if (current.Answer == null) { current.Answer = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new Time();
            reader.Skip();
          }
          else
          {
            current.Answer = new Time(reader.GetString());
          }
          break;

        case "_answerTime":
          if (current.Answer == null) { current.Answer = new Time(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Answer = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Answer = new FhirString(reader.GetString());
          }
          break;

        case "_answerString":
          if (current.Answer == null) { current.Answer = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerCoding":
          current.Answer = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerQuantity":
          current.Answer = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Answer).DeserializeJson(ref reader, options);
          break;

        case "answerReference":
          current.Answer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Answer).DeserializeJson(ref reader, options);
          break;

        // Complex: enableWhen, Export: EnableWhenComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#AnswerOption into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#AnswerOption, Export: AnswerOptionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.Integer v_Integer:
            if (v_Integer != null)
            {
              if (v_Integer.Value != null)
              {
                writer.WriteNumber("valueInteger",(int)v_Integer.Value);
              }
              if (v_Integer.HasExtensions() || (!string.IsNullOrEmpty(v_Integer.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueInteger",false,v_Integer.Extension,v_Integer.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Date v_Date:
            if (v_Date != null)
            {
              if (!string.IsNullOrEmpty(v_Date.Value))
              {
                writer.WriteString("valueDate",v_Date.Value);
              }
              if (v_Date.HasExtensions() || (!string.IsNullOrEmpty(v_Date.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDate",false,v_Date.Extension,v_Date.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Time v_Time:
            if (v_Time != null)
            {
              if (!string.IsNullOrEmpty(v_Time.Value))
              {
                writer.WriteString("valueTime",v_Time.Value);
              }
              if (v_Time.HasExtensions() || (!string.IsNullOrEmpty(v_Time.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueTime",false,v_Time.Extension,v_Time.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (current.InitialSelectedElement != null)
      {
        if (current.InitialSelectedElement.Value != null)
        {
          writer.WriteBoolean("initialSelected",(bool)current.InitialSelectedElement.Value);
        }
        if (current.InitialSelectedElement.HasExtensions() || (!string.IsNullOrEmpty(current.InitialSelectedElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_initialSelected",false,current.InitialSelectedElement.Extension,current.InitialSelectedElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#AnswerOption
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Questionnaire.AnswerOptionComponent >>> Questionnaire#AnswerOption.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Questionnaire.AnswerOptionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#AnswerOption
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Integer();
            reader.Skip();
          }
          else
          {
            current.Value = new Integer(reader.GetInt32());
          }
          break;

        case "_valueInteger":
          if (current.Value == null) { current.Value = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Date();
            reader.Skip();
          }
          else
          {
            current.Value = new Date(reader.GetString());
          }
          break;

        case "_valueDate":
          if (current.Value == null) { current.Value = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Time();
            reader.Skip();
          }
          else
          {
            current.Value = new Time(reader.GetString());
          }
          break;

        case "_valueTime":
          if (current.Value == null) { current.Value = new Time(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          current.Value = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        case "initialSelected":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.InitialSelectedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.InitialSelectedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_initialSelected":
          if (current.InitialSelectedElement == null) { current.InitialSelectedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.InitialSelectedElement).DeserializeJson(ref reader, options);
          break;

        // Complex: answerOption, Export: AnswerOptionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Questionnaire#Initial into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Questionnaire.InitialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Questionnaire#Initial, Export: InitialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            if (v_FhirBoolean != null)
            {
              if (v_FhirBoolean.Value != null)
              {
                writer.WriteBoolean("valueBoolean",(bool)v_FhirBoolean.Value);
              }
              if (v_FhirBoolean.HasExtensions() || (!string.IsNullOrEmpty(v_FhirBoolean.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueBoolean",false,v_FhirBoolean.Extension,v_FhirBoolean.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDecimal v_FhirDecimal:
            if (v_FhirDecimal != null)
            {
              if (v_FhirDecimal.Value != null)
              {
                writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
              }
              if (v_FhirDecimal.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDecimal.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDecimal",false,v_FhirDecimal.Extension,v_FhirDecimal.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Integer v_Integer:
            if (v_Integer != null)
            {
              if (v_Integer.Value != null)
              {
                writer.WriteNumber("valueInteger",(int)v_Integer.Value);
              }
              if (v_Integer.HasExtensions() || (!string.IsNullOrEmpty(v_Integer.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueInteger",false,v_Integer.Extension,v_Integer.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Date v_Date:
            if (v_Date != null)
            {
              if (!string.IsNullOrEmpty(v_Date.Value))
              {
                writer.WriteString("valueDate",v_Date.Value);
              }
              if (v_Date.HasExtensions() || (!string.IsNullOrEmpty(v_Date.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDate",false,v_Date.Extension,v_Date.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("valueDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Time v_Time:
            if (v_Time != null)
            {
              if (!string.IsNullOrEmpty(v_Time.Value))
              {
                writer.WriteString("valueTime",v_Time.Value);
              }
              if (v_Time.HasExtensions() || (!string.IsNullOrEmpty(v_Time.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueTime",false,v_Time.Extension,v_Time.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirUri v_FhirUri:
            if (v_FhirUri != null)
            {
              if (!string.IsNullOrEmpty(v_FhirUri.Value))
              {
                writer.WriteString("valueUri",v_FhirUri.Value);
              }
              if (v_FhirUri.HasExtensions() || (!string.IsNullOrEmpty(v_FhirUri.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueUri",false,v_FhirUri.Extension,v_FhirUri.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Initial
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Questionnaire.InitialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Questionnaire.InitialComponent >>> Questionnaire#Initial.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Questionnaire.InitialComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Questionnaire#Initial
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Questionnaire.InitialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_valueDecimal":
          if (current.Value == null) { current.Value = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Integer();
            reader.Skip();
          }
          else
          {
            current.Value = new Integer(reader.GetInt32());
          }
          break;

        case "_valueInteger":
          if (current.Value == null) { current.Value = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Date();
            reader.Skip();
          }
          else
          {
            current.Value = new Date(reader.GetString());
          }
          break;

        case "_valueDate":
          if (current.Value == null) { current.Value = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDateTime(reader.GetString());
          }
          break;

        case "_valueDateTime":
          if (current.Value == null) { current.Value = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Time();
            reader.Skip();
          }
          else
          {
            current.Value = new Time(reader.GetString());
          }
          break;

        case "_valueTime":
          if (current.Value == null) { current.Value = new Time(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirUri(reader.GetString());
          }
          break;

        case "_valueUri":
          if (current.Value == null) { current.Value = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          current.Value = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: initial, Export: InitialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class QuestionnaireJsonConverter : JsonConverter<Hl7.Fhir.Model.Questionnaire>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.Questionnaire value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.Questionnaire Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.Questionnaire();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
