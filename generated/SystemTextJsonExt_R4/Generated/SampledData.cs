// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for SampledData
  /// </summary>
  public static class SampledDataSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR SampledData into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SampledData current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Complex: SampledData, Export: SampledData, Base: Element (Element)
      ((Hl7.Fhir.Model.Element)current).SerializeJson(writer, options, false);

      if (current.Origin != null)
      {
        writer.WritePropertyName("origin");
        current.Origin.SerializeJson(writer, options);
      }

      if (current.PeriodElement != null)
      {
        if (current.PeriodElement.Value != null)
        {
          writer.WriteNumber("period",(decimal)current.PeriodElement.Value);
        }
        if (current.PeriodElement.HasExtensions() || (!string.IsNullOrEmpty(current.PeriodElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_period",false,current.PeriodElement.Extension,current.PeriodElement.ElementId);
        }
      }

      if (current.FactorElement != null)
      {
        if (current.FactorElement.Value != null)
        {
          writer.WriteNumber("factor",(decimal)current.FactorElement.Value);
        }
        if (current.FactorElement.HasExtensions() || (!string.IsNullOrEmpty(current.FactorElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_factor",false,current.FactorElement.Extension,current.FactorElement.ElementId);
        }
      }

      if (current.LowerLimitElement != null)
      {
        if (current.LowerLimitElement.Value != null)
        {
          writer.WriteNumber("lowerLimit",(decimal)current.LowerLimitElement.Value);
        }
        if (current.LowerLimitElement.HasExtensions() || (!string.IsNullOrEmpty(current.LowerLimitElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lowerLimit",false,current.LowerLimitElement.Extension,current.LowerLimitElement.ElementId);
        }
      }

      if (current.UpperLimitElement != null)
      {
        if (current.UpperLimitElement.Value != null)
        {
          writer.WriteNumber("upperLimit",(decimal)current.UpperLimitElement.Value);
        }
        if (current.UpperLimitElement.HasExtensions() || (!string.IsNullOrEmpty(current.UpperLimitElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_upperLimit",false,current.UpperLimitElement.Extension,current.UpperLimitElement.ElementId);
        }
      }

      if (current.DimensionsElement != null)
      {
        if (current.DimensionsElement.Value != null)
        {
          writer.WriteNumber("dimensions",(int)current.DimensionsElement.Value);
        }
        if (current.DimensionsElement.HasExtensions() || (!string.IsNullOrEmpty(current.DimensionsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_dimensions",false,current.DimensionsElement.Extension,current.DimensionsElement.ElementId);
        }
      }

      if (current.DataElement != null)
      {
        if (!string.IsNullOrEmpty(current.DataElement.Value))
        {
          writer.WriteString("data",current.DataElement.Value);
        }
        if (current.DataElement.HasExtensions() || (!string.IsNullOrEmpty(current.DataElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_data",false,current.DataElement.Extension,current.DataElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SampledData
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SampledData current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SampledData >>> SampledData.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SampledData: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SampledData
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SampledData current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "origin":
          current.Origin = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Origin).DeserializeJson(ref reader, options);
          break;

        case "period":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PeriodElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.PeriodElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_period":
          if (current.PeriodElement == null) { current.PeriodElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.PeriodElement).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "lowerLimit":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LowerLimitElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.LowerLimitElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_lowerLimit":
          if (current.LowerLimitElement == null) { current.LowerLimitElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.LowerLimitElement).DeserializeJson(ref reader, options);
          break;

        case "upperLimit":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UpperLimitElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.UpperLimitElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_upperLimit":
          if (current.UpperLimitElement == null) { current.UpperLimitElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.UpperLimitElement).DeserializeJson(ref reader, options);
          break;

        case "dimensions":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DimensionsElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.DimensionsElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_dimensions":
          if (current.DimensionsElement == null) { current.DimensionsElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.DimensionsElement).DeserializeJson(ref reader, options);
          break;

        case "data":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DataElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DataElement = new FhirString(reader.GetString());
          }
          break;

        case "_data":
          if (current.DataElement == null) { current.DataElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DataElement).DeserializeJson(ref reader, options);
          break;

        // Complex: SampledData, Export: SampledData, Base: Element
        default:
          ((Hl7.Fhir.Model.Element)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class SampledDataJsonConverter : JsonConverter<Hl7.Fhir.Model.SampledData>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.SampledData value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.SampledData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.SampledData();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
