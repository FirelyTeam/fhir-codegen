// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for SubstancePolymer
  /// </summary>
  public static class SubstancePolymerSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR SubstancePolymer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","SubstancePolymer");
      // Complex: SubstancePolymer, Export: SubstancePolymer, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Class != null)
      {
        writer.WritePropertyName("class");
        current.Class.SerializeJson(writer, options);
      }

      if (current.Geometry != null)
      {
        writer.WritePropertyName("geometry");
        current.Geometry.SerializeJson(writer, options);
      }

      if ((current.CopolymerConnectivity != null) && (current.CopolymerConnectivity.Count != 0))
      {
        writer.WritePropertyName("copolymerConnectivity");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.CopolymerConnectivity)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ModificationElement != null) && (current.ModificationElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (FhirString val in current.ModificationElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("modification");
          writer.WriteStartArray();
          foreach (FhirString val in current.ModificationElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_modification");
          writer.WriteStartArray();
          foreach (FhirString val in current.ModificationElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if ((current.MonomerSet != null) && (current.MonomerSet.Count != 0))
      {
        writer.WritePropertyName("monomerSet");
        writer.WriteStartArray();
        foreach (SubstancePolymer.MonomerSetComponent val in current.MonomerSet)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Repeat != null) && (current.Repeat.Count != 0))
      {
        writer.WritePropertyName("repeat");
        writer.WriteStartArray();
        foreach (SubstancePolymer.RepeatComponent val in current.Repeat)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer >>> SubstancePolymer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "class":
          current.Class = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Class).DeserializeJson(ref reader, options);
          break;

        case "geometry":
          current.Geometry = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Geometry).DeserializeJson(ref reader, options);
          break;

        case "copolymerConnectivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstancePolymer error reading 'copolymerConnectivity' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CopolymerConnectivity = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_CopolymerConnectivity = new Hl7.Fhir.Model.CodeableConcept();
            v_CopolymerConnectivity.DeserializeJson(ref reader, options);
            current.CopolymerConnectivity.Add(v_CopolymerConnectivity);

            if (!reader.Read())
            {
              throw new JsonException($"SubstancePolymer error reading 'copolymerConnectivity' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CopolymerConnectivity.Count == 0)
          {
            current.CopolymerConnectivity = null;
          }
          break;

        case "modification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstancePolymer error reading 'modification' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ModificationElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ModificationElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ModificationElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstancePolymer error reading 'modification' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ModificationElement.Count == 0)
          {
            current.ModificationElement = null;
          }
          break;

        case "_modification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstancePolymer error reading 'modification' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_modification = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_modification >= current.ModificationElement.Count)
            {
              current.ModificationElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ModificationElement[i_modification++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstancePolymer error reading 'modification' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "monomerSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstancePolymer error reading 'monomerSet' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MonomerSet = new List<SubstancePolymer.MonomerSetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent v_MonomerSet = new Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent();
            v_MonomerSet.DeserializeJson(ref reader, options);
            current.MonomerSet.Add(v_MonomerSet);

            if (!reader.Read())
            {
              throw new JsonException($"SubstancePolymer error reading 'monomerSet' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MonomerSet.Count == 0)
          {
            current.MonomerSet = null;
          }
          break;

        case "repeat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstancePolymer error reading 'repeat' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Repeat = new List<SubstancePolymer.RepeatComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.RepeatComponent v_Repeat = new Hl7.Fhir.Model.SubstancePolymer.RepeatComponent();
            v_Repeat.DeserializeJson(ref reader, options);
            current.Repeat.Add(v_Repeat);

            if (!reader.Read())
            {
              throw new JsonException($"SubstancePolymer error reading 'repeat' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Repeat.Count == 0)
          {
            current.Repeat = null;
          }
          break;

        // Complex: SubstancePolymer, Export: SubstancePolymer, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#MonomerSet into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#MonomerSet, Export: MonomerSetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.RatioType != null)
      {
        writer.WritePropertyName("ratioType");
        current.RatioType.SerializeJson(writer, options);
      }

      if ((current.StartingMaterial != null) && (current.StartingMaterial.Count != 0))
      {
        writer.WritePropertyName("startingMaterial");
        writer.WriteStartArray();
        foreach (SubstancePolymer.StartingMaterialComponent val in current.StartingMaterial)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#MonomerSet
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.MonomerSetComponent >>> SubstancePolymer#MonomerSet.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.MonomerSetComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#MonomerSet
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "ratioType":
          current.RatioType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.RatioType).DeserializeJson(ref reader, options);
          break;

        case "startingMaterial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MonomerSetComponent error reading 'startingMaterial' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.StartingMaterial = new List<SubstancePolymer.StartingMaterialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent v_StartingMaterial = new Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent();
            v_StartingMaterial.DeserializeJson(ref reader, options);
            current.StartingMaterial.Add(v_StartingMaterial);

            if (!reader.Read())
            {
              throw new JsonException($"MonomerSetComponent error reading 'startingMaterial' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.StartingMaterial.Count == 0)
          {
            current.StartingMaterial = null;
          }
          break;

        // Complex: monomerSet, Export: MonomerSetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#StartingMaterial into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#StartingMaterial, Export: StartingMaterialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Material != null)
      {
        writer.WritePropertyName("material");
        current.Material.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.IsDefiningElement != null)
      {
        if (current.IsDefiningElement.Value != null)
        {
          writer.WriteBoolean("isDefining",(bool)current.IsDefiningElement.Value);
        }
        if (current.IsDefiningElement.HasExtensions() || (!string.IsNullOrEmpty(current.IsDefiningElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_isDefining",false,current.IsDefiningElement.Extension,current.IsDefiningElement.ElementId);
        }
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#StartingMaterial
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.StartingMaterialComponent >>> SubstancePolymer#StartingMaterial.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.StartingMaterialComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#StartingMaterial
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "material":
          current.Material = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Material).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "isDefining":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IsDefiningElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IsDefiningElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_isDefining":
          if (current.IsDefiningElement == null) { current.IsDefiningElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IsDefiningElement).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.SubstanceAmount();
          ((Hl7.Fhir.Model.SubstanceAmount)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: startingMaterial, Export: StartingMaterialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#Repeat into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.RepeatComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#Repeat, Export: RepeatComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NumberOfUnitsElement != null)
      {
        if (current.NumberOfUnitsElement.Value != null)
        {
          writer.WriteNumber("numberOfUnits",(int)current.NumberOfUnitsElement.Value);
        }
        if (current.NumberOfUnitsElement.HasExtensions() || (!string.IsNullOrEmpty(current.NumberOfUnitsElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_numberOfUnits",false,current.NumberOfUnitsElement.Extension,current.NumberOfUnitsElement.ElementId);
        }
      }

      if (current.AverageMolecularFormulaElement != null)
      {
        if (!string.IsNullOrEmpty(current.AverageMolecularFormulaElement.Value))
        {
          writer.WriteString("averageMolecularFormula",current.AverageMolecularFormulaElement.Value);
        }
        if (current.AverageMolecularFormulaElement.HasExtensions() || (!string.IsNullOrEmpty(current.AverageMolecularFormulaElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_averageMolecularFormula",false,current.AverageMolecularFormulaElement.Extension,current.AverageMolecularFormulaElement.ElementId);
        }
      }

      if (current.RepeatUnitAmountType != null)
      {
        writer.WritePropertyName("repeatUnitAmountType");
        current.RepeatUnitAmountType.SerializeJson(writer, options);
      }

      if ((current.RepeatUnit != null) && (current.RepeatUnit.Count != 0))
      {
        writer.WritePropertyName("repeatUnit");
        writer.WriteStartArray();
        foreach (SubstancePolymer.RepeatUnitComponent val in current.RepeatUnit)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#Repeat
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.RepeatComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.RepeatComponent >>> SubstancePolymer#Repeat.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.RepeatComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#Repeat
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.RepeatComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "numberOfUnits":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfUnitsElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.NumberOfUnitsElement = new Integer(reader.GetInt32());
          }
          break;

        case "_numberOfUnits":
          if (current.NumberOfUnitsElement == null) { current.NumberOfUnitsElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfUnitsElement).DeserializeJson(ref reader, options);
          break;

        case "averageMolecularFormula":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AverageMolecularFormulaElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.AverageMolecularFormulaElement = new FhirString(reader.GetString());
          }
          break;

        case "_averageMolecularFormula":
          if (current.AverageMolecularFormulaElement == null) { current.AverageMolecularFormulaElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.AverageMolecularFormulaElement).DeserializeJson(ref reader, options);
          break;

        case "repeatUnitAmountType":
          current.RepeatUnitAmountType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.RepeatUnitAmountType).DeserializeJson(ref reader, options);
          break;

        case "repeatUnit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RepeatComponent error reading 'repeatUnit' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RepeatUnit = new List<SubstancePolymer.RepeatUnitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent v_RepeatUnit = new Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent();
            v_RepeatUnit.DeserializeJson(ref reader, options);
            current.RepeatUnit.Add(v_RepeatUnit);

            if (!reader.Read())
            {
              throw new JsonException($"RepeatComponent error reading 'repeatUnit' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RepeatUnit.Count == 0)
          {
            current.RepeatUnit = null;
          }
          break;

        // Complex: repeat, Export: RepeatComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#RepeatUnit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#RepeatUnit, Export: RepeatUnitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.OrientationOfPolymerisation != null)
      {
        writer.WritePropertyName("orientationOfPolymerisation");
        current.OrientationOfPolymerisation.SerializeJson(writer, options);
      }

      if (current.RepeatUnitElement != null)
      {
        if (!string.IsNullOrEmpty(current.RepeatUnitElement.Value))
        {
          writer.WriteString("repeatUnit",current.RepeatUnitElement.Value);
        }
        if (current.RepeatUnitElement.HasExtensions() || (!string.IsNullOrEmpty(current.RepeatUnitElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_repeatUnit",false,current.RepeatUnitElement.Extension,current.RepeatUnitElement.ElementId);
        }
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if ((current.DegreeOfPolymerisation != null) && (current.DegreeOfPolymerisation.Count != 0))
      {
        writer.WritePropertyName("degreeOfPolymerisation");
        writer.WriteStartArray();
        foreach (SubstancePolymer.DegreeOfPolymerisationComponent val in current.DegreeOfPolymerisation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.StructuralRepresentation != null) && (current.StructuralRepresentation.Count != 0))
      {
        writer.WritePropertyName("structuralRepresentation");
        writer.WriteStartArray();
        foreach (SubstancePolymer.StructuralRepresentationComponent val in current.StructuralRepresentation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#RepeatUnit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.RepeatUnitComponent >>> SubstancePolymer#RepeatUnit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.RepeatUnitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#RepeatUnit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "orientationOfPolymerisation":
          current.OrientationOfPolymerisation = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OrientationOfPolymerisation).DeserializeJson(ref reader, options);
          break;

        case "repeatUnit":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RepeatUnitElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RepeatUnitElement = new FhirString(reader.GetString());
          }
          break;

        case "_repeatUnit":
          if (current.RepeatUnitElement == null) { current.RepeatUnitElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RepeatUnitElement).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.SubstanceAmount();
          ((Hl7.Fhir.Model.SubstanceAmount)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "degreeOfPolymerisation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RepeatUnitComponent error reading 'degreeOfPolymerisation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DegreeOfPolymerisation = new List<SubstancePolymer.DegreeOfPolymerisationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent v_DegreeOfPolymerisation = new Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent();
            v_DegreeOfPolymerisation.DeserializeJson(ref reader, options);
            current.DegreeOfPolymerisation.Add(v_DegreeOfPolymerisation);

            if (!reader.Read())
            {
              throw new JsonException($"RepeatUnitComponent error reading 'degreeOfPolymerisation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DegreeOfPolymerisation.Count == 0)
          {
            current.DegreeOfPolymerisation = null;
          }
          break;

        case "structuralRepresentation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RepeatUnitComponent error reading 'structuralRepresentation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.StructuralRepresentation = new List<SubstancePolymer.StructuralRepresentationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent v_StructuralRepresentation = new Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent();
            v_StructuralRepresentation.DeserializeJson(ref reader, options);
            current.StructuralRepresentation.Add(v_StructuralRepresentation);

            if (!reader.Read())
            {
              throw new JsonException($"RepeatUnitComponent error reading 'structuralRepresentation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.StructuralRepresentation.Count == 0)
          {
            current.StructuralRepresentation = null;
          }
          break;

        // Complex: repeatUnit, Export: RepeatUnitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#DegreeOfPolymerisation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#DegreeOfPolymerisation, Export: DegreeOfPolymerisationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Degree != null)
      {
        writer.WritePropertyName("degree");
        current.Degree.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#DegreeOfPolymerisation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.DegreeOfPolymerisationComponent >>> SubstancePolymer#DegreeOfPolymerisation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.DegreeOfPolymerisationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#DegreeOfPolymerisation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "degree":
          current.Degree = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Degree).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.SubstanceAmount();
          ((Hl7.Fhir.Model.SubstanceAmount)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: degreeOfPolymerisation, Export: DegreeOfPolymerisationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstancePolymer#StructuralRepresentation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstancePolymer#StructuralRepresentation, Export: StructuralRepresentationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.RepresentationElement != null)
      {
        if (!string.IsNullOrEmpty(current.RepresentationElement.Value))
        {
          writer.WriteString("representation",current.RepresentationElement.Value);
        }
        if (current.RepresentationElement.HasExtensions() || (!string.IsNullOrEmpty(current.RepresentationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_representation",false,current.RepresentationElement.Extension,current.RepresentationElement.ElementId);
        }
      }

      if (current.Attachment != null)
      {
        writer.WritePropertyName("attachment");
        current.Attachment.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#StructuralRepresentation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstancePolymer.StructuralRepresentationComponent >>> SubstancePolymer#StructuralRepresentation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstancePolymer.StructuralRepresentationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstancePolymer#StructuralRepresentation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "representation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RepresentationElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RepresentationElement = new FhirString(reader.GetString());
          }
          break;

        case "_representation":
          if (current.RepresentationElement == null) { current.RepresentationElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RepresentationElement).DeserializeJson(ref reader, options);
          break;

        case "attachment":
          current.Attachment = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Attachment).DeserializeJson(ref reader, options);
          break;

        // Complex: structuralRepresentation, Export: StructuralRepresentationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class SubstancePolymerJsonConverter : JsonConverter<Hl7.Fhir.Model.SubstancePolymer>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.SubstancePolymer value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.SubstancePolymer Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.SubstancePolymer();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
