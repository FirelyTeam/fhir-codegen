// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for SubstanceSpecification
  /// </summary>
  public static class SubstanceSpecificationSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR SubstanceSpecification into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","SubstanceSpecification");
      // Complex: SubstanceSpecification, Export: SubstanceSpecification, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.Domain != null)
      {
        writer.WritePropertyName("domain");
        current.Domain.SerializeJson(writer, options);
      }

      if (current.DescriptionElement != null)
      {
        if (!string.IsNullOrEmpty(current.DescriptionElement.Value))
        {
          writer.WriteString("description",current.DescriptionElement.Value);
        }
        if (current.DescriptionElement.HasExtensions() || (!string.IsNullOrEmpty(current.DescriptionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.DescriptionElement.Extension,current.DescriptionElement.ElementId);
        }
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.CommentElement != null)
      {
        if (!string.IsNullOrEmpty(current.CommentElement.Value))
        {
          writer.WriteString("comment",current.CommentElement.Value);
        }
        if (current.CommentElement.HasExtensions() || (!string.IsNullOrEmpty(current.CommentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_comment",false,current.CommentElement.Extension,current.CommentElement.ElementId);
        }
      }

      if ((current.Moiety != null) && (current.Moiety.Count != 0))
      {
        writer.WritePropertyName("moiety");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.MoietyComponent val in current.Moiety)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Property != null) && (current.Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.PropertyComponent val in current.Property)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ReferenceInformation != null)
      {
        writer.WritePropertyName("referenceInformation");
        current.ReferenceInformation.SerializeJson(writer, options);
      }

      if (current.Structure != null)
      {
        writer.WritePropertyName("structure");
        current.Structure.SerializeJson(writer, options);
      }

      if ((current.Code != null) && (current.Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.CodeComponent val in current.Code)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Name != null) && (current.Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Name)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.MolecularWeight != null) && (current.MolecularWeight.Count != 0))
      {
        writer.WritePropertyName("molecularWeight");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.MolecularWeightComponent val in current.MolecularWeight)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Relationship != null) && (current.Relationship.Count != 0))
      {
        writer.WritePropertyName("relationship");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.RelationshipComponent val in current.Relationship)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.NucleicAcid != null)
      {
        writer.WritePropertyName("nucleicAcid");
        current.NucleicAcid.SerializeJson(writer, options);
      }

      if (current.Polymer != null)
      {
        writer.WritePropertyName("polymer");
        current.Polymer.SerializeJson(writer, options);
      }

      if (current.Protein != null)
      {
        writer.WritePropertyName("protein");
        current.Protein.SerializeJson(writer, options);
      }

      if (current.SourceMaterial != null)
      {
        writer.WritePropertyName("sourceMaterial");
        current.SourceMaterial.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification >>> SubstanceSpecification.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "domain":
          current.Domain = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Domain).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'source' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Source = new Hl7.Fhir.Model.ResourceReference();
            v_Source.DeserializeJson(ref reader, options);
            current.Source.Add(v_Source);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'source' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }
          break;

        case "comment":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CommentElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CommentElement = new FhirString(reader.GetString());
          }
          break;

        case "_comment":
          if (current.CommentElement == null) { current.CommentElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CommentElement).DeserializeJson(ref reader, options);
          break;

        case "moiety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'moiety' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Moiety = new List<SubstanceSpecification.MoietyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent v_Moiety = new Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent();
            v_Moiety.DeserializeJson(ref reader, options);
            current.Moiety.Add(v_Moiety);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'moiety' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Moiety.Count == 0)
          {
            current.Moiety = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Property = new List<SubstanceSpecification.PropertyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent v_Property = new Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent();
            v_Property.DeserializeJson(ref reader, options);
            current.Property.Add(v_Property);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Property.Count == 0)
          {
            current.Property = null;
          }
          break;

        case "referenceInformation":
          current.ReferenceInformation = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ReferenceInformation).DeserializeJson(ref reader, options);
          break;

        case "structure":
          current.Structure = new Hl7.Fhir.Model.SubstanceSpecification.StructureComponent();
          ((Hl7.Fhir.Model.SubstanceSpecification.StructureComponent)current.Structure).DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'code' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Code = new List<SubstanceSpecification.CodeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.CodeComponent v_Code = new Hl7.Fhir.Model.SubstanceSpecification.CodeComponent();
            v_Code.DeserializeJson(ref reader, options);
            current.Code.Add(v_Code);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'code' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }
          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'name' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Name = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.NameComponent v_Name = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
            v_Name.DeserializeJson(ref reader, options);
            current.Name.Add(v_Name);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'name' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Name.Count == 0)
          {
            current.Name = null;
          }
          break;

        case "molecularWeight":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'molecularWeight' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.MolecularWeight = new List<SubstanceSpecification.MolecularWeightComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent v_MolecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
            v_MolecularWeight.DeserializeJson(ref reader, options);
            current.MolecularWeight.Add(v_MolecularWeight);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'molecularWeight' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.MolecularWeight.Count == 0)
          {
            current.MolecularWeight = null;
          }
          break;

        case "relationship":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSpecification error reading 'relationship' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Relationship = new List<SubstanceSpecification.RelationshipComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent v_Relationship = new Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent();
            v_Relationship.DeserializeJson(ref reader, options);
            current.Relationship.Add(v_Relationship);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSpecification error reading 'relationship' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Relationship.Count == 0)
          {
            current.Relationship = null;
          }
          break;

        case "nucleicAcid":
          current.NucleicAcid = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.NucleicAcid).DeserializeJson(ref reader, options);
          break;

        case "polymer":
          current.Polymer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Polymer).DeserializeJson(ref reader, options);
          break;

        case "protein":
          current.Protein = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Protein).DeserializeJson(ref reader, options);
          break;

        case "sourceMaterial":
          current.SourceMaterial = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.SourceMaterial).DeserializeJson(ref reader, options);
          break;

        // Complex: SubstanceSpecification, Export: SubstanceSpecification, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Moiety into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Moiety, Export: MoietyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Role != null)
      {
        writer.WritePropertyName("role");
        current.Role.SerializeJson(writer, options);
      }

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        current.Stereochemistry.SerializeJson(writer, options);
      }

      if (current.OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        current.OpticalActivity.SerializeJson(writer, options);
      }

      if (current.MolecularFormulaElement != null)
      {
        if (!string.IsNullOrEmpty(current.MolecularFormulaElement.Value))
        {
          writer.WriteString("molecularFormula",current.MolecularFormulaElement.Value);
        }
        if (current.MolecularFormulaElement.HasExtensions() || (!string.IsNullOrEmpty(current.MolecularFormulaElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_molecularFormula",false,current.MolecularFormulaElement.Extension,current.MolecularFormulaElement.ElementId);
        }
      }

      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("amountString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_amountString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Moiety
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.MoietyComponent >>> SubstanceSpecification#Moiety.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.MoietyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Moiety
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "stereochemistry":
          current.Stereochemistry = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Stereochemistry).DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          current.OpticalActivity = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OpticalActivity).DeserializeJson(ref reader, options);
          break;

        case "molecularFormula":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MolecularFormulaElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MolecularFormulaElement = new FhirString(reader.GetString());
          }
          break;

        case "_molecularFormula":
          if (current.MolecularFormulaElement == null) { current.MolecularFormulaElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MolecularFormulaElement).DeserializeJson(ref reader, options);
          break;

        case "amountQuantity":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Amount = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Amount = new FhirString(reader.GetString());
          }
          break;

        case "_amountString":
          if (current.Amount == null) { current.Amount = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: moiety, Export: MoietyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Property into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Property, Export: PropertyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Category != null)
      {
        writer.WritePropertyName("category");
        current.Category.SerializeJson(writer, options);
      }

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.ParametersElement != null)
      {
        if (!string.IsNullOrEmpty(current.ParametersElement.Value))
        {
          writer.WriteString("parameters",current.ParametersElement.Value);
        }
        if (current.ParametersElement.HasExtensions() || (!string.IsNullOrEmpty(current.ParametersElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_parameters",false,current.ParametersElement.Extension,current.ParametersElement.ElementId);
        }
      }

      if (current.DefiningSubstance != null)
      {
        switch (current.DefiningSubstance)
        {
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("definingSubstanceReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("definingSubstanceCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("amountString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_amountString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Property
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.PropertyComponent >>> SubstanceSpecification#Property.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.PropertyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Property
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "parameters":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ParametersElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ParametersElement = new FhirString(reader.GetString());
          }
          break;

        case "_parameters":
          if (current.ParametersElement == null) { current.ParametersElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ParametersElement).DeserializeJson(ref reader, options);
          break;

        case "definingSubstanceReference":
          current.DefiningSubstance = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.DefiningSubstance).DeserializeJson(ref reader, options);
          break;

        case "definingSubstanceCodeableConcept":
          current.DefiningSubstance = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.DefiningSubstance).DeserializeJson(ref reader, options);
          break;

        case "amountQuantity":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Amount = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Amount = new FhirString(reader.GetString());
          }
          break;

        case "_amountString":
          if (current.Amount == null) { current.Amount = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: property, Export: PropertyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Structure into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.StructureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Structure, Export: StructureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        current.Stereochemistry.SerializeJson(writer, options);
      }

      if (current.OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        current.OpticalActivity.SerializeJson(writer, options);
      }

      if (current.MolecularFormulaElement != null)
      {
        if (!string.IsNullOrEmpty(current.MolecularFormulaElement.Value))
        {
          writer.WriteString("molecularFormula",current.MolecularFormulaElement.Value);
        }
        if (current.MolecularFormulaElement.HasExtensions() || (!string.IsNullOrEmpty(current.MolecularFormulaElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_molecularFormula",false,current.MolecularFormulaElement.Extension,current.MolecularFormulaElement.ElementId);
        }
      }

      if (current.MolecularFormulaByMoietyElement != null)
      {
        if (!string.IsNullOrEmpty(current.MolecularFormulaByMoietyElement.Value))
        {
          writer.WriteString("molecularFormulaByMoiety",current.MolecularFormulaByMoietyElement.Value);
        }
        if (current.MolecularFormulaByMoietyElement.HasExtensions() || (!string.IsNullOrEmpty(current.MolecularFormulaByMoietyElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_molecularFormulaByMoiety",false,current.MolecularFormulaByMoietyElement.Extension,current.MolecularFormulaByMoietyElement.ElementId);
        }
      }

      if ((current.Isotope != null) && (current.Isotope.Count != 0))
      {
        writer.WritePropertyName("isotope");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.IsotopeComponent val in current.Isotope)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        current.MolecularWeight.SerializeJson(writer, options);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Representation != null) && (current.Representation.Count != 0))
      {
        writer.WritePropertyName("representation");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.RepresentationComponent val in current.Representation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Structure
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.StructureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.StructureComponent >>> SubstanceSpecification#Structure.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.StructureComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Structure
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.StructureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "stereochemistry":
          current.Stereochemistry = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Stereochemistry).DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          current.OpticalActivity = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OpticalActivity).DeserializeJson(ref reader, options);
          break;

        case "molecularFormula":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MolecularFormulaElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MolecularFormulaElement = new FhirString(reader.GetString());
          }
          break;

        case "_molecularFormula":
          if (current.MolecularFormulaElement == null) { current.MolecularFormulaElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MolecularFormulaElement).DeserializeJson(ref reader, options);
          break;

        case "molecularFormulaByMoiety":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MolecularFormulaByMoietyElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MolecularFormulaByMoietyElement = new FhirString(reader.GetString());
          }
          break;

        case "_molecularFormulaByMoiety":
          if (current.MolecularFormulaByMoietyElement == null) { current.MolecularFormulaByMoietyElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MolecularFormulaByMoietyElement).DeserializeJson(ref reader, options);
          break;

        case "isotope":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"StructureComponent error reading 'isotope' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Isotope = new List<SubstanceSpecification.IsotopeComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent v_Isotope = new Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent();
            v_Isotope.DeserializeJson(ref reader, options);
            current.Isotope.Add(v_Isotope);

            if (!reader.Read())
            {
              throw new JsonException($"StructureComponent error reading 'isotope' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Isotope.Count == 0)
          {
            current.Isotope = null;
          }
          break;

        case "molecularWeight":
          current.MolecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
          ((Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent)current.MolecularWeight).DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"StructureComponent error reading 'source' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Source = new Hl7.Fhir.Model.ResourceReference();
            v_Source.DeserializeJson(ref reader, options);
            current.Source.Add(v_Source);

            if (!reader.Read())
            {
              throw new JsonException($"StructureComponent error reading 'source' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }
          break;

        case "representation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"StructureComponent error reading 'representation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Representation = new List<SubstanceSpecification.RepresentationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent v_Representation = new Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent();
            v_Representation.DeserializeJson(ref reader, options);
            current.Representation.Add(v_Representation);

            if (!reader.Read())
            {
              throw new JsonException($"StructureComponent error reading 'representation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Representation.Count == 0)
          {
            current.Representation = null;
          }
          break;

        // Complex: structure, Export: StructureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Isotope into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Isotope, Export: IsotopeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Identifier != null)
      {
        writer.WritePropertyName("identifier");
        current.Identifier.SerializeJson(writer, options);
      }

      if (current.Name != null)
      {
        writer.WritePropertyName("name");
        current.Name.SerializeJson(writer, options);
      }

      if (current.Substitution != null)
      {
        writer.WritePropertyName("substitution");
        current.Substitution.SerializeJson(writer, options);
      }

      if (current.HalfLife != null)
      {
        writer.WritePropertyName("halfLife");
        current.HalfLife.SerializeJson(writer, options);
      }

      if (current.MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        current.MolecularWeight.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Isotope
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.IsotopeComponent >>> SubstanceSpecification#Isotope.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.IsotopeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Isotope
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "name":
          current.Name = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Name).DeserializeJson(ref reader, options);
          break;

        case "substitution":
          current.Substitution = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Substitution).DeserializeJson(ref reader, options);
          break;

        case "halfLife":
          current.HalfLife = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.HalfLife).DeserializeJson(ref reader, options);
          break;

        case "molecularWeight":
          current.MolecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
          ((Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent)current.MolecularWeight).DeserializeJson(ref reader, options);
          break;

        // Complex: isotope, Export: IsotopeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#MolecularWeight into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#MolecularWeight, Export: MolecularWeightComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Method != null)
      {
        writer.WritePropertyName("method");
        current.Method.SerializeJson(writer, options);
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Amount != null)
      {
        writer.WritePropertyName("amount");
        current.Amount.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#MolecularWeight
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.MolecularWeightComponent >>> SubstanceSpecification#MolecularWeight.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.MolecularWeightComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#MolecularWeight
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "method":
          current.Method = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Method).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: molecularWeight, Export: MolecularWeightComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Representation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Representation, Export: RepresentationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.RepresentationElement != null)
      {
        if (!string.IsNullOrEmpty(current.RepresentationElement.Value))
        {
          writer.WriteString("representation",current.RepresentationElement.Value);
        }
        if (current.RepresentationElement.HasExtensions() || (!string.IsNullOrEmpty(current.RepresentationElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_representation",false,current.RepresentationElement.Extension,current.RepresentationElement.ElementId);
        }
      }

      if (current.Attachment != null)
      {
        writer.WritePropertyName("attachment");
        current.Attachment.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Representation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.RepresentationComponent >>> SubstanceSpecification#Representation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.RepresentationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Representation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "representation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RepresentationElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RepresentationElement = new FhirString(reader.GetString());
          }
          break;

        case "_representation":
          if (current.RepresentationElement == null) { current.RepresentationElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RepresentationElement).DeserializeJson(ref reader, options);
          break;

        case "attachment":
          current.Attachment = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Attachment).DeserializeJson(ref reader, options);
          break;

        // Complex: representation, Export: RepresentationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Code into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.CodeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Code, Export: CodeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Code != null)
      {
        writer.WritePropertyName("code");
        current.Code.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.StatusDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.StatusDateElement.Value))
        {
          writer.WriteString("statusDate",current.StatusDateElement.Value);
        }
        if (current.StatusDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_statusDate",false,current.StatusDateElement.Extension,current.StatusDateElement.ElementId);
        }
      }

      if (current.CommentElement != null)
      {
        if (!string.IsNullOrEmpty(current.CommentElement.Value))
        {
          writer.WriteString("comment",current.CommentElement.Value);
        }
        if (current.CommentElement.HasExtensions() || (!string.IsNullOrEmpty(current.CommentElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_comment",false,current.CommentElement.Extension,current.CommentElement.ElementId);
        }
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Code
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.CodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.CodeComponent >>> SubstanceSpecification#Code.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.CodeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Code
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.CodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.StatusDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_statusDate":
          if (current.StatusDateElement == null) { current.StatusDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.StatusDateElement).DeserializeJson(ref reader, options);
          break;

        case "comment":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CommentElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CommentElement = new FhirString(reader.GetString());
          }
          break;

        case "_comment":
          if (current.CommentElement == null) { current.CommentElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CommentElement).DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeComponent error reading 'source' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Source = new Hl7.Fhir.Model.ResourceReference();
            v_Source.DeserializeJson(ref reader, options);
            current.Source.Add(v_Source);

            if (!reader.Read())
            {
              throw new JsonException($"CodeComponent error reading 'source' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }
          break;

        // Complex: code, Export: CodeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Name into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.NameComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Name, Export: NameComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.Type != null)
      {
        writer.WritePropertyName("type");
        current.Type.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.PreferredElement != null)
      {
        if (current.PreferredElement.Value != null)
        {
          writer.WriteBoolean("preferred",(bool)current.PreferredElement.Value);
        }
        if (current.PreferredElement.HasExtensions() || (!string.IsNullOrEmpty(current.PreferredElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_preferred",false,current.PreferredElement.Extension,current.PreferredElement.ElementId);
        }
      }

      if ((current.Language != null) && (current.Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Language)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Domain != null) && (current.Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Domain)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Synonym != null) && (current.Synonym.Count != 0))
      {
        writer.WritePropertyName("synonym");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Synonym)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Translation != null) && (current.Translation.Count != 0))
      {
        writer.WritePropertyName("translation");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.NameComponent val in current.Translation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Official != null) && (current.Official.Count != 0))
      {
        writer.WritePropertyName("official");
        writer.WriteStartArray();
        foreach (SubstanceSpecification.OfficialComponent val in current.Official)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Name
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.NameComponent >>> SubstanceSpecification#Name.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.NameComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Name
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.NameComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "preferred":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PreferredElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.PreferredElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_preferred":
          if (current.PreferredElement == null) { current.PreferredElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.PreferredElement).DeserializeJson(ref reader, options);
          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'language' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Language = new Hl7.Fhir.Model.CodeableConcept();
            v_Language.DeserializeJson(ref reader, options);
            current.Language.Add(v_Language);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'language' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Language.Count == 0)
          {
            current.Language = null;
          }
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'domain' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Domain = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Domain = new Hl7.Fhir.Model.CodeableConcept();
            v_Domain.DeserializeJson(ref reader, options);
            current.Domain.Add(v_Domain);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'domain' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Domain.Count == 0)
          {
            current.Domain = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'synonym' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Synonym = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.NameComponent v_Synonym = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
            v_Synonym.DeserializeJson(ref reader, options);
            current.Synonym.Add(v_Synonym);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'synonym' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Synonym.Count == 0)
          {
            current.Synonym = null;
          }
          break;

        case "translation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'translation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Translation = new List<SubstanceSpecification.NameComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.NameComponent v_Translation = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
            v_Translation.DeserializeJson(ref reader, options);
            current.Translation.Add(v_Translation);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'translation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Translation.Count == 0)
          {
            current.Translation = null;
          }
          break;

        case "official":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'official' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Official = new List<SubstanceSpecification.OfficialComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent v_Official = new Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent();
            v_Official.DeserializeJson(ref reader, options);
            current.Official.Add(v_Official);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'official' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Official.Count == 0)
          {
            current.Official = null;
          }
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"NameComponent error reading 'source' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Source = new Hl7.Fhir.Model.ResourceReference();
            v_Source.DeserializeJson(ref reader, options);
            current.Source.Add(v_Source);

            if (!reader.Read())
            {
              throw new JsonException($"NameComponent error reading 'source' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }
          break;

        // Complex: name, Export: NameComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Official into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Official, Export: OfficialComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Authority != null)
      {
        writer.WritePropertyName("authority");
        current.Authority.SerializeJson(writer, options);
      }

      if (current.Status != null)
      {
        writer.WritePropertyName("status");
        current.Status.SerializeJson(writer, options);
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Official
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.OfficialComponent >>> SubstanceSpecification#Official.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.OfficialComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Official
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          current.Authority = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Authority).DeserializeJson(ref reader, options);
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        // Complex: official, Export: OfficialComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSpecification#Relationship into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSpecification#Relationship, Export: RelationshipComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Substance != null)
      {
        switch (current.Substance)
        {
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("substanceReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("substanceCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Relationship != null)
      {
        writer.WritePropertyName("relationship");
        current.Relationship.SerializeJson(writer, options);
      }

      if (current.IsDefiningElement != null)
      {
        if (current.IsDefiningElement.Value != null)
        {
          writer.WriteBoolean("isDefining",(bool)current.IsDefiningElement.Value);
        }
        if (current.IsDefiningElement.HasExtensions() || (!string.IsNullOrEmpty(current.IsDefiningElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_isDefining",false,current.IsDefiningElement.Extension,current.IsDefiningElement.ElementId);
        }
      }

      if (current.Amount != null)
      {
        switch (current.Amount)
        {
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("amountQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Range v_Range:
            writer.WritePropertyName("amountRange");
            v_Range.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Ratio v_Ratio:
            writer.WritePropertyName("amountRatio");
            v_Ratio.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("amountString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_amountString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
        }
      }
      if (current.AmountRatioLowLimit != null)
      {
        writer.WritePropertyName("amountRatioLowLimit");
        current.AmountRatioLowLimit.SerializeJson(writer, options);
      }

      if (current.AmountType != null)
      {
        writer.WritePropertyName("amountType");
        current.AmountType.SerializeJson(writer, options);
      }

      if ((current.Source != null) && (current.Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();
        foreach (ResourceReference val in current.Source)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Relationship
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSpecification.RelationshipComponent >>> SubstanceSpecification#Relationship.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSpecification.RelationshipComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSpecification#Relationship
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "substanceReference":
          current.Substance = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Substance).DeserializeJson(ref reader, options);
          break;

        case "substanceCodeableConcept":
          current.Substance = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Substance).DeserializeJson(ref reader, options);
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Relationship).DeserializeJson(ref reader, options);
          break;

        case "isDefining":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IsDefiningElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IsDefiningElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_isDefining":
          if (current.IsDefiningElement == null) { current.IsDefiningElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IsDefiningElement).DeserializeJson(ref reader, options);
          break;

        case "amountQuantity":
          current.Amount = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountRange":
          current.Amount = new Hl7.Fhir.Model.Range();
          ((Hl7.Fhir.Model.Range)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountRatio":
          current.Amount = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Amount = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Amount = new FhirString(reader.GetString());
          }
          break;

        case "_amountString":
          if (current.Amount == null) { current.Amount = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "amountRatioLowLimit":
          current.AmountRatioLowLimit = new Hl7.Fhir.Model.Ratio();
          ((Hl7.Fhir.Model.Ratio)current.AmountRatioLowLimit).DeserializeJson(ref reader, options);
          break;

        case "amountType":
          current.AmountType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AmountType).DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RelationshipComponent error reading 'source' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Source = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Source = new Hl7.Fhir.Model.ResourceReference();
            v_Source.DeserializeJson(ref reader, options);
            current.Source.Add(v_Source);

            if (!reader.Read())
            {
              throw new JsonException($"RelationshipComponent error reading 'source' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Source.Count == 0)
          {
            current.Source = null;
          }
          break;

        // Complex: relationship, Export: RelationshipComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class SubstanceSpecificationJsonConverter : JsonConverter<Hl7.Fhir.Model.SubstanceSpecification>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.SubstanceSpecification value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.SubstanceSpecification Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.SubstanceSpecification();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
