// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ValueSet
  /// </summary>
  public static class ValueSetSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ValueSet into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ValueSet");
      // Complex: ValueSet, Export: ValueSet, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      if (current.UrlElement != null)
      {
        if (!string.IsNullOrEmpty(current.UrlElement.Value))
        {
          writer.WriteString("url",current.UrlElement.Value);
        }
        if (current.UrlElement.HasExtensions() || (!string.IsNullOrEmpty(current.UrlElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_url",false,current.UrlElement.Extension,current.UrlElement.ElementId);
        }
      }

      if ((current.Identifier != null) && (current.Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();
        foreach (Identifier val in current.Identifier)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.TitleElement != null)
      {
        if (!string.IsNullOrEmpty(current.TitleElement.Value))
        {
          writer.WriteString("title",current.TitleElement.Value);
        }
        if (current.TitleElement.HasExtensions() || (!string.IsNullOrEmpty(current.TitleElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_title",false,current.TitleElement.Extension,current.TitleElement.ElementId);
        }
      }

      if (current.StatusElement != null)
      {
        if (current.StatusElement.Value != null)
        {
          writer.WriteString("status",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.StatusElement.Value));
        }
        if (current.StatusElement.HasExtensions() || (!string.IsNullOrEmpty(current.StatusElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_status",false,current.StatusElement.Extension,current.StatusElement.ElementId);
        }
      }

      if (current.ExperimentalElement != null)
      {
        if (current.ExperimentalElement.Value != null)
        {
          writer.WriteBoolean("experimental",(bool)current.ExperimentalElement.Value);
        }
        if (current.ExperimentalElement.HasExtensions() || (!string.IsNullOrEmpty(current.ExperimentalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_experimental",false,current.ExperimentalElement.Extension,current.ExperimentalElement.ElementId);
        }
      }

      if (current.DateElement != null)
      {
        if (!string.IsNullOrEmpty(current.DateElement.Value))
        {
          writer.WriteString("date",current.DateElement.Value);
        }
        if (current.DateElement.HasExtensions() || (!string.IsNullOrEmpty(current.DateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_date",false,current.DateElement.Extension,current.DateElement.ElementId);
        }
      }

      if (current.PublisherElement != null)
      {
        if (!string.IsNullOrEmpty(current.PublisherElement.Value))
        {
          writer.WriteString("publisher",current.PublisherElement.Value);
        }
        if (current.PublisherElement.HasExtensions() || (!string.IsNullOrEmpty(current.PublisherElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_publisher",false,current.PublisherElement.Extension,current.PublisherElement.ElementId);
        }
      }

      if ((current.Contact != null) && (current.Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();
        foreach (ContactDetail val in current.Contact)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.Description != null)
      {
        if (!string.IsNullOrEmpty(current.Description.Value))
        {
          writer.WriteString("description",current.Description.Value);
        }
        if (current.Description.HasExtensions() || (!string.IsNullOrEmpty(current.Description.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_description",false,current.Description.Extension,current.Description.ElementId);
        }
      }

      if ((current.UseContext != null) && (current.UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();
        foreach (UsageContext val in current.UseContext)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Jurisdiction != null) && (current.Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();
        foreach (CodeableConcept val in current.Jurisdiction)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (current.ImmutableElement != null)
      {
        if (current.ImmutableElement.Value != null)
        {
          writer.WriteBoolean("immutable",(bool)current.ImmutableElement.Value);
        }
        if (current.ImmutableElement.HasExtensions() || (!string.IsNullOrEmpty(current.ImmutableElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_immutable",false,current.ImmutableElement.Extension,current.ImmutableElement.ElementId);
        }
      }

      if (current.Purpose != null)
      {
        if (!string.IsNullOrEmpty(current.Purpose.Value))
        {
          writer.WriteString("purpose",current.Purpose.Value);
        }
        if (current.Purpose.HasExtensions() || (!string.IsNullOrEmpty(current.Purpose.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_purpose",false,current.Purpose.Extension,current.Purpose.ElementId);
        }
      }

      if (current.Copyright != null)
      {
        if (!string.IsNullOrEmpty(current.Copyright.Value))
        {
          writer.WriteString("copyright",current.Copyright.Value);
        }
        if (current.Copyright.HasExtensions() || (!string.IsNullOrEmpty(current.Copyright.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_copyright",false,current.Copyright.Extension,current.Copyright.ElementId);
        }
      }

      if (current.Compose != null)
      {
        writer.WritePropertyName("compose");
        current.Compose.SerializeJson(writer, options);
      }

      if (current.Expansion != null)
      {
        writer.WritePropertyName("expansion");
        current.Expansion.SerializeJson(writer, options);
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet >>> ValueSet.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValueSet error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ValueSet error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValueSet error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"ValueSet error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValueSet error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"ValueSet error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValueSet error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"ValueSet error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "immutable":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ImmutableElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ImmutableElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_immutable":
          if (current.ImmutableElement == null) { current.ImmutableElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ImmutableElement).DeserializeJson(ref reader, options);
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "compose":
          current.Compose = new Hl7.Fhir.Model.ValueSet.ComposeComponent();
          ((Hl7.Fhir.Model.ValueSet.ComposeComponent)current.Compose).DeserializeJson(ref reader, options);
          break;

        case "expansion":
          current.Expansion = new Hl7.Fhir.Model.ValueSet.ExpansionComponent();
          ((Hl7.Fhir.Model.ValueSet.ExpansionComponent)current.Expansion).DeserializeJson(ref reader, options);
          break;

        // Complex: ValueSet, Export: ValueSet, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Compose into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ComposeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Compose, Export: ComposeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.LockedDateElement != null)
      {
        if (!string.IsNullOrEmpty(current.LockedDateElement.Value))
        {
          writer.WriteString("lockedDate",current.LockedDateElement.Value);
        }
        if (current.LockedDateElement.HasExtensions() || (!string.IsNullOrEmpty(current.LockedDateElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_lockedDate",false,current.LockedDateElement.Extension,current.LockedDateElement.ElementId);
        }
      }

      if (current.InactiveElement != null)
      {
        if (current.InactiveElement.Value != null)
        {
          writer.WriteBoolean("inactive",(bool)current.InactiveElement.Value);
        }
        if (current.InactiveElement.HasExtensions() || (!string.IsNullOrEmpty(current.InactiveElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_inactive",false,current.InactiveElement.Extension,current.InactiveElement.ElementId);
        }
      }

      if ((current.Include != null) && (current.Include.Count != 0))
      {
        writer.WritePropertyName("include");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptSetComponent val in current.Include)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Exclude != null) && (current.Exclude.Count != 0))
      {
        writer.WritePropertyName("exclude");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptSetComponent val in current.Exclude)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Compose
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ComposeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ComposeComponent >>> ValueSet#Compose.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ComposeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Compose
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ComposeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "lockedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LockedDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.LockedDateElement = new Date(reader.GetString());
          }
          break;

        case "_lockedDate":
          if (current.LockedDateElement == null) { current.LockedDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.LockedDateElement).DeserializeJson(ref reader, options);
          break;

        case "inactive":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.InactiveElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.InactiveElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_inactive":
          if (current.InactiveElement == null) { current.InactiveElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.InactiveElement).DeserializeJson(ref reader, options);
          break;

        case "include":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ComposeComponent error reading 'include' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Include = new List<ValueSet.ConceptSetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptSetComponent v_Include = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
            v_Include.DeserializeJson(ref reader, options);
            current.Include.Add(v_Include);

            if (!reader.Read())
            {
              throw new JsonException($"ComposeComponent error reading 'include' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Include.Count == 0)
          {
            current.Include = null;
          }
          break;

        case "exclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ComposeComponent error reading 'exclude' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Exclude = new List<ValueSet.ConceptSetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptSetComponent v_Exclude = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
            v_Exclude.DeserializeJson(ref reader, options);
            current.Exclude.Add(v_Exclude);

            if (!reader.Read())
            {
              throw new JsonException($"ComposeComponent error reading 'exclude' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Exclude.Count == 0)
          {
            current.Exclude = null;
          }
          break;

        // Complex: compose, Export: ComposeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#ConceptSet into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ConceptSetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#ConceptSet, Export: ConceptSetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SystemElement != null)
      {
        if (!string.IsNullOrEmpty(current.SystemElement.Value))
        {
          writer.WriteString("system",current.SystemElement.Value);
        }
        if (current.SystemElement.HasExtensions() || (!string.IsNullOrEmpty(current.SystemElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_system",false,current.SystemElement.Extension,current.SystemElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if ((current.Concept != null) && (current.Concept.Count != 0))
      {
        writer.WritePropertyName("concept");
        writer.WriteStartArray();
        foreach (ValueSet.ConceptReferenceComponent val in current.Concept)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Filter != null) && (current.Filter.Count != 0))
      {
        writer.WritePropertyName("filter");
        writer.WriteStartArray();
        foreach (ValueSet.FilterComponent val in current.Filter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.ValueSetElement != null) && (current.ValueSetElement.Count != 0))
      {
        int valueCount = 0;
        int extensionCount = 0;
        foreach (Canonical val in current.ValueSetElement)
        {
          if (!string.IsNullOrEmpty(val.Value)) { valueCount++; }
          if (val.HasExtensions()) { extensionCount++; }
        }

        if (valueCount > 0)
        {
          writer.WritePropertyName("valueSet");
          writer.WriteStartArray();
          foreach (Canonical val in current.ValueSetElement)
          {
            if (string.IsNullOrEmpty(val.Value))
            {
              writer.WriteNullValue();
            }
            else
            {
              writer.WriteStringValue(val.Value);
            }
          }

          writer.WriteEndArray();
        }

        if (extensionCount > 0)
        {
          writer.WritePropertyName("_valueSet");
          writer.WriteStartArray();
          foreach (Canonical val in current.ValueSetElement)
          {
            if (val.HasExtensions() || (!string.IsNullOrEmpty(val.ElementId)))
            {
              JsonStreamUtilities.SerializeExtensionList(writer,options,string.Empty,true,val.Extension,val.ElementId);
            }
            else
            {
              writer.WriteNullValue();
            }

          }

          writer.WriteEndArray();
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptSet
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ConceptSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ConceptSetComponent >>> ValueSet#ConceptSet.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ConceptSetComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptSet
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ConceptSetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "system":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SystemElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.SystemElement = new FhirUri(reader.GetString());
          }
          break;

        case "_system":
          if (current.SystemElement == null) { current.SystemElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.SystemElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "concept":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptSetComponent error reading 'concept' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Concept = new List<ValueSet.ConceptReferenceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent v_Concept = new Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent();
            v_Concept.DeserializeJson(ref reader, options);
            current.Concept.Add(v_Concept);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptSetComponent error reading 'concept' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Concept.Count == 0)
          {
            current.Concept = null;
          }
          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptSetComponent error reading 'filter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Filter = new List<ValueSet.FilterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.FilterComponent v_Filter = new Hl7.Fhir.Model.ValueSet.FilterComponent();
            v_Filter.DeserializeJson(ref reader, options);
            current.Filter.Add(v_Filter);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptSetComponent error reading 'filter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Filter.Count == 0)
          {
            current.Filter = null;
          }
          break;

        case "valueSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptSetComponent error reading 'valueSet' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ValueSetElement = new List<Canonical>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ValueSetElement.Add(new Canonical());
              reader.Skip();
            }
            else
            {
              current.ValueSetElement.Add(new Canonical(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ConceptSetComponent error reading 'valueSet' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValueSetElement.Count == 0)
          {
            current.ValueSetElement = null;
          }
          break;

        case "_valueSet":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptSetComponent error reading 'valueSet' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_valueSet = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_valueSet >= current.ValueSetElement.Count)
            {
              current.ValueSetElement.Add(new Canonical());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ValueSetElement[i_valueSet++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ConceptSetComponent error reading 'valueSet' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: include, Export: ConceptSetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#ConceptReference into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#ConceptReference, Export: ConceptReferenceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if ((current.Designation != null) && (current.Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();
        foreach (ValueSet.DesignationComponent val in current.Designation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptReference
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ConceptReferenceComponent >>> ValueSet#ConceptReference.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ConceptReferenceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#ConceptReference
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ConceptReferenceComponent error reading 'designation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Designation = new List<ValueSet.DesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.DesignationComponent v_Designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
            v_Designation.DeserializeJson(ref reader, options);
            current.Designation.Add(v_Designation);

            if (!reader.Read())
            {
              throw new JsonException($"ConceptReferenceComponent error reading 'designation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Designation.Count == 0)
          {
            current.Designation = null;
          }
          break;

        // Complex: concept, Export: ConceptReferenceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Designation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.DesignationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Designation, Export: DesignationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.LanguageElement != null)
      {
        if (!string.IsNullOrEmpty(current.LanguageElement.Value))
        {
          writer.WriteString("language",current.LanguageElement.Value.Trim());
        }
        if (current.LanguageElement.HasExtensions() || (!string.IsNullOrEmpty(current.LanguageElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_language",false,current.LanguageElement.Extension,current.LanguageElement.ElementId);
        }
      }

      if (current.Use != null)
      {
        writer.WritePropertyName("use");
        current.Use.SerializeJson(writer, options);
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Designation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.DesignationComponent >>> ValueSet#Designation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.DesignationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Designation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.DesignationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LanguageElement = new Code();
            reader.Skip();
          }
          else
          {
            current.LanguageElement = new Code(reader.GetString());
          }
          break;

        case "_language":
          if (current.LanguageElement == null) { current.LanguageElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.LanguageElement).DeserializeJson(ref reader, options);
          break;

        case "use":
          current.Use = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Use).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: designation, Export: DesignationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Filter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.FilterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Filter, Export: FilterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.PropertyElement != null)
      {
        if (!string.IsNullOrEmpty(current.PropertyElement.Value))
        {
          writer.WriteString("property",current.PropertyElement.Value.Trim());
        }
        if (current.PropertyElement.HasExtensions() || (!string.IsNullOrEmpty(current.PropertyElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_property",false,current.PropertyElement.Extension,current.PropertyElement.ElementId);
        }
      }

      if (current.OpElement != null)
      {
        if (current.OpElement.Value != null)
        {
          writer.WriteString("op",Hl7.Fhir.Utility.EnumUtility.GetLiteral(current.OpElement.Value));
        }
        if (current.OpElement.HasExtensions() || (!string.IsNullOrEmpty(current.OpElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_op",false,current.OpElement.Extension,current.OpElement.ElementId);
        }
      }

      if (current.ValueElement != null)
      {
        if (!string.IsNullOrEmpty(current.ValueElement.Value))
        {
          writer.WriteString("value",current.ValueElement.Value);
        }
        if (current.ValueElement.HasExtensions() || (!string.IsNullOrEmpty(current.ValueElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_value",false,current.ValueElement.Extension,current.ValueElement.ElementId);
        }
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Filter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.FilterComponent >>> ValueSet#Filter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.FilterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Filter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "property":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PropertyElement = new Code();
            reader.Skip();
          }
          else
          {
            current.PropertyElement = new Code(reader.GetString());
          }
          break;

        case "_property":
          if (current.PropertyElement == null) { current.PropertyElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.PropertyElement).DeserializeJson(ref reader, options);
          break;

        case "op":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OpElement = new Code<Hl7.Fhir.Model.FilterOperator>();
            reader.Skip();
          }
          else
          {
            current.OpElement = new Code<Hl7.Fhir.Model.FilterOperator>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FilterOperator>(reader.GetString()));
          }
          break;

        case "_op":
          if (current.OpElement == null) { current.OpElement = new Code<Hl7.Fhir.Model.FilterOperator>(); }
          ((Hl7.Fhir.Model.Element)current.OpElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: filter, Export: FilterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Expansion into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ExpansionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Expansion, Export: ExpansionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.IdentifierElement != null)
      {
        if (!string.IsNullOrEmpty(current.IdentifierElement.Value))
        {
          writer.WriteString("identifier",current.IdentifierElement.Value);
        }
        if (current.IdentifierElement.HasExtensions() || (!string.IsNullOrEmpty(current.IdentifierElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_identifier",false,current.IdentifierElement.Extension,current.IdentifierElement.ElementId);
        }
      }

      if (current.TimestampElement != null)
      {
        if (!string.IsNullOrEmpty(current.TimestampElement.Value))
        {
          writer.WriteString("timestamp",current.TimestampElement.Value);
        }
        if (current.TimestampElement.HasExtensions() || (!string.IsNullOrEmpty(current.TimestampElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_timestamp",false,current.TimestampElement.Extension,current.TimestampElement.ElementId);
        }
      }

      if (current.TotalElement != null)
      {
        if (current.TotalElement.Value != null)
        {
          writer.WriteNumber("total",(int)current.TotalElement.Value);
        }
        if (current.TotalElement.HasExtensions() || (!string.IsNullOrEmpty(current.TotalElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_total",false,current.TotalElement.Extension,current.TotalElement.ElementId);
        }
      }

      if (current.OffsetElement != null)
      {
        if (current.OffsetElement.Value != null)
        {
          writer.WriteNumber("offset",(int)current.OffsetElement.Value);
        }
        if (current.OffsetElement.HasExtensions() || (!string.IsNullOrEmpty(current.OffsetElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_offset",false,current.OffsetElement.Extension,current.OffsetElement.ElementId);
        }
      }

      if ((current.Parameter != null) && (current.Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();
        foreach (ValueSet.ParameterComponent val in current.Parameter)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contains != null) && (current.Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();
        foreach (ValueSet.ContainsComponent val in current.Contains)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Expansion
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ExpansionComponent >>> ValueSet#Expansion.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ExpansionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Expansion
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IdentifierElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.IdentifierElement = new FhirUri(reader.GetString());
          }
          break;

        case "_identifier":
          if (current.IdentifierElement == null) { current.IdentifierElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.IdentifierElement).DeserializeJson(ref reader, options);
          break;

        case "timestamp":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TimestampElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.TimestampElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_timestamp":
          if (current.TimestampElement == null) { current.TimestampElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.TimestampElement).DeserializeJson(ref reader, options);
          break;

        case "total":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TotalElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.TotalElement = new Integer(reader.GetInt32());
          }
          break;

        case "_total":
          if (current.TotalElement == null) { current.TotalElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.TotalElement).DeserializeJson(ref reader, options);
          break;

        case "offset":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OffsetElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.OffsetElement = new Integer(reader.GetInt32());
          }
          break;

        case "_offset":
          if (current.OffsetElement == null) { current.OffsetElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.OffsetElement).DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExpansionComponent error reading 'parameter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Parameter = new List<ValueSet.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ParameterComponent v_Parameter = new Hl7.Fhir.Model.ValueSet.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException($"ExpansionComponent error reading 'parameter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExpansionComponent error reading 'contains' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contains = new List<ValueSet.ContainsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ContainsComponent v_Contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
            v_Contains.DeserializeJson(ref reader, options);
            current.Contains.Add(v_Contains);

            if (!reader.Read())
            {
              throw new JsonException($"ExpansionComponent error reading 'contains' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contains.Count == 0)
          {
            current.Contains = null;
          }
          break;

        // Complex: expansion, Export: ExpansionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.NameElement != null)
      {
        if (!string.IsNullOrEmpty(current.NameElement.Value))
        {
          writer.WriteString("name",current.NameElement.Value);
        }
        if (current.NameElement.HasExtensions() || (!string.IsNullOrEmpty(current.NameElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_name",false,current.NameElement.Extension,current.NameElement.ElementId);
        }
      }

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirString v_FhirString:
            if (v_FhirString != null)
            {
              if (!string.IsNullOrEmpty(v_FhirString.Value))
              {
                writer.WriteString("valueString",v_FhirString.Value);
              }
              if (v_FhirString.HasExtensions() || (!string.IsNullOrEmpty(v_FhirString.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueString",false,v_FhirString.Extension,v_FhirString.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            if (v_FhirBoolean != null)
            {
              if (v_FhirBoolean.Value != null)
              {
                writer.WriteBoolean("valueBoolean",(bool)v_FhirBoolean.Value);
              }
              if (v_FhirBoolean.HasExtensions() || (!string.IsNullOrEmpty(v_FhirBoolean.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueBoolean",false,v_FhirBoolean.Extension,v_FhirBoolean.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Integer v_Integer:
            if (v_Integer != null)
            {
              if (v_Integer.Value != null)
              {
                writer.WriteNumber("valueInteger",(int)v_Integer.Value);
              }
              if (v_Integer.HasExtensions() || (!string.IsNullOrEmpty(v_Integer.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueInteger",false,v_Integer.Extension,v_Integer.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDecimal v_FhirDecimal:
            if (v_FhirDecimal != null)
            {
              if (v_FhirDecimal.Value != null)
              {
                writer.WriteNumber("valueDecimal",(decimal)v_FhirDecimal.Value);
              }
              if (v_FhirDecimal.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDecimal.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDecimal",false,v_FhirDecimal.Extension,v_FhirDecimal.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirUri v_FhirUri:
            if (v_FhirUri != null)
            {
              if (!string.IsNullOrEmpty(v_FhirUri.Value))
              {
                writer.WriteString("valueUri",v_FhirUri.Value);
              }
              if (v_FhirUri.HasExtensions() || (!string.IsNullOrEmpty(v_FhirUri.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueUri",false,v_FhirUri.Extension,v_FhirUri.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.Code v_Code:
            if (v_Code != null)
            {
              if (!string.IsNullOrEmpty(v_Code.Value))
              {
                writer.WriteString("valueCode",v_Code.Value.Trim());
              }
              if (v_Code.HasExtensions() || (!string.IsNullOrEmpty(v_Code.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueCode",false,v_Code.Extension,v_Code.ElementId);
              }
            }
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            if (v_FhirDateTime != null)
            {
              if (!string.IsNullOrEmpty(v_FhirDateTime.Value))
              {
                writer.WriteString("valueDateTime",v_FhirDateTime.Value);
              }
              if (v_FhirDateTime.HasExtensions() || (!string.IsNullOrEmpty(v_FhirDateTime.ElementId)))
              {
                JsonStreamUtilities.SerializeExtensionList(writer,options,"_valueDateTime",false,v_FhirDateTime.Extension,v_FhirDateTime.ElementId);
              }
            }
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Parameter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ParameterComponent >>> ValueSet#Parameter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ParameterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Integer();
            reader.Skip();
          }
          else
          {
            current.Value = new Integer(reader.GetInt32());
          }
          break;

        case "_valueInteger":
          if (current.Value == null) { current.Value = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_valueDecimal":
          if (current.Value == null) { current.Value = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirUri(reader.GetString());
          }
          break;

        case "_valueUri":
          if (current.Value == null) { current.Value = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Code();
            reader.Skip();
          }
          else
          {
            current.Value = new Code(reader.GetString());
          }
          break;

        case "_valueCode":
          if (current.Value == null) { current.Value = new Code(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDateTime(reader.GetString());
          }
          break;

        case "_valueDateTime":
          if (current.Value == null) { current.Value = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ValueSet#Contains into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ValueSet.ContainsComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ValueSet#Contains, Export: ContainsComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.SystemElement != null)
      {
        if (!string.IsNullOrEmpty(current.SystemElement.Value))
        {
          writer.WriteString("system",current.SystemElement.Value);
        }
        if (current.SystemElement.HasExtensions() || (!string.IsNullOrEmpty(current.SystemElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_system",false,current.SystemElement.Extension,current.SystemElement.ElementId);
        }
      }

      if (current.AbstractElement != null)
      {
        if (current.AbstractElement.Value != null)
        {
          writer.WriteBoolean("abstract",(bool)current.AbstractElement.Value);
        }
        if (current.AbstractElement.HasExtensions() || (!string.IsNullOrEmpty(current.AbstractElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_abstract",false,current.AbstractElement.Extension,current.AbstractElement.ElementId);
        }
      }

      if (current.InactiveElement != null)
      {
        if (current.InactiveElement.Value != null)
        {
          writer.WriteBoolean("inactive",(bool)current.InactiveElement.Value);
        }
        if (current.InactiveElement.HasExtensions() || (!string.IsNullOrEmpty(current.InactiveElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_inactive",false,current.InactiveElement.Extension,current.InactiveElement.ElementId);
        }
      }

      if (current.VersionElement != null)
      {
        if (!string.IsNullOrEmpty(current.VersionElement.Value))
        {
          writer.WriteString("version",current.VersionElement.Value);
        }
        if (current.VersionElement.HasExtensions() || (!string.IsNullOrEmpty(current.VersionElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_version",false,current.VersionElement.Extension,current.VersionElement.ElementId);
        }
      }

      if (current.CodeElement != null)
      {
        if (!string.IsNullOrEmpty(current.CodeElement.Value))
        {
          writer.WriteString("code",current.CodeElement.Value.Trim());
        }
        if (current.CodeElement.HasExtensions() || (!string.IsNullOrEmpty(current.CodeElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_code",false,current.CodeElement.Extension,current.CodeElement.ElementId);
        }
      }

      if (current.DisplayElement != null)
      {
        if (!string.IsNullOrEmpty(current.DisplayElement.Value))
        {
          writer.WriteString("display",current.DisplayElement.Value);
        }
        if (current.DisplayElement.HasExtensions() || (!string.IsNullOrEmpty(current.DisplayElement.ElementId)))
        {
          JsonStreamUtilities.SerializeExtensionList(writer,options,"_display",false,current.DisplayElement.Extension,current.DisplayElement.ElementId);
        }
      }

      if ((current.Designation != null) && (current.Designation.Count != 0))
      {
        writer.WritePropertyName("designation");
        writer.WriteStartArray();
        foreach (ValueSet.DesignationComponent val in current.Designation)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if ((current.Contains != null) && (current.Contains.Count != 0))
      {
        writer.WritePropertyName("contains");
        writer.WriteStartArray();
        foreach (ValueSet.ContainsComponent val in current.Contains)
        {
          val.SerializeJson(writer, options, true);
        }
        writer.WriteEndArray();
      }

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Contains
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ValueSet.ContainsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ValueSet.ContainsComponent >>> ValueSet#Contains.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ValueSet.ContainsComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ValueSet#Contains
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ValueSet.ContainsComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "system":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SystemElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.SystemElement = new FhirUri(reader.GetString());
          }
          break;

        case "_system":
          if (current.SystemElement == null) { current.SystemElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.SystemElement).DeserializeJson(ref reader, options);
          break;

        case "abstract":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AbstractElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AbstractElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_abstract":
          if (current.AbstractElement == null) { current.AbstractElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AbstractElement).DeserializeJson(ref reader, options);
          break;

        case "inactive":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.InactiveElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.InactiveElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_inactive":
          if (current.InactiveElement == null) { current.InactiveElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.InactiveElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "display":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DisplayElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DisplayElement = new FhirString(reader.GetString());
          }
          break;

        case "_display":
          if (current.DisplayElement == null) { current.DisplayElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DisplayElement).DeserializeJson(ref reader, options);
          break;

        case "designation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContainsComponent error reading 'designation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Designation = new List<ValueSet.DesignationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.DesignationComponent v_Designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
            v_Designation.DeserializeJson(ref reader, options);
            current.Designation.Add(v_Designation);

            if (!reader.Read())
            {
              throw new JsonException($"ContainsComponent error reading 'designation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Designation.Count == 0)
          {
            current.Designation = null;
          }
          break;

        case "contains":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContainsComponent error reading 'contains' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contains = new List<ValueSet.ContainsComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ValueSet.ContainsComponent v_Contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
            v_Contains.DeserializeJson(ref reader, options);
            current.Contains.Add(v_Contains);

            if (!reader.Read())
            {
              throw new JsonException($"ContainsComponent error reading 'contains' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contains.Count == 0)
          {
            current.Contains = null;
          }
          break;

        // Complex: contains, Export: ContainsComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ValueSetJsonConverter : JsonConverter<Hl7.Fhir.Model.ValueSet>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ValueSet value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ValueSet Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ValueSet();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
