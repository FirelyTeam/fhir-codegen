// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Buffers;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
    /// <summary>
    /// Common resource converter to support polymorphic deserialization.
    /// </summary>
    public class JsonStreamResourceConverter : JsonConverter<Resource>
    {
        private static readonly byte[] _startObject = Encoding.UTF8.GetBytes("{");
        private static readonly byte[] _endObject = Encoding.UTF8.GetBytes("}");
        private static readonly byte[] _startArray = Encoding.UTF8.GetBytes("[");
        private static readonly byte[] _endArray = Encoding.UTF8.GetBytes("]");
        private static readonly byte[] _comma = Encoding.UTF8.GetBytes(",");
        private static readonly byte[] _propertySep = Encoding.UTF8.GetBytes(":");
        private static readonly byte[] _quote = Encoding.UTF8.GetBytes("\"");

        /// <summary>
        /// Determines whether the specified type can be converted.
        /// </summary>
        public override bool CanConvert(Type objectType) =>
          typeof(Resource).IsAssignableFrom(objectType);

        /// <summary>
        /// Writes a specified value as JSON.
        /// </summary>
        public override void Write(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
        {
            WriteResource(writer, resource, options);
        }

        /// <summary>
        /// Writes a specified Resource as JSON.
        /// </summary>
        public static void WriteResource(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
        {
            SerializeJsonResourceDispatcher.DispatchSerializeJson(writer, resource, options);
        }

        /// <summary>
        /// Reads and converts the JSON to a typed object.
        /// </summary>
        public override Resource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            return PolymorphicRead(ref reader, options);
        }


        /// <summary>
        /// Copy raw data from a Utf8JsonReader to a MemoryStream.
        /// </summary>
        private static void WriteReaderValueBytes(ref MemoryStream ms, ref Utf8JsonReader reader)
        {
            if (reader.HasValueSequence)
            {
                byte[] data = new byte[reader.ValueSequence.Length];
                reader.ValueSequence.CopyTo(data);
                ms.Write(data);
                return;
            }

            ms.Write(reader.ValueSpan);
        }

        /// <summary>
        /// Add a JSON seperator token, if necessary.
        /// </summary>
        private static void AddSeperatorIfNeeded(ref MemoryStream ms, ref Utf8JsonReader reader, JsonTokenType last)
        {
            switch (last)
            {
                case JsonTokenType.StartObject:
                case JsonTokenType.StartArray:
                    // do nothing
                    break;
                case JsonTokenType.PropertyName:
                    ms.Write(_propertySep);
                    break;
                default:
                    ms.Write(_comma);
                    break;
            }
        }

        /// <summary>
        /// Read override to handle polymorphic reading of resources.
        /// </summary>
        internal static Resource PolymorphicRead(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string propertyName = null;
            string resourceType = null;

            if (reader.TokenType == JsonTokenType.None)
            {
                reader.Read();
            }

            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException($"PolymorphicRead <<< error reading: expected StartObject, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }

            reader.Read();
            if (reader.TokenType != JsonTokenType.PropertyName)
            {
                throw new JsonException($"PolymorphicRead <<< error reading: expected PropertyName, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }

            propertyName = reader.GetString();
            if (propertyName == "resourceType")
            {
                reader.Read();
                if (reader.TokenType != JsonTokenType.String)
                {
                    throw new JsonException($"PolymorphicRead <<< error reading 'resourceType': expected String, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
                }

                resourceType = reader.GetString();

                return SerializeJsonResourceDispatcher.DispatchDeserializeJson(ref reader, options, resourceType);
            }

            MemoryStream ms = new MemoryStream(4096);

            ms.Write(Encoding.UTF8.GetBytes($"{{\"{propertyName}\""));
            propertyName = string.Empty;

            int depth = reader.CurrentDepth;
            bool done = false;
            bool nextValueIsResourceType = false;
            JsonTokenType lastToken = JsonTokenType.PropertyName;

            while ((!done) && reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
                        ms.Write(_startObject);
                        break;

                    case JsonTokenType.EndObject:
                        ms.Write(_endObject);
                        if (reader.CurrentDepth == (depth - 1))
                        {
                            done = true;
                        }
                        break;

                    case JsonTokenType.StartArray:
                        AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
                        ms.Write(_startArray);
                        break;

                    case JsonTokenType.EndArray:
                        ms.Write(_endArray);
                        break;

                    case JsonTokenType.PropertyName:
                        AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
                        if (reader.CurrentDepth == depth)
                        {
                            if (reader.ValueTextEquals("resourceType"))
                            {
                                nextValueIsResourceType = true;
                            }
                        }

                        ms.Write(_quote);
                        WriteReaderValueBytes(ref ms, ref reader);
                        ms.Write(_quote);
                        break;

                    case JsonTokenType.Comment:
                        break;

                    case JsonTokenType.String:
                        AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
                        if (nextValueIsResourceType)
                        {
                            resourceType = reader.GetString();
                            nextValueIsResourceType = false;
                        }

                        ms.Write(_quote);
                        WriteReaderValueBytes(ref ms, ref reader);
                        ms.Write(_quote);
                        break;

                    case JsonTokenType.Number:
                    case JsonTokenType.True:
                    case JsonTokenType.False:
                    case JsonTokenType.Null:
                    default:
                        AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
                        WriteReaderValueBytes(ref ms, ref reader);
                        break;
                }

                lastToken = reader.TokenType;
            }

            ms.Flush();
            Utf8JsonReader secondary = new Utf8JsonReader(ms.GetBuffer());

            return SerializeJsonResourceDispatcher.DispatchDeserializeJson(ref secondary, options, resourceType);
        }

        private static string determineResourceType(ref Utf8JsonReader reader)
        {
            var originalReader = reader;    // copy the struct so we can "rewind"
            var state = reader.CurrentState;
            var atDepth = reader.CurrentDepth + 1;

            try
            {
                while (reader.Read())
                {
                    if (reader.TokenType == JsonTokenType.PropertyName && reader.CurrentDepth == atDepth)
                    {
                        var propName = reader.GetString();

                        if (propName == "resourceType")
                        {
                            reader.Read();
                            if (reader.TokenType != JsonTokenType.String)
                            {
                                throw new JsonException($"PolymorphicRead <<< error reading 'resourceType': expected String, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
                            }

                            return reader.GetString();
                        }
                    }
                }

                return null;
            }
            finally
            {
                reader = originalReader;
            }
        }


        /// <summary>
        /// Read override to handle polymorphic reading of resources.
        /// </summary>
        public static Resource PolymorphicRead(ref Utf8JsonReader reader, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.None)
            {
                reader.Read();
            }

            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException($"PolymorphicRead <<< error reading: expected StartObject, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }

            var resourceType = determineResourceType(ref reader);
            if(resourceType is null)
                throw new JsonException($"PolymorphicRead <<< error reading: expected to find resourceType! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");

            return SerializeJsonResourceDispatcher.DispatchDeserializeJson(ref reader, options, resourceType);
        }
    }
}
// end of file
